{"version":3,"sources":["webpack:///src/app/shared/payloads/amenities.payload.ts","webpack:///src/app/shared/payloads/franchise.payload.ts","webpack:///src/app/shared/payloads/restaurant.payload.ts","webpack:///src/app/shared/payloads/restaurant-app-data.payload.ts","webpack:///src/app/shared/payloads/restaurant-detail.payload.ts","webpack:///src/app/shared/payloads/restaurant-extra.payload.ts","webpack:///src/app/shared/payloads/restaurant-parking.payload.ts","webpack:///src/app/shared/payloads/restaurant-images.payload.ts","webpack:///src/app/shared/payloads/restaurant-payment-method.payload.ts","webpack:///src/app/shared/payloads/restaurant-working-hours.payload.ts","webpack:///src/app/shared/payloads/restaurant-reservation-zone.payload.ts","webpack:///src/app/shared/payloads/restaurant-service-type.payload.ts","webpack:///src/app/shared/payloads/index.ts","webpack:///src/app/pages/layout/preferences/amenities/extras/extras.module.ts","webpack:///src/app/pages/layout/preferences/amenities/extras/extras.component.ts","webpack:///src/app/pages/layout/preferences/amenities/extras/extras.component.html","webpack:///src/app/pages/layout/preferences/amenities/extras/extras-routing.module.ts"],"names":["AmenitiesPayload","pTypes","pZones","pExtras","pParkings","pPpaymentMethods","this","types","zones","extras","parkings","paymentMethods","getExtras","payment_methods","map","extra","id","active","name","BusinessPayload","pBusinessForm","businessForm","form","value","price_range","style","RestaurantPayload","pNewRestaurantForm","newRestaurantForm","avoidManagerUpdate","restaurantInfo","get","description","coordinates","concatCoordinates","address","phone","getPhone","email","invoice_email","invoice_url","manager","undefined","billingOption","emailBilling","websiteBilling","coordinatesArray","push","parseFloat","RestaurantAppDataPayload","pAppDataForm","appDataForm","max_offered_seats","max_people_per_order","max_cancel_limit_minutes","getTotalMinutes","reservation_time_minutes","RestaurantDetailPayload","pRestaurantDetailForm","restaurantDetailForm","getCoordinatesArray","address_extra","getParsedPhone","trim","RestuarantExtraPayload","pExtrasForm","extrasForm","getRawValue","RestuarantParkingPayload","pParkingForm","parkingForm","RestaurantImagesPayload","pImagesForm","imagesForm","galleryData","FormData","append","galleryImages","controls","forEach","control","i","RestuarantPaymentMethodPayload","pPaymentMethodsForm","paymentMethodsForm","RestaurantWorkingHoursPayload","pWorkingHoursForm","workingHoursForm","working_hours","getFixedHours","getMixedHours","currentWeekdays","activeDays","weekday","index","weekdayObject","week_day","opens_at","closes_at","hours","Object","keys","fixedHours","weekdays","day","object","parseInt","RestuarantReservationZonePayload","pReservationZonesFOrm","reservationZonesForm","RestuarantServiceTypePayload","pServiceTypeForm","serviceTypeForm","ExtrasModule","fb","restaurantService","snackBar","group","restaurantId","localStorage","getItem","deleteSubscription","Subscription","EMPTY","amenitiesSubscription","restaurantSubscription","unsubscribe","event","eventElement","target","currentExtras","localExtraObject","capitalizeString","isGlobal","addNew","nativeElement","extraId","deleteExtraAmenity","subscribe","removeExtraFromView","extrasPayload","setRestaurantAmenities","toJson","openSnackBar","preventDefault","onExtraDelete","removeAt","splitString","toLowerCase","split","length","charAt","toUpperCase","substring","join","getRestaurantDetail","pipe","response","restaurant","pExtra","setUpForm","message","action","open","duration","extrasFormArray","extraObject","ExtrasRoutingModule"],"mappings":"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","file":"x","sourcesContent":["import { AmenitiesToSave } from '@models';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class AmenitiesPayload {\r\n  types?: Array<number>;\r\n  zones?: Array<number>;\r\n  extras?: Array<IExtra>;\r\n  parkings?: Array<number>;\r\n  paymentMethods?: Array<number>;\r\n\r\n  constructor(\r\n    pTypes: Array<number>,\r\n    pZones: Array<number>,\r\n    pExtras: Array<IExtra>,\r\n    pParkings: Array<number>,\r\n    pPpaymentMethods: Array<number>\r\n  ) {\r\n    this.types = pTypes;\r\n    this.zones = pZones;\r\n    this.extras = pExtras;\r\n    this.parkings = pParkings;\r\n    this.paymentMethods = pPpaymentMethods;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.types,\r\n      zones: this.zones,\r\n      extras: this.getExtras(),\r\n      parkings: this.parkings,\r\n      payment_methods: this.paymentMethods\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extras.map((extra: IExtra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { IFranchise } from '@interfaces';\r\nimport { Franchise } from '@models';\r\n\r\nexport class BusinessPayload {\r\n  businessForm: FormGroup;\r\n\r\n  constructor(pBusinessForm: FormGroup) {\r\n    this.businessForm = pBusinessForm;\r\n  }\r\n\r\n  toJson(): Franchise {\r\n    const form = this.businessForm.value;\r\n\r\n    const body: IFranchise = {\r\n      id: form.id || null,\r\n      name: form.name || null,\r\n      price_range: form.price_range,\r\n      style: form.style,\r\n    };\r\n\r\n    return body;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { Restaurant } from '@models';\r\n\r\nexport class RestaurantPayload {\r\n  newRestaurantForm: FormGroup;\r\n\r\n  constructor(pNewRestaurantForm: FormGroup) {\r\n    this.newRestaurantForm = pNewRestaurantForm;\r\n  }\r\n\r\n  public toJson(avoidManagerUpdate?: boolean): Restaurant {\r\n    const form = this.newRestaurantForm;\r\n\r\n    const restaurantInfo = {\r\n      name: form.get('name').value,\r\n      description: form.get('description').value,\r\n      coordinates: this.concatCoordinates(),\r\n      address: form.get('address').value,\r\n      phone: this.getPhone(),\r\n      email: form.get('email').value,\r\n      invoice_email: '',\r\n      invoice_url: '',\r\n      manager:\r\n        (form.get('manager').value || form.get('manager').value === 0) &&\r\n        !avoidManagerUpdate\r\n          ? form.get('manager').value\r\n          : undefined,\r\n    };\r\n\r\n    if (form.value.billingOption === '0') {\r\n      restaurantInfo.invoice_email = form.value.emailBilling;\r\n      delete restaurantInfo.invoice_url;\r\n    } else {\r\n      restaurantInfo.invoice_url = form.value.websiteBilling;\r\n      delete restaurantInfo.invoice_email;\r\n    }\r\n\r\n    return restaurantInfo as Restaurant;\r\n  }\r\n\r\n  private getPhone(): string {\r\n    return `+${this.newRestaurantForm.get('dialCode').value}${\r\n      this.newRestaurantForm.get('phone').value\r\n    }`;\r\n  }\r\n\r\n  private concatCoordinates(): Array<number> {\r\n    const coordinatesArray: Array<number> = [];\r\n\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('latitude').value)\r\n    );\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('longitude').value)\r\n    );\r\n\r\n    return coordinatesArray;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nexport class RestaurantAppDataPayload {\r\n  appDataForm: FormGroup;\r\n\r\n  constructor(pAppDataForm: FormGroup) {\r\n    this.appDataForm = pAppDataForm;\r\n  }\r\n\r\n  toJson() {\r\n    return {\r\n      max_offered_seats: this.appDataForm.get('max_offered_seats').value,\r\n      max_people_per_order: this.appDataForm.get('max_people_per_order').value,\r\n      max_cancel_limit_minutes: this.getTotalMinutes(),\r\n      reservation_time_minutes: this.appDataForm.get('reservation_time_minutes').value,\r\n    };\r\n  }\r\n\r\n  private getTotalMinutes(): number {\r\n    const hoursToMinutes = this.appDataForm.get('max_cancel_limit_hours').value * 60;\r\n    const totalMinutes = +hoursToMinutes + +this.appDataForm.get('max_cancel_limit_minutes').value;\r\n\r\n    return totalMinutes;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { NewBranch } from '@models';\r\n\r\nexport class RestaurantDetailPayload {\r\n  restaurantDetailForm: FormGroup;\r\n\r\n  constructor(pRestaurantDetailForm: FormGroup) {\r\n    this.restaurantDetailForm = pRestaurantDetailForm;\r\n  }\r\n\r\n  toJson(): NewBranch {\r\n    return {\r\n      name: this.restaurantDetailForm.get('name').value,\r\n      description: this.restaurantDetailForm.get('description').value,\r\n      coordinates: this.getCoordinatesArray(),\r\n      address: this.restaurantDetailForm.get('address').value,\r\n      address_extra: this.restaurantDetailForm.get('address_extra').value,\r\n      phone: this.getParsedPhone(),\r\n      email: this.restaurantDetailForm.get('email').value\r\n    };\r\n  }\r\n\r\n  private getCoordinatesArray(): Array<number> {\r\n    const coordArray = [\r\n      parseFloat(this.restaurantDetailForm.get('lat').value),\r\n      parseFloat(this.restaurantDetailForm.get('long').value)\r\n    ];\r\n\r\n    return coordArray;\r\n  }\r\n\r\n  private getParsedPhone(): string {\r\n    const form = this.restaurantDetailForm;\r\n    const concatPhone = `+${form.get('countryCode').value} ${form\r\n      .get('phone')\r\n      .value.trim()}`;\r\n\r\n    return concatPhone;\r\n  }\r\n}\r\n","import { Extra, AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class RestuarantExtraPayload {\r\n  extrasForm: FormGroup;\r\n\r\n  constructor(pExtrasForm: FormGroup) {\r\n    this.extrasForm = pExtrasForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      extras: this.getExtras()\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extrasForm.getRawValue().extras.map((extra: Extra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nexport class RestuarantParkingPayload {\r\n  parkingForm: FormGroup;\r\n\r\n  constructor(pParkingForm: FormGroup) {\r\n    this.parkingForm = pParkingForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      parkings: this.parkingForm.get('parking').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantImagesPayload {\r\n  private imagesForm: FormGroup;\r\n\r\n  constructor(pImagesForm: FormGroup) {\r\n    this.imagesForm = pImagesForm;\r\n  }\r\n\r\n  public toFormData(): FormData {\r\n    const galleryData = new FormData();\r\n\r\n    galleryData.append('cover', this.imagesForm.get('coverImage').value);\r\n\r\n    const galleryImages = this.imagesForm.get('galleryImages') as FormArray;\r\n\r\n    galleryImages.controls.forEach((control, i) => {\r\n      if (!control.get('id')) {\r\n        galleryData.append(\r\n          'gallery[' + i + ']',\r\n          galleryImages.controls[i].get('fileValue').value\r\n        );\r\n      }\r\n    });\r\n\r\n    if (this.imagesForm.get('imageLink').value) {\r\n      galleryData.append('matterport', this.imagesForm.get('imageLink').value);\r\n    }\r\n    return galleryData;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantPaymentMethodPayload {\r\n  paymentMethodsForm: FormGroup;\r\n\r\n  constructor(pPaymentMethodsForm: FormGroup) {\r\n    this.paymentMethodsForm = pPaymentMethodsForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      payment_methods: this.paymentMethodsForm.get('paymentMethods').value || []\r\n    };\r\n  }\r\n}\r\n","import { IWorkingHour } from '@interfaces';\r\nimport { WorkingHoursResponse } from '@models';\r\nimport { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantWorkingHoursPayload {\r\n  private workingHoursForm: FormGroup;\r\n\r\n  constructor(pWorkingHoursForm: FormGroup) {\r\n    this.workingHoursForm = pWorkingHoursForm;\r\n  }\r\n\r\n  public fixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getFixedHours() };\r\n  }\r\n\r\n  public mixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getMixedHours() };\r\n  }\r\n\r\n  private getMixedHours() {\r\n    const currentWeekdays = this.workingHoursForm.get(\r\n      'mixedHours'\r\n    ) as FormArray;\r\n    const activeDays: Array<IWorkingHour> = [];\r\n\r\n    currentWeekdays.controls.forEach((weekday, index) => {\r\n      if (weekday.get('isSelected').value === true) {\r\n        const weekdayObject = {\r\n          week_day: index + 1,\r\n          opens_at: weekday.get('opening').value,\r\n          closes_at: weekday.get('closing').value\r\n        };\r\n\r\n        activeDays.push(weekdayObject);\r\n      }\r\n    });\r\n\r\n    return activeDays;\r\n  }\r\n\r\n  private getFixedHours(): Array<IWorkingHour> {\r\n    const hours: Array<IWorkingHour> = [];\r\n\r\n    Object.keys(this.workingHoursForm.value.fixedHours.weekdays).forEach(\r\n      day => {\r\n        const fixedHours = this.workingHoursForm.get('fixedHours');\r\n        if (fixedHours.get('weekdays').get(day).value) {\r\n          const object = {\r\n            week_day: parseInt(day, 10),\r\n            opens_at: fixedHours.get('opening').value,\r\n            closes_at: fixedHours.get('closing').value\r\n          };\r\n\r\n          hours.push(object);\r\n        }\r\n      }\r\n    );\r\n\r\n    return hours;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantReservationZonePayload {\r\n  reservationZonesForm: FormGroup;\r\n\r\n  constructor(pReservationZonesFOrm: FormGroup) {\r\n    this.reservationZonesForm = pReservationZonesFOrm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      zones: this.reservationZonesForm.get('zones').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantServiceTypePayload {\r\n  serviceTypeForm: FormGroup;\r\n\r\n  constructor(pServiceTypeForm: FormGroup) {\r\n    this.serviceTypeForm = pServiceTypeForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.serviceTypeForm.get('type').value || []\r\n    };\r\n  }\r\n}\r\n","export * from './amenities.payload';\r\nexport * from './franchise.payload';\r\nexport * from './restaurant.payload';\r\nexport * from './restaurant-app-data.payload';\r\nexport * from './restaurant-detail.payload';\r\nexport * from './restaurant-extra.payload';\r\nexport * from './restaurant-parking.payload';\r\nexport * from './restaurant-images.payload';\r\nexport * from './restaurant-payment-method.payload';\r\nexport * from './restaurant-working-hours.payload';\r\nexport * from './restaurant-reservation-zone.payload';\r\nexport * from './restaurant-service-type.payload';\r\n","import { CommonModule } from '@angular/common';\r\nimport { ExtrasComponent } from './extras.component';\r\nimport { ExtrasRoutingModule } from './extras-routing.module';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ExtrasComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ExtrasRoutingModule,\r\n    MatCheckboxModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatIconModule\r\n  ]\r\n})\r\nexport class ExtrasModule { }\r\n","import { IExtra } from '@interfaces';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RestaurantService } from '@services';\r\nimport { RestuarantExtraPayload } from '@payloads';\r\nimport { map } from 'rxjs/operators';\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { Extra, ResponseDetail } from '@models';\r\nimport { FormGroup, FormBuilder, FormArray } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-extras',\r\n  templateUrl: './extras.component.html',\r\n  styleUrls: ['./extras.component.scss']\r\n})\r\nexport class ExtrasComponent implements OnInit, OnDestroy {\r\n  @ViewChild('addNew') addNew: ElementRef;\r\n  extrasForm: FormGroup = this.fb.group({\r\n    extras: new FormArray([])\r\n  });\r\n  extras: Array<Extra> = [];\r\n  restaurantId: number = parseInt(localStorage.getItem('restaurantId'), 10);\r\n  showExtraField: boolean;\r\n  deleteSubscription = Subscription.EMPTY;\r\n  amenitiesSubscription = Subscription.EMPTY;\r\n  restaurantSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private restaurantService: RestaurantService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getExtras();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.deleteSubscription.unsubscribe();\r\n    this.amenitiesSubscription.unsubscribe();\r\n    this.restaurantSubscription.unsubscribe();\r\n  }\r\n\r\n  get extrasFormArray(): FormArray {\r\n    return this.extrasForm.get('extras') as FormArray;\r\n  }\r\n\r\n  addUserExtraAmenity(event: KeyboardEvent): void {\r\n    const eventElement = event.target as HTMLInputElement;\r\n    const currentExtras = this.extrasForm.get('extras') as FormArray;\r\n\r\n    const localExtraObject = this.fb.group({\r\n      id: [undefined],\r\n      name: [this.capitalizeString(eventElement.value)],\r\n      isGlobal: [false],\r\n      active: [true]\r\n    });\r\n\r\n    currentExtras.push(localExtraObject);\r\n    this.addNew.nativeElement.value = '';\r\n  }\r\n\r\n  onExtraDelete(extraId: number, index: number): void {\r\n    this.deleteSubscription = this.restaurantService\r\n      .deleteExtraAmenity(this.restaurantId, extraId)\r\n      .subscribe(() => this.removeExtraFromView(index));\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const extrasPayload = new RestuarantExtraPayload(this.extrasForm);\r\n\r\n    this.amenitiesSubscription = this.restaurantService\r\n      .setRestaurantAmenities(extrasPayload.toJson(), this.restaurantId)\r\n      .subscribe(() => this.openSnackBar('Cambios guardados', 'Entendido'));\r\n  }\r\n\r\n  removeExtra(event: MouseEvent, extra: FormGroup, index: number): void {\r\n    event.preventDefault();\r\n    const extraId = extra.get('id').value;\r\n\r\n    if (extraId) {\r\n      this.onExtraDelete(extraId, index);\r\n    } else {\r\n      this.removeExtraFromView(index);\r\n    }\r\n  }\r\n\r\n  removeExtraFromView(index: number): void {\r\n    const currentExtras = this.extrasForm.get('extras') as FormArray;\r\n\r\n    currentExtras.removeAt(index);\r\n  }\r\n\r\n  private capitalizeString(value: string): string {\r\n    const splitString = value.toLowerCase().split(' ');\r\n\r\n    for (let i = 0; i < splitString.length; i++) {\r\n      splitString[i] =\r\n        splitString[i].charAt(0).toUpperCase() + splitString[i].substring(1);\r\n    }\r\n\r\n    return splitString.join(' ');\r\n  }\r\n\r\n  private getExtras(): void {\r\n    this.restaurantSubscription = this.restaurantService\r\n      .getRestaurantDetail(this.restaurantId)\r\n      .pipe(\r\n        map((response: ResponseDetail) => {\r\n          const extras = response.restaurant.extras.map((pExtra: IExtra) => {\r\n            return new Extra(pExtra);\r\n          });\r\n\r\n          return extras;\r\n        })\r\n      )\r\n      .subscribe((extras: Array<Extra>) => {\r\n        this.extras = extras;\r\n        this.setUpForm();\r\n      });\r\n  }\r\n\r\n  private openSnackBar(message: string, action: string): void {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000\r\n    });\r\n  }\r\n\r\n  private setUpForm(): void {\r\n    const extrasFormArray = this.extrasForm.get('extras') as FormArray;\r\n\r\n    while (extrasFormArray.length > 0) {\r\n      extrasFormArray.removeAt(0);\r\n    }\r\n\r\n    this.extras.forEach(extra => {\r\n      const extraObject = this.fb.group({\r\n        id: [extra.id || undefined],\r\n        name: [extra.name],\r\n        isGlobal: [extra.isGlobal],\r\n        active: [extra.active]\r\n      });\r\n\r\n      extrasFormArray.push(extraObject);\r\n    });\r\n  }\r\n}\r\n","<form [formGroup]=\"extrasForm\" class=\"dark\" novalidate>\r\n  <div formArrayName=\"extras\">\r\n    <ng-container *ngFor=\"let extra of extrasFormArray.controls; let i = index;\" [formGroupName]=\"i\">\r\n      <mat-checkbox formControlName=\"active\">\r\n        {{ extra.get('name').value }}\r\n        <mat-icon \r\n          class=\"clr-yellow\"\r\n          *ngIf=\"!extra.get('isGlobal').value\"\r\n          (click)=\"removeExtra($event, extra, i)\"\r\n        >\r\n          delete\r\n        </mat-icon>\r\n      </mat-checkbox>\r\n    </ng-container>\r\n  </div>\r\n  <div class=\"inl column news\">\r\n    <div>\r\n      <a class=\"inl\" (click)=\"this.showExtraField = true\" *ngIf=\"!showExtraField\">\r\n        <img src=\"/assets/images/icons/icon-add.svg\" alt=\"Agregar\" />\r\n        <span>Agregar</span>\r\n      </a>\r\n\r\n      <mat-form-field *ngIf=\"showExtraField\">\r\n        <mat-label>Nuevo</mat-label>\r\n        <input matInput \r\n        (keyup.enter)=\"addUserExtraAmenity($event)\" \r\n        (keyup.esc)=\"showExtraField = false\" \r\n        maxlength=\"80\"\r\n        #addNew \r\n        />\r\n      </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <button class=\"btns\" type=\"button\" (click)=\"onSubmit()\">\r\n    <span>Guardar</span>\r\n  </button>\r\n</form>","import { ExtrasComponent } from './extras.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ExtrasComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ExtrasRoutingModule { }\r\n"]}