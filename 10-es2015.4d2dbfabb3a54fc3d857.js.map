{"version":3,"sources":["webpack:///src/app/shared/payloads/amenities.payload.ts","webpack:///src/app/shared/payloads/franchise.payload.ts","webpack:///src/app/shared/payloads/restaurant.payload.ts","webpack:///src/app/shared/payloads/restaurant-app-data.payload.ts","webpack:///src/app/shared/payloads/restaurant-detail.payload.ts","webpack:///src/app/shared/payloads/restaurant-extra.payload.ts","webpack:///src/app/shared/payloads/restaurant-parking.payload.ts","webpack:///src/app/shared/payloads/restaurant-images.payload.ts","webpack:///src/app/shared/payloads/restaurant-payment-method.payload.ts","webpack:///src/app/shared/payloads/restaurant-working-hours.payload.ts","webpack:///src/app/shared/payloads/restaurant-reservation-zone.payload.ts","webpack:///src/app/shared/payloads/restaurant-service-type.payload.ts","webpack:///src/app/shared/payloads/index.ts","webpack:///node_modules/@agm/core/agm-core.d.ts.AgmMap.html","webpack:///node_modules/rxjs/_esm2015/internal/operators/sample.js","webpack:///node_modules/@agm/core/fesm2015/agm-core.js","webpack:///node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js","webpack:///node_modules/ng2-tel-input/esm2015/ng2-tel-input.js"],"names":["AmenitiesPayload","pTypes","pZones","pExtras","pParkings","pPpaymentMethods","this","types","zones","extras","parkings","paymentMethods","getExtras","payment_methods","map","extra","id","active","name","BusinessPayload","pBusinessForm","businessForm","form","value","price_range","style","RestaurantPayload","pNewRestaurantForm","newRestaurantForm","avoidManagerUpdate","restaurantInfo","get","description","coordinates","concatCoordinates","address","phone","getPhone","email","invoice_email","invoice_url","manager","undefined","billingOption","emailBilling","websiteBilling","coordinatesArray","push","parseFloat","RestaurantAppDataPayload","pAppDataForm","appDataForm","max_offered_seats","max_people_per_order","max_cancel_limit_minutes","getTotalMinutes","reservation_time_minutes","RestaurantDetailPayload","pRestaurantDetailForm","restaurantDetailForm","getCoordinatesArray","address_extra","getParsedPhone","trim","RestuarantExtraPayload","pExtrasForm","extrasForm","getRawValue","RestuarantParkingPayload","pParkingForm","parkingForm","RestaurantImagesPayload","pImagesForm","imagesForm","galleryData","FormData","append","galleryImages","controls","forEach","control","i","RestuarantPaymentMethodPayload","pPaymentMethodsForm","paymentMethodsForm","RestaurantWorkingHoursPayload","pWorkingHoursForm","workingHoursForm","working_hours","getFixedHours","getMixedHours","currentWeekdays","activeDays","weekday","index","weekdayObject","week_day","opens_at","closes_at","hours","Object","keys","fixedHours","weekdays","day","object","parseInt","RestuarantReservationZonePayload","pReservationZonesFOrm","reservationZonesForm","RestuarantServiceTypePayload","pServiceTypeForm","serviceTypeForm","notifier","subscriber","source","sampleSubscriber","subscription","subscribe","add","subscribeToResult","OuterSubscriber","super","arguments","hasValue","outerValue","innerValue","outerIndex","innerIndex","innerSub","emitValue","destination","next","MapsAPILoader","_loader","_zone","_map","Promise","resolve","_mapResolver","el","mapOptions","runOutsideAngular","load","then","google","maps","Map","options","m","setOptions","addToMap","Marker","InfoWindow","strokePosition","StrokePosition","Circle","Rectangle","getNativeMap","line","Polyline","setMap","polygon","Polygon","data","Data","newLayer","TransitLayer","visible","BicyclingLayer","latLng","geometry","poly","containsLocation","eventName","Observable","observer","addListener","arg","run","event","clearInstanceListeners","setCenter","getZoom","getBounds","getMapTypeId","zoom","setZoom","getCenter","panTo","x","y","panBy","padding","fitBounds","panToBounds","trigger","LayerManager","_wrapper","_layers","layer","createTransitLayer","set","createBicyclingLayer","currentLayer","delete","_apiWrapper","_circles","circle","createCircle","center","lat","latitude","lng","longitude","clickable","draggable","editable","fillColor","fillOpacity","radius","strokeColor","strokeOpacity","strokeWeight","zIndex","c","getRadius","setEditable","setDraggable","setVisible","setRadius","listener","e","remove","createDataLayer","d","geoJson","getDataFeatures","features","l","feature","indexOf","splice","setControlPosition","controlPosition","setControls","setDrawingMode","drawingMode","setStyle","reject","addGeoJson","loadGeoJson","FitBoundsAccessor","loader","_boundsChangeSampleTime$","BehaviorSubject","_includeInBounds$","bounds$","from","pipe","switchMap","time","timer","lift","includeInBounds","_generateBounds","shareReplay","bounds","LatLngBounds","b","extend","_createIdentifier","has","timeMs","_mapsWrapper","_markers","uiAnim","__awaiter","Animation","marker","setPosition","setTitle","title","setLabel","label","setIcon","iconUrl","setOpacity","opacity","setZIndex","setClickable","setAnimation","convertAnimation","animation","markerPromise","createMarker","position","icon","_markerManager","_infoWindows","infoWindow","iWindow","close","w","hostMarker","getNativeMarker","open","content","maxWidth","disableAutoPan","infoWindowPromise","createInfoWindow","AgmInfoWindow_1","infoWindowId","AgmInfoWindow","_infoWindowManager","_el","isOpen","infoWindowClose","_infoWindowAddedToManager","_id","toString","nativeElement","querySelector","addInfoWindow","_updateOpenState","_registerEventListeners","changes","_setInfoWindowOptions","createEventObservable","emit","filter","k","_infoWindowOptionsInputs","currentValue","deleteInfoWindow","KmlLayer","preserveViewport","screenOverlays","suppressInfoWindows","url","createMVCEventObservable","array","eventNames","fromEventPattern","addHandler","removeHandler","resultSelector","args","isArray","handler","length","retValue","err","error","isFunction","evName","previous","apply","getArray","_handler","evListeners","evListener","_polygons","path","polygonPromise","createPolygon","geodesic","paths","setPaths","getPath","getPaths","p","agmPolygon","startWith","newArr","parentMVEvent","merge","chMVC","chMVCEvent","pathIndex","skip","retVal","subArr","toJSON","PolylineManager_1","_polylines","_getPoints","point","symbolPath","SymbolPath","icons","_getIcons","agmIcon","fixedRotation","offset","repeat","anchor","Point","anchorX","anchorY","_convertPath","rotation","scale","entries","key","val","polylinePromise","_convertPoints","_convertIcons","createPolyline","setPath","agmPolyline","getMVCPath","_rectangles","rectangle","createRectangle","north","east","south","west","r","setBounds","create","AgmMap_1","AgmMap","_elem","_platformId","_fitBoundsService","disableDoubleClickZoom","disableDefaultUI","scrollwheel","keyboardShortcuts","styles","usePanning","scaleControl","mapTypeControl","panControl","rotateControl","fullscreenControl","mapTypeId","clickableIcons","showDefaultInfoWindow","gestureHandling","tilt","_observableSubscriptions","mapClick","mapRightClick","mapDblClick","centerChange","boundsChange","mapTypeIdChange","idle","zoomChange","mapReady","tilesLoaded","container","_initMapInstance","createMap","minZoom","maxZoom","controlSize","backgroundColor","draggableCursor","draggingCursor","zoomControl","zoomControlOptions","streetViewControl","streetViewControlOptions","scaleControlOptions","mapTypeControlOptions","panControlOptions","rotateControlOptions","fullscreenControlOptions","restriction","_handleMapCenterChange","_handleMapZoomChange","_handleMapMouseEvents","_handleBoundsChange","_handleMapTypeIdChange","_handleTilesLoadedEvent","_handleIdleEvent","s","unsubscribe","_fitBoundsSubscription","_updateMapOptionsChanges","_updatePosition","_mapOptionsAttributes","setMapOptions","recenter","setTimeout","triggerMapEvent","_fitBounds","_setCenter","newCenter","_subscribeToFitBoundsUpdates","_updateBounds","fitBoundsPadding","getBounds$","_isLatLngBoundsLiteral","newBounds","union","subscribeToMapEvent","z","emitter","coords","placeId","stop","markerId","openInfoWindow","animationChange","markerClick","markerDblClick","markerRightClick","dragStart","drag","dragEnd","mouseOver","mouseOut","_markerAddedToManger","_fitBoundsDetails$","ReplaySubject","handleInfoWindowUpdate","Error","Number","addMarker","_updateFitBoundsDetails","_addEventListeners","updateMarkerPosition","updateTitle","updateLabel","updateDraggable","updateIcon","updateOpacity","updateVisible","updateZIndex","updateClickable","updateAnimation","asObservable","cs","dcs","rc","ds","de","mover","mout","anChng","deleteMarker","WindowRef","window","DocumentRef","document","BROWSER_GLOBALS_PROVIDERS","GoogleMapsScriptProtocol","LAZY_MAPS_API_CONFIG","LazyMapsAPILoader","config","localeId","_SCRIPT_ID","callbackName","_config","_windowRef","_documentRef","getNativeWindow","_scriptLoadingPromise","scriptOnPage","getNativeDocument","getElementById","_assignScriptLoadingPromise","script","createElement","type","async","defer","src","_getScriptSrc","body","appendChild","scriptElem","onerror","protocol","HTTPS","AUTO","HTTP","queryParams","v","apiVersion","callback","apiKey","client","clientId","channel","libraries","region","language","hostAndPath","Array","join","entry","AgmCoreModule_1","AgmCoreModule","lazyMapsAPILoaderConfig","ngModule","providers","provide","useClass","useValue","Ng2TelInput","platformId","ng2TelInputOptions","hasError","ng2TelOutput","countryChange","intlTelInputObject","assign","utilsScript","getUtilsScript","ngTelInput","intlTelInput","addEventListener","getSelectedCountryData","isInputValid","telOutput","getNumber","isValidNumber","country","setCountry","Ng2TelInputModule"],"mappings":"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","file":"x","sourcesContent":["import { AmenitiesToSave } from '@models';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class AmenitiesPayload {\r\n  types?: Array<number>;\r\n  zones?: Array<number>;\r\n  extras?: Array<IExtra>;\r\n  parkings?: Array<number>;\r\n  paymentMethods?: Array<number>;\r\n\r\n  constructor(\r\n    pTypes: Array<number>,\r\n    pZones: Array<number>,\r\n    pExtras: Array<IExtra>,\r\n    pParkings: Array<number>,\r\n    pPpaymentMethods: Array<number>\r\n  ) {\r\n    this.types = pTypes;\r\n    this.zones = pZones;\r\n    this.extras = pExtras;\r\n    this.parkings = pParkings;\r\n    this.paymentMethods = pPpaymentMethods;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.types,\r\n      zones: this.zones,\r\n      extras: this.getExtras(),\r\n      parkings: this.parkings,\r\n      payment_methods: this.paymentMethods\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extras.map((extra: IExtra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { IFranchise } from '@interfaces';\r\nimport { Franchise } from '@models';\r\n\r\nexport class BusinessPayload {\r\n  businessForm: FormGroup;\r\n\r\n  constructor(pBusinessForm: FormGroup) {\r\n    this.businessForm = pBusinessForm;\r\n  }\r\n\r\n  toJson(): Franchise {\r\n    const form = this.businessForm.value;\r\n\r\n    const body: IFranchise = {\r\n      id: form.id || null,\r\n      name: form.name || null,\r\n      price_range: form.price_range,\r\n      style: form.style,\r\n    };\r\n\r\n    return body;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { Restaurant } from '@models';\r\n\r\nexport class RestaurantPayload {\r\n  newRestaurantForm: FormGroup;\r\n\r\n  constructor(pNewRestaurantForm: FormGroup) {\r\n    this.newRestaurantForm = pNewRestaurantForm;\r\n  }\r\n\r\n  public toJson(avoidManagerUpdate?: boolean): Restaurant {\r\n    const form = this.newRestaurantForm;\r\n\r\n    const restaurantInfo = {\r\n      name: form.get('name').value,\r\n      description: form.get('description').value,\r\n      coordinates: this.concatCoordinates(),\r\n      address: form.get('address').value,\r\n      phone: this.getPhone(),\r\n      email: form.get('email').value,\r\n      invoice_email: '',\r\n      invoice_url: '',\r\n      manager:\r\n        (form.get('manager').value || form.get('manager').value === 0) &&\r\n        !avoidManagerUpdate\r\n          ? form.get('manager').value\r\n          : undefined,\r\n    };\r\n\r\n    if (form.value.billingOption === '0') {\r\n      restaurantInfo.invoice_email = form.value.emailBilling;\r\n      delete restaurantInfo.invoice_url;\r\n    } else {\r\n      restaurantInfo.invoice_url = form.value.websiteBilling;\r\n      delete restaurantInfo.invoice_email;\r\n    }\r\n\r\n    return restaurantInfo as Restaurant;\r\n  }\r\n\r\n  private getPhone(): string {\r\n    return `+${this.newRestaurantForm.get('dialCode').value}${\r\n      this.newRestaurantForm.get('phone').value\r\n    }`;\r\n  }\r\n\r\n  private concatCoordinates(): Array<number> {\r\n    const coordinatesArray: Array<number> = [];\r\n\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('latitude').value)\r\n    );\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('longitude').value)\r\n    );\r\n\r\n    return coordinatesArray;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nexport class RestaurantAppDataPayload {\r\n  appDataForm: FormGroup;\r\n\r\n  constructor(pAppDataForm: FormGroup) {\r\n    this.appDataForm = pAppDataForm;\r\n  }\r\n\r\n  toJson() {\r\n    return {\r\n      max_offered_seats: this.appDataForm.get('max_offered_seats').value,\r\n      max_people_per_order: this.appDataForm.get('max_people_per_order').value,\r\n      max_cancel_limit_minutes: this.getTotalMinutes(),\r\n      reservation_time_minutes: this.appDataForm.get('reservation_time_minutes').value,\r\n    };\r\n  }\r\n\r\n  private getTotalMinutes(): number {\r\n    const hoursToMinutes = this.appDataForm.get('max_cancel_limit_hours').value * 60;\r\n    const totalMinutes = +hoursToMinutes + +this.appDataForm.get('max_cancel_limit_minutes').value;\r\n\r\n    return totalMinutes;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { NewBranch } from '@models';\r\n\r\nexport class RestaurantDetailPayload {\r\n  restaurantDetailForm: FormGroup;\r\n\r\n  constructor(pRestaurantDetailForm: FormGroup) {\r\n    this.restaurantDetailForm = pRestaurantDetailForm;\r\n  }\r\n\r\n  toJson(): NewBranch {\r\n    return {\r\n      name: this.restaurantDetailForm.get('name').value,\r\n      description: this.restaurantDetailForm.get('description').value,\r\n      coordinates: this.getCoordinatesArray(),\r\n      address: this.restaurantDetailForm.get('address').value,\r\n      address_extra: this.restaurantDetailForm.get('address_extra').value,\r\n      phone: this.getParsedPhone(),\r\n      email: this.restaurantDetailForm.get('email').value\r\n    };\r\n  }\r\n\r\n  private getCoordinatesArray(): Array<number> {\r\n    const coordArray = [\r\n      parseFloat(this.restaurantDetailForm.get('lat').value),\r\n      parseFloat(this.restaurantDetailForm.get('long').value)\r\n    ];\r\n\r\n    return coordArray;\r\n  }\r\n\r\n  private getParsedPhone(): string {\r\n    const form = this.restaurantDetailForm;\r\n    const concatPhone = `+${form.get('countryCode').value} ${form\r\n      .get('phone')\r\n      .value.trim()}`;\r\n\r\n    return concatPhone;\r\n  }\r\n}\r\n","import { Extra, AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class RestuarantExtraPayload {\r\n  extrasForm: FormGroup;\r\n\r\n  constructor(pExtrasForm: FormGroup) {\r\n    this.extrasForm = pExtrasForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      extras: this.getExtras()\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extrasForm.getRawValue().extras.map((extra: Extra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nexport class RestuarantParkingPayload {\r\n  parkingForm: FormGroup;\r\n\r\n  constructor(pParkingForm: FormGroup) {\r\n    this.parkingForm = pParkingForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      parkings: this.parkingForm.get('parking').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantImagesPayload {\r\n  private imagesForm: FormGroup;\r\n\r\n  constructor(pImagesForm: FormGroup) {\r\n    this.imagesForm = pImagesForm;\r\n  }\r\n\r\n  public toFormData(): FormData {\r\n    const galleryData = new FormData();\r\n\r\n    galleryData.append('cover', this.imagesForm.get('coverImage').value);\r\n\r\n    const galleryImages = this.imagesForm.get('galleryImages') as FormArray;\r\n\r\n    galleryImages.controls.forEach((control, i) => {\r\n      if (!control.get('id')) {\r\n        galleryData.append(\r\n          'gallery[' + i + ']',\r\n          galleryImages.controls[i].get('fileValue').value\r\n        );\r\n      }\r\n    });\r\n\r\n    if (this.imagesForm.get('imageLink').value) {\r\n      galleryData.append('matterport', this.imagesForm.get('imageLink').value);\r\n    }\r\n    return galleryData;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantPaymentMethodPayload {\r\n  paymentMethodsForm: FormGroup;\r\n\r\n  constructor(pPaymentMethodsForm: FormGroup) {\r\n    this.paymentMethodsForm = pPaymentMethodsForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      payment_methods: this.paymentMethodsForm.get('paymentMethods').value || []\r\n    };\r\n  }\r\n}\r\n","import { IWorkingHour } from '@interfaces';\r\nimport { WorkingHoursResponse } from '@models';\r\nimport { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantWorkingHoursPayload {\r\n  private workingHoursForm: FormGroup;\r\n\r\n  constructor(pWorkingHoursForm: FormGroup) {\r\n    this.workingHoursForm = pWorkingHoursForm;\r\n  }\r\n\r\n  public fixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getFixedHours() };\r\n  }\r\n\r\n  public mixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getMixedHours() };\r\n  }\r\n\r\n  private getMixedHours() {\r\n    const currentWeekdays = this.workingHoursForm.get(\r\n      'mixedHours'\r\n    ) as FormArray;\r\n    const activeDays: Array<IWorkingHour> = [];\r\n\r\n    currentWeekdays.controls.forEach((weekday, index) => {\r\n      if (weekday.get('isSelected').value === true) {\r\n        const weekdayObject = {\r\n          week_day: index + 1,\r\n          opens_at: weekday.get('opening').value,\r\n          closes_at: weekday.get('closing').value\r\n        };\r\n\r\n        activeDays.push(weekdayObject);\r\n      }\r\n    });\r\n\r\n    return activeDays;\r\n  }\r\n\r\n  private getFixedHours(): Array<IWorkingHour> {\r\n    const hours: Array<IWorkingHour> = [];\r\n\r\n    Object.keys(this.workingHoursForm.value.fixedHours.weekdays).forEach(\r\n      day => {\r\n        const fixedHours = this.workingHoursForm.get('fixedHours');\r\n        if (fixedHours.get('weekdays').get(day).value) {\r\n          const object = {\r\n            week_day: parseInt(day, 10),\r\n            opens_at: fixedHours.get('opening').value,\r\n            closes_at: fixedHours.get('closing').value\r\n          };\r\n\r\n          hours.push(object);\r\n        }\r\n      }\r\n    );\r\n\r\n    return hours;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantReservationZonePayload {\r\n  reservationZonesForm: FormGroup;\r\n\r\n  constructor(pReservationZonesFOrm: FormGroup) {\r\n    this.reservationZonesForm = pReservationZonesFOrm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      zones: this.reservationZonesForm.get('zones').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantServiceTypePayload {\r\n  serviceTypeForm: FormGroup;\r\n\r\n  constructor(pServiceTypeForm: FormGroup) {\r\n    this.serviceTypeForm = pServiceTypeForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.serviceTypeForm.get('type').value || []\r\n    };\r\n  }\r\n}\r\n","export * from './amenities.payload';\r\nexport * from './franchise.payload';\r\nexport * from './restaurant.payload';\r\nexport * from './restaurant-app-data.payload';\r\nexport * from './restaurant-detail.payload';\r\nexport * from './restaurant-extra.payload';\r\nexport * from './restaurant-parking.payload';\r\nexport * from './restaurant-images.payload';\r\nexport * from './restaurant-payment-method.payload';\r\nexport * from './restaurant-working-hours.payload';\r\nexport * from './restaurant-reservation-zone.payload';\r\nexport * from './restaurant-service-type.payload';\r\n","\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n              <div class='agm-map-content'>\n                <ng-content></ng-content>\n              </div>\n  ","import { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function sample(notifier) {\n    return (source) => source.lift(new SampleOperator(notifier));\n}\nclass SampleOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const sampleSubscriber = new SampleSubscriber(subscriber);\n        const subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    }\n}\nclass SampleSubscriber extends OuterSubscriber {\n    constructor() {\n        super(...arguments);\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    }\n    notifyComplete() {\n        this.emitValue();\n    }\n    emitValue() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    }\n}\n//# sourceMappingURL=sample.js.map","import { __decorate, __metadata, __param, __awaiter } from 'tslib';\nimport { Injectable, NgZone, Input, Directive, EventEmitter, Output, Self, ElementRef, Component, Inject, PLATFORM_ID, QueryList, ContentChildren, forwardRef, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Optional, LOCALE_ID, NgModule } from '@angular/core';\nimport { Observable, BehaviorSubject, from, timer, Subject, fromEventPattern, merge, ReplaySubject, bindCallback, of, throwError } from 'rxjs';\nimport { flatMap, sample, switchMap, map, shareReplay, distinctUntilChanged, takeUntil, startWith, skip, multicast } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\n\nlet MapsAPILoader = class MapsAPILoader {\n};\nMapsAPILoader = __decorate([\n    Injectable()\n], MapsAPILoader);\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\nlet GoogleMapsAPIWrapper = class GoogleMapsAPIWrapper {\n    constructor(_loader, _zone) {\n        this._loader = _loader;\n        this._zone = _zone;\n        this._map =\n            new Promise((resolve) => { this._mapResolver = resolve; });\n    }\n    createMap(el, mapOptions) {\n        return this._zone.runOutsideAngular(() => {\n            return this._loader.load().then(() => {\n                const map = new google.maps.Map(el, mapOptions);\n                this._mapResolver(map);\n                return;\n            });\n        });\n    }\n    setMapOptions(options) {\n        return this._zone.runOutsideAngular(() => {\n            this._map.then((m) => { m.setOptions(options); });\n        });\n    }\n    /**\n     * Creates a google map marker with the map context\n     */\n    createMarker(options = {}, addToMap = true) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                if (addToMap) {\n                    options.map = map;\n                }\n                return new google.maps.Marker(options);\n            });\n        });\n    }\n    createInfoWindow(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then(() => { return new google.maps.InfoWindow(options); });\n        });\n    }\n    /**\n     * Creates a google.map.Circle for the current map.\n     */\n    createCircle(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                if (typeof options.strokePosition === 'string') {\n                    options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n                }\n                options.map = map;\n                return new google.maps.Circle(options);\n            });\n        });\n    }\n    /**\n     * Creates a google.map.Rectangle for the current map.\n     */\n    createRectangle(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                options.map = map;\n                return new google.maps.Rectangle(options);\n            });\n        });\n    }\n    createPolyline(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this.getNativeMap().then((map) => {\n                let line = new google.maps.Polyline(options);\n                line.setMap(map);\n                return line;\n            });\n        });\n    }\n    createPolygon(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this.getNativeMap().then((map) => {\n                let polygon = new google.maps.Polygon(options);\n                polygon.setMap(map);\n                return polygon;\n            });\n        });\n    }\n    /**\n     * Creates a new google.map.Data layer for the current map\n     */\n    createDataLayer(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then(m => {\n                let data = new google.maps.Data(options);\n                data.setMap(m);\n                return data;\n            });\n        });\n    }\n    /**\n     * Creates a TransitLayer instance for a map\n     * @param {TransitLayerOptions} options - used for setting layer options\n     * @returns {Promise<TransitLayer>} a new transit layer object\n     */\n    createTransitLayer(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                let newLayer = new google.maps.TransitLayer();\n                newLayer.setMap(options.visible ? map : null);\n                return newLayer;\n            });\n        });\n    }\n    /**\n     * Creates a BicyclingLayer instance for a map\n     * @param {BicyclingLayerOptions} options - used for setting layer options\n     * @returns {Promise<BicyclingLayer>} a new bicycling layer object\n     */\n    createBicyclingLayer(options) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => {\n                let newLayer = new google.maps.BicyclingLayer();\n                newLayer.setMap(options.visible ? map : null);\n                return newLayer;\n            });\n        });\n    }\n    /**\n     * Determines if given coordinates are insite a Polygon path.\n     */\n    containsLocation(latLng, polygon) {\n        return google.maps.geometry.poly.containsLocation(latLng, polygon);\n    }\n    subscribeToMapEvent(eventName) {\n        return new Observable((observer) => {\n            this._map.then((m) => {\n                m.addListener(eventName, (arg) => { this._zone.run(() => observer.next(arg)); });\n            });\n        });\n    }\n    clearInstanceListeners() {\n        return this._zone.runOutsideAngular(() => {\n            this._map.then((map) => {\n                google.maps.event.clearInstanceListeners(map);\n            });\n        });\n    }\n    setCenter(latLng) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.setCenter(latLng));\n        });\n    }\n    getZoom() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getZoom());\n        });\n    }\n    getBounds() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getBounds());\n        });\n    }\n    getMapTypeId() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getMapTypeId());\n        });\n    }\n    setZoom(zoom) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.setZoom(zoom));\n        });\n    }\n    getCenter() {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.getCenter());\n        });\n    }\n    panTo(latLng) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panTo(latLng));\n        });\n    }\n    panBy(x, y) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panBy(x, y));\n        });\n    }\n    fitBounds(latLng, padding) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.fitBounds(latLng, padding));\n        });\n    }\n    panToBounds(latLng, padding) {\n        return this._zone.runOutsideAngular(() => {\n            return this._map.then((map) => map.panToBounds(latLng, padding));\n        });\n    }\n    /**\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n     */\n    getNativeMap() { return this._map; }\n    /**\n     * Triggers the given event name on the map instance.\n     */\n    triggerMapEvent(eventName) {\n        return this._map.then((m) => google.maps.event.trigger(m, eventName));\n    }\n};\nGoogleMapsAPIWrapper.ctorParameters = () => [\n    { type: MapsAPILoader },\n    { type: NgZone }\n];\nGoogleMapsAPIWrapper = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [MapsAPILoader, NgZone])\n], GoogleMapsAPIWrapper);\n\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\nlet LayerManager = class LayerManager {\n    constructor(_wrapper) {\n        this._wrapper = _wrapper;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a transit layer to a map instance.\n     * @param {AgmTransitLayer} layer - a TransitLayer object\n     * @param {TransitLayerOptions} options - TransitLayerOptions options\n     * @returns void\n     */\n    addTransitLayer(layer, options) {\n        const newLayer = this._wrapper.createTransitLayer(options);\n        this._layers.set(layer, newLayer);\n    }\n    /**\n     * Adds a bicycling layer to a map instance.\n     * @param {AgmBicyclingLayer} layer - a bicycling layer object\n     * @param {BicyclingLayerOptions} options - BicyclingLayer options\n     * @returns void\n     */\n    addBicyclingLayer(layer, options) {\n        const newLayer = this._wrapper.createBicyclingLayer(options);\n        this._layers.set(layer, newLayer);\n    }\n    /**\n     * Deletes a map layer\n     * @param {AgmTransitLayer|AgmBicyclingLayer} layer - the layer to delete\n     * @returns  Promise<void>\n     */\n    deleteLayer(layer) {\n        return this._layers.get(layer).then(currentLayer => {\n            currentLayer.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n    /**\n     * Hide/Show a google map layer\n     * @param { AgmTransitLayer|AgmBicyclingLayer} layer - the layer to hide/show\n     * @param {TransitLayerOptions|BicyclingLayerOptions} options - used to set visibility of the layer\n     * @returns Promise<void>\n     */\n    toggleLayerVisibility(layer, options) {\n        return this._layers.get(layer).then(currentLayer => {\n            if (!options.visible) {\n                currentLayer.setMap(null);\n                return;\n            }\n            else {\n                return this._wrapper.getNativeMap().then((map) => {\n                    currentLayer.setMap(map);\n                });\n            }\n        });\n    }\n};\nLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper }\n];\nLayerManager = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper])\n], LayerManager);\n\nlet layerId = 0;\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\nlet AgmBicyclingLayer = class AgmBicyclingLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId++).toString();\n        /**\n         * Hide/show bicycling layer\n         */\n        this.visible = true;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addBicyclingLayer(this, { visible: this.visible });\n        this._addedToManager = true;\n    }\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        if (changes['visible'] != null) {\n            this._manager.toggleLayerVisibility(this, { visible: changes['visible'].currentValue });\n        }\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmBicyclingLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n};\nAgmBicyclingLayer.ctorParameters = () => [\n    { type: LayerManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmBicyclingLayer.prototype, \"visible\", void 0);\nAgmBicyclingLayer = __decorate([\n    Directive({\n        selector: 'agm-bicycling-layer',\n    }),\n    __metadata(\"design:paramtypes\", [LayerManager])\n], AgmBicyclingLayer);\n\nlet CircleManager = class CircleManager {\n    constructor(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._circles = new Map();\n    }\n    addCircle(circle) {\n        this._circles.set(circle, this._apiWrapper.createCircle({\n            center: { lat: circle.latitude, lng: circle.longitude },\n            clickable: circle.clickable,\n            draggable: circle.draggable,\n            editable: circle.editable,\n            fillColor: circle.fillColor,\n            fillOpacity: circle.fillOpacity,\n            radius: circle.radius,\n            strokeColor: circle.strokeColor,\n            strokeOpacity: circle.strokeOpacity,\n            strokePosition: circle.strokePosition,\n            strokeWeight: circle.strokeWeight,\n            visible: circle.visible,\n            zIndex: circle.zIndex,\n        }));\n    }\n    /**\n     * Removes the given circle from the map.\n     */\n    removeCircle(circle) {\n        return this._circles.get(circle).then((c) => {\n            c.setMap(null);\n            this._circles.delete(circle);\n        });\n    }\n    setOptions(circle, options) {\n        return this._circles.get(circle).then((c) => {\n            if (typeof options.strokePosition === 'string') {\n                options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n            }\n            c.setOptions(options);\n        });\n    }\n    getBounds(circle) {\n        return this._circles.get(circle).then((c) => c.getBounds());\n    }\n    getCenter(circle) {\n        return this._circles.get(circle).then((c) => c.getCenter());\n    }\n    getRadius(circle) {\n        return this._circles.get(circle).then((c) => c.getRadius());\n    }\n    setCenter(circle) {\n        return this._circles.get(circle).then((c) => { return c.setCenter({ lat: circle.latitude, lng: circle.longitude }); });\n    }\n    setEditable(circle) {\n        return this._circles.get(circle).then((c) => { return c.setEditable(circle.editable); });\n    }\n    setDraggable(circle) {\n        return this._circles.get(circle).then((c) => { return c.setDraggable(circle.draggable); });\n    }\n    setVisible(circle) {\n        return this._circles.get(circle).then((c) => { return c.setVisible(circle.visible); });\n    }\n    setRadius(circle) {\n        return this._circles.get(circle).then((c) => { return c.setRadius(circle.radius); });\n    }\n    getNativeCircle(circle) {\n        return this._circles.get(circle);\n    }\n    createEventObservable(eventName, circle) {\n        return new Observable((observer) => {\n            let listener = null;\n            this._circles.get(circle).then((c) => {\n                listener = c.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n            return () => {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    }\n};\nCircleManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nCircleManager = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], CircleManager);\n\nvar AgmCircle_1;\nlet AgmCircle = AgmCircle_1 = class AgmCircle {\n    constructor(_manager) {\n        this._manager = _manager;\n        /**\n         * Indicates whether this Circle handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this circle over the map. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this circle by dragging the control points shown at\n         * the center and around the circumference of the circle. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * The radius in meters on the Earth's surface.\n         */\n        this.radius = 0;\n        /**\n         * The stroke position. Defaults to CENTER.\n         * This property is not supported on Internet Explorer 8 and earlier.\n         */\n        this.strokePosition = 'CENTER';\n        /**\n         * The stroke width in pixels.\n         */\n        this.strokeWeight = 0;\n        /**\n         * Whether this circle is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the circle's center is changed.\n         */\n        this.centerChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the circle.\n         */\n        this.circleClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the circle.\n         */\n        this.circleDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the circle.\n         */\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the circle.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the circle.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the circle.\n         */\n        this.mouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the circle.\n         */\n        this.mouseMove = new EventEmitter();\n        /**\n         * This event is fired on circle mouseout.\n         */\n        this.mouseOut = new EventEmitter();\n        /**\n         * This event is fired on circle mouseover.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the DOM mouseup event is fired on the circle.\n         */\n        this.mouseUp = new EventEmitter();\n        /**\n         * This event is fired when the circle's radius is changed.\n         */\n        this.radiusChange = new EventEmitter();\n        /**\n         * This event is fired when the circle is right-clicked on.\n         */\n        this.rightClick = new EventEmitter();\n        this._circleAddedToManager = false;\n        this._eventSubscriptions = [];\n    }\n    /** @internal */\n    ngOnInit() {\n        this._manager.addCircle(this);\n        this._circleAddedToManager = true;\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._circleAddedToManager) {\n            return;\n        }\n        if (changes['latitude'] || changes['longitude']) {\n            this._manager.setCenter(this);\n        }\n        if (changes['editable']) {\n            this._manager.setEditable(this);\n        }\n        if (changes['draggable']) {\n            this._manager.setDraggable(this);\n        }\n        if (changes['visible']) {\n            this._manager.setVisible(this);\n        }\n        if (changes['radius']) {\n            this._manager.setRadius(this);\n        }\n        this._updateCircleOptionsChanges(changes);\n    }\n    _updateCircleOptionsChanges(changes) {\n        let options = {};\n        let optionKeys = Object.keys(changes).filter(k => AgmCircle_1._mapOptions.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        if (optionKeys.length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _registerEventListeners() {\n        let events = new Map();\n        events.set('center_changed', this.centerChange);\n        events.set('click', this.circleClick);\n        events.set('dblclick', this.circleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragstart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('radius_changed', this.radiusChange);\n        events.set('rightclick', this.rightClick);\n        events.forEach((eventEmitter, eventName) => {\n            this._eventSubscriptions.push(this._manager.createEventObservable(eventName, this).subscribe((value) => {\n                switch (eventName) {\n                    case 'radius_changed':\n                        this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\n                        break;\n                    case 'center_changed':\n                        this._manager.getCenter(this).then((center) => eventEmitter.emit({ lat: center.lat(), lng: center.lng() }));\n                        break;\n                    default:\n                        eventEmitter.emit({ coords: { lat: value.latLng.lat(), lng: value.latLng.lng() } });\n                }\n            }));\n        });\n    }\n    /** @internal */\n    ngOnDestroy() {\n        this._eventSubscriptions.forEach(function (s) { s.unsubscribe(); });\n        this._eventSubscriptions = null;\n        this._manager.removeCircle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Circle.\n     */\n    getBounds() { return this._manager.getBounds(this); }\n    getCenter() { return this._manager.getCenter(this); }\n};\nAgmCircle._mapOptions = [\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n    'visible', 'zIndex', 'clickable',\n];\nAgmCircle.ctorParameters = () => [\n    { type: CircleManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmCircle.prototype, \"latitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmCircle.prototype, \"longitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"clickable\", void 0);\n__decorate([\n    Input('circleDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"editable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmCircle.prototype, \"fillColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmCircle.prototype, \"fillOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"radius\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmCircle.prototype, \"strokeColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmCircle.prototype, \"strokeOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmCircle.prototype, \"strokePosition\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"strokeWeight\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmCircle.prototype, \"visible\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmCircle.prototype, \"zIndex\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"centerChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"circleClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"circleDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"drag\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"dragEnd\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"dragStart\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"mouseDown\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"mouseMove\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"mouseOut\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"mouseOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"mouseUp\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"radiusChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmCircle.prototype, \"rightClick\", void 0);\nAgmCircle = AgmCircle_1 = __decorate([\n    Directive({\n        selector: 'agm-circle',\n    }),\n    __metadata(\"design:paramtypes\", [CircleManager])\n], AgmCircle);\n\n/**\n * Manages all Data Layers for a Google Map instance.\n */\nlet DataLayerManager = class DataLayerManager {\n    constructor(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new Data Layer to the map.\n     */\n    addDataLayer(layer) {\n        const newLayer = this._wrapper.createDataLayer({\n            style: layer.style,\n        })\n            .then(d => {\n            if (layer.geoJson) {\n                this.getDataFeatures(d, layer.geoJson).then(features => d.features = features);\n            }\n            return d;\n        });\n        this._layers.set(layer, newLayer);\n    }\n    deleteDataLayer(layer) {\n        this._layers.get(layer).then(l => {\n            l.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n    updateGeoJson(layer, geoJson) {\n        this._layers.get(layer).then(l => {\n            l.forEach(function (feature) {\n                l.remove(feature);\n                var index = l.features.indexOf(feature, 0);\n                if (index > -1) {\n                    l.features.splice(index, 1);\n                }\n            });\n            this.getDataFeatures(l, geoJson).then(features => l.features = features);\n        });\n    }\n    setDataOptions(layer, options) {\n        this._layers.get(layer).then(l => {\n            l.setControlPosition(options.controlPosition);\n            l.setControls(options.controls);\n            l.setDrawingMode(options.drawingMode);\n            l.setStyle(options.style);\n        });\n    }\n    /**\n     * Creates a Google Maps event listener for the given DataLayer as an Observable\n     */\n    createEventObservable(eventName, layer) {\n        return new Observable((observer) => {\n            this._layers.get(layer).then((d) => {\n                d.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    /**\n     * Extract features from a geoJson using google.maps Data Class\n     * @param d : google.maps.Data class instance\n     * @param geoJson : url or geojson object\n     */\n    getDataFeatures(d, geoJson) {\n        return new Promise((resolve, reject) => {\n            if (typeof geoJson === 'object') {\n                try {\n                    const features = d.addGeoJson(geoJson);\n                    resolve(features);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n            else if (typeof geoJson === 'string') {\n                d.loadGeoJson(geoJson, null, resolve);\n            }\n            else {\n                reject(`Impossible to extract features from geoJson: wrong argument type`);\n            }\n        });\n    }\n};\nDataLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nDataLayerManager = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], DataLayerManager);\n\nvar AgmDataLayer_1;\nlet layerId$1 = 0;\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\nlet AgmDataLayer = AgmDataLayer_1 = class AgmDataLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$1++).toString();\n        this._subscriptions = [];\n        /**\n         * This event is fired when a feature in the layer is clicked.\n         */\n        this.layerClick = new EventEmitter();\n        /**\n         * The geoJson to be displayed\n         */\n        this.geoJson = null;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addDataLayer(this);\n        this._addedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const listeners = [\n            { name: 'click', handler: (ev) => this.layerClick.emit(ev) },\n        ];\n        listeners.forEach((obj) => {\n            const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmDataLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteDataLayer(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(s => s.unsubscribe());\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        var geoJsonChange = changes['geoJson'];\n        if (geoJsonChange) {\n            this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n        }\n        let dataOptions = {};\n        AgmDataLayer_1._dataOptionsAttributes.forEach(k => dataOptions[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : this[k]);\n        this._manager.setDataOptions(this, dataOptions);\n    }\n};\nAgmDataLayer._dataOptionsAttributes = ['style'];\nAgmDataLayer.ctorParameters = () => [\n    { type: DataLayerManager }\n];\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmDataLayer.prototype, \"layerClick\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmDataLayer.prototype, \"geoJson\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Function)\n], AgmDataLayer.prototype, \"style\", void 0);\nAgmDataLayer = AgmDataLayer_1 = __decorate([\n    Directive({\n        selector: 'agm-data-layer',\n    }),\n    __metadata(\"design:paramtypes\", [DataLayerManager])\n], AgmDataLayer);\n\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\nclass FitBoundsAccessor {\n}\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\nlet FitBoundsService = class FitBoundsService {\n    constructor(loader) {\n        this._boundsChangeSampleTime$ = new BehaviorSubject(200);\n        this._includeInBounds$ = new BehaviorSubject(new Map());\n        this.bounds$ = from(loader.load()).pipe(flatMap(() => this._includeInBounds$), sample(this._boundsChangeSampleTime$.pipe(switchMap(time => timer(0, time)))), map(includeInBounds => this._generateBounds(includeInBounds)), shareReplay(1));\n    }\n    _generateBounds(includeInBounds) {\n        const bounds = new google.maps.LatLngBounds();\n        includeInBounds.forEach(b => bounds.extend(b));\n        return bounds;\n    }\n    addToBounds(latLng) {\n        const id = this._createIdentifier(latLng);\n        if (this._includeInBounds$.value.has(id)) {\n            return;\n        }\n        const map = this._includeInBounds$.value;\n        map.set(id, latLng);\n        this._includeInBounds$.next(map);\n    }\n    removeFromBounds(latLng) {\n        const map = this._includeInBounds$.value;\n        map.delete(this._createIdentifier(latLng));\n        this._includeInBounds$.next(map);\n    }\n    changeFitBoundsChangeSampleTime(timeMs) {\n        this._boundsChangeSampleTime$.next(timeMs);\n    }\n    getBounds$() {\n        return this.bounds$;\n    }\n    _createIdentifier(latLng) {\n        return `${latLng.lat}+${latLng.lng}`;\n    }\n};\nFitBoundsService.ctorParameters = () => [\n    { type: MapsAPILoader }\n];\nFitBoundsService = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [MapsAPILoader])\n], FitBoundsService);\n\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\nlet AgmFitBounds = class AgmFitBounds {\n    constructor(_fitBoundsAccessor, _fitBoundsService) {\n        this._fitBoundsAccessor = _fitBoundsAccessor;\n        this._fitBoundsService = _fitBoundsService;\n        /**\n         * If the value is true, the element gets added to the bounds of the map.\n         * Default: true.\n         */\n        this.agmFitBounds = true;\n        this._destroyed$ = new Subject();\n        this._latestFitBoundsDetails = null;\n    }\n    /**\n     * @internal\n     */\n    ngOnChanges() {\n        this._updateBounds();\n    }\n    /**\n     * @internal\n     */\n    ngOnInit() {\n        this._fitBoundsAccessor\n            .getFitBoundsDetails$()\n            .pipe(distinctUntilChanged((x, y) => x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng), takeUntil(this._destroyed$))\n            .subscribe(details => this._updateBounds(details));\n    }\n    /*\n     Either the location changed, or visible status changed.\n     Possible state changes are\n     invisible -> visible\n     visible -> invisible\n     visible -> visible (new location)\n    */\n    _updateBounds(newFitBoundsDetails) {\n        // either visibility will change, or location, so remove the old one anyway\n        if (this._latestFitBoundsDetails) {\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n            // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n            // true -> false -> true, in which case we still need old value cached here\n        }\n        if (newFitBoundsDetails) {\n            this._latestFitBoundsDetails = newFitBoundsDetails;\n        }\n        if (!this._latestFitBoundsDetails) {\n            return;\n        }\n        if (this.agmFitBounds === true) {\n            this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n        }\n    }\n    /**\n     * @internal\n     */\n    ngOnDestroy() {\n        this._destroyed$.next();\n        this._destroyed$.complete();\n        if (this._latestFitBoundsDetails !== null) {\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n        }\n    }\n};\nAgmFitBounds.ctorParameters = () => [\n    { type: FitBoundsAccessor, decorators: [{ type: Self }] },\n    { type: FitBoundsService }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmFitBounds.prototype, \"agmFitBounds\", void 0);\nAgmFitBounds = __decorate([\n    Directive({\n        selector: '[agmFitBounds]',\n    }),\n    __param(0, Self()),\n    __metadata(\"design:paramtypes\", [FitBoundsAccessor,\n        FitBoundsService])\n], AgmFitBounds);\n\nlet MarkerManager = class MarkerManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._markers = new Map();\n    }\n    convertAnimation(uiAnim) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (uiAnim === null) {\n                return null;\n            }\n            else {\n                return this._mapsWrapper.getNativeMap().then(() => google.maps.Animation[uiAnim]);\n            }\n        });\n    }\n    deleteMarker(marker) {\n        const m = this._markers.get(marker);\n        if (m == null) {\n            // marker already deleted\n            return Promise.resolve();\n        }\n        return m.then((m) => {\n            return this._zone.run(() => {\n                m.setMap(null);\n                this._markers.delete(marker);\n            });\n        });\n    }\n    updateMarkerPosition(marker) {\n        return this._markers.get(marker).then((m) => m.setPosition({ lat: marker.latitude, lng: marker.longitude }));\n    }\n    updateTitle(marker) {\n        return this._markers.get(marker).then((m) => m.setTitle(marker.title));\n    }\n    updateLabel(marker) {\n        return this._markers.get(marker).then((m) => { m.setLabel(marker.label); });\n    }\n    updateDraggable(marker) {\n        return this._markers.get(marker).then((m) => m.setDraggable(marker.draggable));\n    }\n    updateIcon(marker) {\n        return this._markers.get(marker).then((m) => m.setIcon(marker.iconUrl));\n    }\n    updateOpacity(marker) {\n        return this._markers.get(marker).then((m) => m.setOpacity(marker.opacity));\n    }\n    updateVisible(marker) {\n        return this._markers.get(marker).then((m) => m.setVisible(marker.visible));\n    }\n    updateZIndex(marker) {\n        return this._markers.get(marker).then((m) => m.setZIndex(marker.zIndex));\n    }\n    updateClickable(marker) {\n        return this._markers.get(marker).then((m) => m.setClickable(marker.clickable));\n    }\n    updateAnimation(marker) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const m = yield this._markers.get(marker);\n            m.setAnimation(yield this.convertAnimation(marker.animation));\n        });\n    }\n    addMarker(marker) {\n        const markerPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\n            return this._mapsWrapper.createMarker({\n                position: { lat: marker.latitude, lng: marker.longitude },\n                label: marker.label,\n                draggable: marker.draggable,\n                icon: marker.iconUrl,\n                opacity: marker.opacity,\n                visible: marker.visible,\n                zIndex: marker.zIndex,\n                title: marker.title,\n                clickable: marker.clickable,\n                animation: yield this.convertAnimation(marker.animation),\n            }).then(resolve);\n        }));\n        this._markers.set(marker, markerPromise);\n    }\n    getNativeMarker(marker) {\n        return this._markers.get(marker);\n    }\n    createEventObservable(eventName, marker) {\n        return new Observable((observer) => {\n            this._markers.get(marker).then((m) => {\n                m.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n};\nMarkerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nMarkerManager = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], MarkerManager);\n\nlet InfoWindowManager = class InfoWindowManager {\n    constructor(_mapsWrapper, _zone, _markerManager) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._markerManager = _markerManager;\n        this._infoWindows = new Map();\n    }\n    deleteInfoWindow(infoWindow) {\n        const iWindow = this._infoWindows.get(infoWindow);\n        if (iWindow == null) {\n            // info window already deleted\n            return Promise.resolve();\n        }\n        return iWindow.then((i) => {\n            return this._zone.run(() => {\n                i.close();\n                this._infoWindows.delete(infoWindow);\n            });\n        });\n    }\n    setPosition(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((i) => i.setPosition({\n            lat: infoWindow.latitude,\n            lng: infoWindow.longitude,\n        }));\n    }\n    setZIndex(infoWindow) {\n        return this._infoWindows.get(infoWindow)\n            .then((i) => i.setZIndex(infoWindow.zIndex));\n    }\n    open(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((w) => {\n            if (infoWindow.hostMarker != null) {\n                return this._markerManager.getNativeMarker(infoWindow.hostMarker).then((marker) => {\n                    return this._mapsWrapper.getNativeMap().then((map) => w.open(map, marker));\n                });\n            }\n            return this._mapsWrapper.getNativeMap().then((map) => w.open(map));\n        });\n    }\n    close(infoWindow) {\n        return this._infoWindows.get(infoWindow).then((w) => w.close());\n    }\n    setOptions(infoWindow, options) {\n        return this._infoWindows.get(infoWindow).then((i) => i.setOptions(options));\n    }\n    addInfoWindow(infoWindow) {\n        const options = {\n            content: infoWindow.content,\n            maxWidth: infoWindow.maxWidth,\n            zIndex: infoWindow.zIndex,\n            disableAutoPan: infoWindow.disableAutoPan,\n        };\n        if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n            options.position = { lat: infoWindow.latitude, lng: infoWindow.longitude };\n        }\n        const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n        this._infoWindows.set(infoWindow, infoWindowPromise);\n    }\n    /**\n     * Creates a Google Maps event listener for the given InfoWindow as an Observable\n     */\n    createEventObservable(eventName, infoWindow) {\n        return new Observable((observer) => {\n            this._infoWindows.get(infoWindow).then((i) => {\n                i.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n};\nInfoWindowManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone },\n    { type: MarkerManager }\n];\nInfoWindowManager = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone,\n        MarkerManager])\n], InfoWindowManager);\n\nvar AgmInfoWindow_1;\nlet infoWindowId = 0;\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nlet AgmInfoWindow = AgmInfoWindow_1 = class AgmInfoWindow {\n    constructor(_infoWindowManager, _el) {\n        this._infoWindowManager = _infoWindowManager;\n        this._el = _el;\n        /**\n         * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n         */\n        this.isOpen = false;\n        /**\n         * Emits an event when the info window is closed.\n         */\n        this.infoWindowClose = new EventEmitter();\n        this._infoWindowAddedToManager = false;\n        this._id = (infoWindowId++).toString();\n    }\n    ngOnInit() {\n        this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n        this._infoWindowManager.addInfoWindow(this);\n        this._infoWindowAddedToManager = true;\n        this._updateOpenState();\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._infoWindowAddedToManager) {\n            return;\n        }\n        if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n            typeof this.longitude === 'number') {\n            this._infoWindowManager.setPosition(this);\n        }\n        if (changes['zIndex']) {\n            this._infoWindowManager.setZIndex(this);\n        }\n        if (changes['isOpen']) {\n            this._updateOpenState();\n        }\n        this._setInfoWindowOptions(changes);\n    }\n    _registerEventListeners() {\n        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\n            this.isOpen = false;\n            this.infoWindowClose.emit();\n        });\n    }\n    _updateOpenState() {\n        this.isOpen ? this.open() : this.close();\n    }\n    _setInfoWindowOptions(changes) {\n        let options = {};\n        let optionKeys = Object.keys(changes).filter(k => AgmInfoWindow_1._infoWindowOptionsInputs.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        this._infoWindowManager.setOptions(this, options);\n    }\n    /**\n     * Opens the info window.\n     */\n    open() { return this._infoWindowManager.open(this); }\n    /**\n     * Closes the info window.\n     */\n    close() {\n        return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(); });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return 'AgmInfoWindow-' + this._id.toString(); }\n    /** @internal */\n    ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\n};\nAgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\nAgmInfoWindow.ctorParameters = () => [\n    { type: InfoWindowManager },\n    { type: ElementRef }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmInfoWindow.prototype, \"latitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmInfoWindow.prototype, \"longitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], AgmInfoWindow.prototype, \"disableAutoPan\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmInfoWindow.prototype, \"zIndex\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmInfoWindow.prototype, \"maxWidth\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmInfoWindow.prototype, \"isOpen\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmInfoWindow.prototype, \"infoWindowClose\", void 0);\nAgmInfoWindow = AgmInfoWindow_1 = __decorate([\n    Component({\n        selector: 'agm-info-window',\n        template: `<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `\n    }),\n    __metadata(\"design:paramtypes\", [InfoWindowManager, ElementRef])\n], AgmInfoWindow);\n\n/**\n * Manages all KML Layers for a Google Map instance.\n */\nlet KmlLayerManager = class KmlLayerManager {\n    constructor(_wrapper, _zone) {\n        this._wrapper = _wrapper;\n        this._zone = _zone;\n        this._layers = new Map();\n    }\n    /**\n     * Adds a new KML Layer to the map.\n     */\n    addKmlLayer(layer) {\n        const newLayer = this._wrapper.getNativeMap().then(m => {\n            return new google.maps.KmlLayer({\n                clickable: layer.clickable,\n                map: m,\n                preserveViewport: layer.preserveViewport,\n                screenOverlays: layer.screenOverlays,\n                suppressInfoWindows: layer.suppressInfoWindows,\n                url: layer.url,\n                zIndex: layer.zIndex,\n            });\n        });\n        this._layers.set(layer, newLayer);\n    }\n    setOptions(layer, options) {\n        this._layers.get(layer).then(l => l.setOptions(options));\n    }\n    deleteKmlLayer(layer) {\n        this._layers.get(layer).then(l => {\n            l.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n    /**\n     * Creates a Google Maps event listener for the given KmlLayer as an Observable\n     */\n    createEventObservable(eventName, layer) {\n        return new Observable((observer) => {\n            this._layers.get(layer).then((m) => {\n                m.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n};\nKmlLayerManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nKmlLayerManager = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], KmlLayerManager);\n\nvar AgmKmlLayer_1;\nlet layerId$2 = 0;\nlet AgmKmlLayer = AgmKmlLayer_1 = class AgmKmlLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$2++).toString();\n        this._subscriptions = [];\n        /**\n         * If true, the layer receives mouse events. Default value is true.\n         */\n        this.clickable = true;\n        /**\n         * By default, the input map is centered and zoomed to the bounding box of the contents of the\n         * layer.\n         * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n         * were never set.\n         */\n        this.preserveViewport = false;\n        /**\n         * Whether to render the screen overlays. Default true.\n         */\n        this.screenOverlays = true;\n        /**\n         * Suppress the rendering of info windows when layer features are clicked.\n         */\n        this.suppressInfoWindows = false;\n        /**\n         * The URL of the KML document to display.\n         */\n        this.url = null;\n        /**\n         * The z-index of the layer.\n         */\n        this.zIndex = null;\n        /**\n         * This event is fired when a feature in the layer is clicked.\n         */\n        this.layerClick = new EventEmitter();\n        /**\n         * This event is fired when the KML layers default viewport has changed.\n         */\n        this.defaultViewportChange = new EventEmitter();\n        /**\n         * This event is fired when the KML layer has finished loading.\n         * At this point it is safe to read the status property to determine if the layer loaded\n         * successfully.\n         */\n        this.statusChange = new EventEmitter();\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addKmlLayer(this);\n        this._addedToManager = true;\n        this._addEventListeners();\n    }\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        this._updatePolygonOptions(changes);\n    }\n    _updatePolygonOptions(changes) {\n        const options = Object.keys(changes)\n            .filter(k => AgmKmlLayer_1._kmlLayerOptions.indexOf(k) !== -1)\n            .reduce((obj, k) => {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n        if (Object.keys(options).length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _addEventListeners() {\n        const listeners = [\n            { name: 'click', handler: (ev) => this.layerClick.emit(ev) },\n            { name: 'defaultviewport_changed', handler: () => this.defaultViewportChange.emit() },\n            { name: 'status_changed', handler: () => this.statusChange.emit() },\n        ];\n        listeners.forEach((obj) => {\n            const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmKmlLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteKmlLayer(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach(s => s.unsubscribe());\n    }\n};\nAgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\nAgmKmlLayer.ctorParameters = () => [\n    { type: KmlLayerManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmKmlLayer.prototype, \"clickable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmKmlLayer.prototype, \"preserveViewport\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmKmlLayer.prototype, \"screenOverlays\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmKmlLayer.prototype, \"suppressInfoWindows\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmKmlLayer.prototype, \"url\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmKmlLayer.prototype, \"zIndex\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmKmlLayer.prototype, \"layerClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmKmlLayer.prototype, \"defaultViewportChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmKmlLayer.prototype, \"statusChange\", void 0);\nAgmKmlLayer = AgmKmlLayer_1 = __decorate([\n    Directive({\n        selector: 'agm-kml-layer',\n    }),\n    __metadata(\"design:paramtypes\", [KmlLayerManager])\n], AgmKmlLayer);\n\nfunction createMVCEventObservable(array) {\n    const eventNames = ['insert_at', 'remove_at', 'set_at'];\n    return fromEventPattern((handler) => eventNames.map(evName => array.addListener(evName, (index, previous) => handler.apply(array, [{ 'newArr': array.getArray(), evName, index, previous }]))), (_handler, evListeners) => evListeners.forEach(evListener => evListener.remove()));\n}\nclass MvcArrayMock {\n    constructor() {\n        this.vals = [];\n        this.listeners = {\n            'remove_at': [],\n            'insert_at': [],\n            'set_at': [],\n        };\n    }\n    clear() {\n        for (let i = this.vals.length - 1; i >= 0; i--) {\n            this.removeAt(i);\n        }\n    }\n    getArray() {\n        return [...this.vals];\n    }\n    getAt(i) {\n        return this.vals[i];\n    }\n    getLength() {\n        return this.vals.length;\n    }\n    insertAt(i, elem) {\n        this.vals.splice(i, 0, elem);\n        this.listeners.insert_at.map(listener => listener(i));\n    }\n    pop() {\n        const deleted = this.vals.pop();\n        this.listeners.remove_at.map(listener => listener(this.vals.length, deleted));\n        return deleted;\n    }\n    push(elem) {\n        this.vals.push(elem);\n        this.listeners.insert_at.map(listener => listener(this.vals.length - 1));\n        return this.vals.length;\n    }\n    removeAt(i) {\n        const deleted = this.vals.splice(i, 1)[0];\n        this.listeners.remove_at.map(listener => listener(i, deleted));\n        return deleted;\n    }\n    setAt(i, elem) {\n        const deleted = this.vals[i];\n        this.vals[i] = elem;\n        this.listeners.set_at.map(listener => listener(i, deleted));\n    }\n    forEach(callback) {\n        this.vals.forEach(callback);\n    }\n    addListener(eventName, handler) {\n        const listenerArr = this.listeners[eventName];\n        listenerArr.push(handler);\n        return {\n            remove: () => {\n                listenerArr.splice(listenerArr.indexOf(handler), 1);\n            },\n        };\n    }\n}\n\nlet PolygonManager = class PolygonManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._polygons = new Map();\n    }\n    addPolygon(path) {\n        const polygonPromise = this._mapsWrapper.createPolygon({\n            clickable: path.clickable,\n            draggable: path.draggable,\n            editable: path.editable,\n            fillColor: path.fillColor,\n            fillOpacity: path.fillOpacity,\n            geodesic: path.geodesic,\n            paths: path.paths,\n            strokeColor: path.strokeColor,\n            strokeOpacity: path.strokeOpacity,\n            strokeWeight: path.strokeWeight,\n            visible: path.visible,\n            zIndex: path.zIndex,\n        });\n        this._polygons.set(path, polygonPromise);\n    }\n    updatePolygon(polygon) {\n        const m = this._polygons.get(polygon);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => this._zone.run(() => { l.setPaths(polygon.paths); }));\n    }\n    setPolygonOptions(path, options) {\n        return this._polygons.get(path).then((l) => { l.setOptions(options); });\n    }\n    deletePolygon(paths) {\n        const m = this._polygons.get(paths);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => {\n            return this._zone.run(() => {\n                l.setMap(null);\n                this._polygons.delete(paths);\n            });\n        });\n    }\n    getPath(polygon) {\n        return this._polygons.get(polygon)\n            .then((polygon) => polygon.getPath().getArray());\n    }\n    getPaths(polygon) {\n        return this._polygons.get(polygon)\n            .then((polygon) => polygon.getPaths().getArray().map((p) => p.getArray()));\n    }\n    createEventObservable(eventName, path) {\n        return new Observable((observer) => {\n            this._polygons.get(path).then((l) => {\n                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    createPathEventObservable(agmPolygon) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const polygon = yield this._polygons.get(agmPolygon);\n            const paths = polygon.getPaths();\n            const pathsChanges$ = createMVCEventObservable(paths);\n            return pathsChanges$.pipe(startWith({ newArr: paths.getArray() }), // in order to subscribe to them all\n            switchMap(parentMVEvent => merge(... // rest parameter\n            parentMVEvent.newArr.map((chMVC, index) => createMVCEventObservable(chMVC)\n                .pipe(map(chMVCEvent => ({ parentMVEvent, chMVCEvent, pathIndex: index })))))\n                .pipe(startWith({ parentMVEvent, chMVCEvent: null, pathIndex: null }))), // start the merged ob with an event signinifing change to parent\n            skip(1), // skip the manually added event\n            map(({ parentMVEvent, chMVCEvent, pathIndex }) => {\n                let retVal;\n                if (!chMVCEvent) {\n                    retVal = {\n                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n                        eventName: parentMVEvent.evName,\n                        index: parentMVEvent.index,\n                    };\n                    if (parentMVEvent.previous) {\n                        retVal.previous = parentMVEvent.previous.getArray();\n                    }\n                }\n                else {\n                    retVal = {\n                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n                        pathIndex,\n                        eventName: chMVCEvent.evName,\n                        index: chMVCEvent.index,\n                    };\n                    if (chMVCEvent.previous) {\n                        retVal.previous = chMVCEvent.previous;\n                    }\n                }\n                return retVal;\n            }));\n        });\n    }\n};\nPolygonManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nPolygonManager = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], PolygonManager);\n\nvar PolylineManager_1;\nlet PolylineManager = PolylineManager_1 = class PolylineManager {\n    constructor(_mapsWrapper, _zone) {\n        this._mapsWrapper = _mapsWrapper;\n        this._zone = _zone;\n        this._polylines = new Map();\n    }\n    static _convertPoints(line) {\n        const path = line._getPoints().map((point) => {\n            return { lat: point.latitude, lng: point.longitude };\n        });\n        return path;\n    }\n    static _convertPath(path) {\n        const symbolPath = google.maps.SymbolPath[path];\n        if (typeof symbolPath === 'number') {\n            return symbolPath;\n        }\n        else {\n            return path;\n        }\n    }\n    static _convertIcons(line) {\n        const icons = line._getIcons().map(agmIcon => ({\n            fixedRotation: agmIcon.fixedRotation,\n            offset: agmIcon.offset,\n            repeat: agmIcon.repeat,\n            icon: {\n                anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n                fillColor: agmIcon.fillColor,\n                fillOpacity: agmIcon.fillOpacity,\n                path: PolylineManager_1._convertPath(agmIcon.path),\n                rotation: agmIcon.rotation,\n                scale: agmIcon.scale,\n                strokeColor: agmIcon.strokeColor,\n                strokeOpacity: agmIcon.strokeOpacity,\n                strokeWeight: agmIcon.strokeWeight,\n            },\n        }));\n        // prune undefineds;\n        icons.forEach(icon => {\n            Object.entries(icon).forEach(([key, val]) => {\n                if (typeof val === 'undefined') {\n                    delete icon[key];\n                }\n            });\n            if (typeof icon.icon.anchor.x === 'undefined' ||\n                typeof icon.icon.anchor.y === 'undefined') {\n                delete icon.icon.anchor;\n            }\n        });\n        return icons;\n    }\n    addPolyline(line) {\n        const polylinePromise = this._mapsWrapper.getNativeMap()\n            .then(() => [PolylineManager_1._convertPoints(line),\n            PolylineManager_1._convertIcons(line)])\n            .then(([path, icons]) => this._mapsWrapper.createPolyline({\n            clickable: line.clickable,\n            draggable: line.draggable,\n            editable: line.editable,\n            geodesic: line.geodesic,\n            strokeColor: line.strokeColor,\n            strokeOpacity: line.strokeOpacity,\n            strokeWeight: line.strokeWeight,\n            visible: line.visible,\n            zIndex: line.zIndex,\n            path: path,\n            icons: icons,\n        }));\n        this._polylines.set(line, polylinePromise);\n    }\n    updatePolylinePoints(line) {\n        const path = PolylineManager_1._convertPoints(line);\n        const m = this._polylines.get(line);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => { return this._zone.run(() => { l.setPath(path); }); });\n    }\n    updateIconSequences(line) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._mapsWrapper.getNativeMap();\n            const icons = PolylineManager_1._convertIcons(line);\n            const m = this._polylines.get(line);\n            if (m == null) {\n                return;\n            }\n            return m.then(l => this._zone.run(() => l.setOptions({ icons: icons })));\n        });\n    }\n    setPolylineOptions(line, options) {\n        return this._polylines.get(line).then((l) => { l.setOptions(options); });\n    }\n    deletePolyline(line) {\n        const m = this._polylines.get(line);\n        if (m == null) {\n            return Promise.resolve();\n        }\n        return m.then((l) => {\n            return this._zone.run(() => {\n                l.setMap(null);\n                this._polylines.delete(line);\n            });\n        });\n    }\n    getMVCPath(agmPolyline) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const polyline = yield this._polylines.get(agmPolyline);\n            return polyline.getPath();\n        });\n    }\n    getPath(agmPolyline) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getMVCPath(agmPolyline)).getArray();\n        });\n    }\n    createEventObservable(eventName, line) {\n        return new Observable((observer) => {\n            this._polylines.get(line).then((l) => {\n                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n        });\n    }\n    createPathEventObservable(line) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mvcPath = yield this.getMVCPath(line);\n            return createMVCEventObservable(mvcPath);\n        });\n    }\n};\nPolylineManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nPolylineManager = PolylineManager_1 = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], PolylineManager);\n\nlet RectangleManager = class RectangleManager {\n    constructor(_apiWrapper, _zone) {\n        this._apiWrapper = _apiWrapper;\n        this._zone = _zone;\n        this._rectangles = new Map();\n    }\n    addRectangle(rectangle) {\n        this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n            bounds: {\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west,\n            },\n            clickable: rectangle.clickable,\n            draggable: rectangle.draggable,\n            editable: rectangle.editable,\n            fillColor: rectangle.fillColor,\n            fillOpacity: rectangle.fillOpacity,\n            strokeColor: rectangle.strokeColor,\n            strokeOpacity: rectangle.strokeOpacity,\n            strokePosition: rectangle.strokePosition,\n            strokeWeight: rectangle.strokeWeight,\n            visible: rectangle.visible,\n            zIndex: rectangle.zIndex,\n        }));\n    }\n    /**\n     * Removes the given rectangle from the map.\n     */\n    removeRectangle(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            r.setMap(null);\n            this._rectangles.delete(rectangle);\n        });\n    }\n    setOptions(rectangle, options) {\n        return this._rectangles.get(rectangle).then((r) => r.setOptions(options));\n    }\n    getBounds(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => r.getBounds());\n    }\n    setBounds(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setBounds({\n                north: rectangle.north,\n                east: rectangle.east,\n                south: rectangle.south,\n                west: rectangle.west,\n            });\n        });\n    }\n    setEditable(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setEditable(rectangle.editable);\n        });\n    }\n    setDraggable(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setDraggable(rectangle.draggable);\n        });\n    }\n    setVisible(rectangle) {\n        return this._rectangles.get(rectangle).then((r) => {\n            return r.setVisible(rectangle.visible);\n        });\n    }\n    createEventObservable(eventName, rectangle) {\n        return Observable.create((observer) => {\n            let listener = null;\n            this._rectangles.get(rectangle).then((r) => {\n                listener = r.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\n            });\n            return () => {\n                if (listener !== null) {\n                    listener.remove();\n                }\n            };\n        });\n    }\n};\nRectangleManager.ctorParameters = () => [\n    { type: GoogleMapsAPIWrapper },\n    { type: NgZone }\n];\nRectangleManager = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\n], RectangleManager);\n\nvar AgmMap_1;\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\nlet AgmMap = AgmMap_1 = class AgmMap {\n    constructor(_elem, _mapsWrapper, _platformId, _fitBoundsService, _zone) {\n        this._elem = _elem;\n        this._mapsWrapper = _mapsWrapper;\n        this._platformId = _platformId;\n        this._fitBoundsService = _fitBoundsService;\n        this._zone = _zone;\n        /**\n         * The longitude that defines the center of the map.\n         */\n        this.longitude = 0;\n        /**\n         * The latitude that defines the center of the map.\n         */\n        this.latitude = 0;\n        /**\n         * The zoom level of the map. The default zoom level is 8.\n         */\n        this.zoom = 8;\n        /**\n         * Enables/disables if map is draggable.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = true;\n        /**\n         * Enables/disables zoom and center on double click. Enabled by default.\n         */\n        this.disableDoubleClickZoom = false;\n        /**\n         * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n         * value cannot get updated.\n         */\n        this.disableDefaultUI = false;\n        /**\n         * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n         */\n        this.scrollwheel = true;\n        /**\n         * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n         * enabled by default.\n         */\n        this.keyboardShortcuts = true;\n        /**\n         * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n         * modes, these styles will only apply to labels and geometry.\n         */\n        this.styles = [];\n        /**\n         * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n         * used to\n         * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n         */\n        this.usePanning = false;\n        /**\n         * Sets the viewport to contain the given bounds.\n         * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n         */\n        this.fitBounds = false;\n        /**\n         * The initial enabled/disabled state of the Scale control. This is disabled by default.\n         */\n        this.scaleControl = false;\n        /**\n         * The initial enabled/disabled state of the Map type control.\n         */\n        this.mapTypeControl = false;\n        /**\n         * The initial enabled/disabled state of the Pan control.\n         */\n        this.panControl = false;\n        /**\n         * The initial enabled/disabled state of the Rotate control.\n         */\n        this.rotateControl = false;\n        /**\n         * The initial enabled/disabled state of the Fullscreen control.\n         */\n        this.fullscreenControl = false;\n        /**\n         * The map mapTypeId. Defaults to 'roadmap'.\n         */\n        this.mapTypeId = 'roadmap';\n        /**\n         * When false, map icons are not clickable. A map icon represents a point of interest,\n         * also known as a POI. By default map icons are clickable.\n         */\n        this.clickableIcons = true;\n        /**\n         * A map icon represents a point of interest, also known as a POI.\n         * When map icons are clickable by default, an info window is displayed.\n         * When this property is set to false, the info window will not be shown but the click event\n         * will still fire\n         */\n        this.showDefaultInfoWindow = true;\n        /**\n         * This setting controls how gestures on the map are handled.\n         * Allowed values:\n         * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n         * - 'greedy'      (All touch gestures pan or zoom the map.)\n         * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n         * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n         */\n        this.gestureHandling = 'auto';\n        /**\n         * Controls the automatic switching behavior for the angle of incidence of\n         * the map. The only allowed values are 0 and 45. The value 0 causes the map\n         * to always use a 0° overhead view regardless of the zoom level and\n         * viewport. The value 45 causes the tilt angle to automatically switch to\n         * 45 whenever 45° imagery is available for the current zoom level and\n         * viewport, and switch back to 0 whenever 45° imagery is not available\n         * (this is the default behavior). 45° imagery is only available for\n         * satellite and hybrid map types, within some locations, and at some zoom\n         * levels. Note: getTilt returns the current tilt angle, not the value\n         * specified by this option. Because getTilt and this option refer to\n         * different things, do not bind() the tilt property; doing so may yield\n         * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n         */\n        this.tilt = 0;\n        this._observableSubscriptions = [];\n        /**\n         * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n         * marker or infoWindow).\n         */\n        this.mapClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n         * on a marker or infoWindow).\n         */\n        this.mapRightClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n         * on a marker or infoWindow).\n         */\n        this.mapDblClick = new EventEmitter();\n        /**\n         * This event emitter is fired when the map center changes.\n         */\n        this.centerChange = new EventEmitter();\n        /**\n         * This event is fired when the viewport bounds have changed.\n         */\n        this.boundsChange = new EventEmitter();\n        /**\n         * This event is fired when the mapTypeId property changes.\n         */\n        this.mapTypeIdChange = new EventEmitter();\n        /**\n         * This event is fired when the map becomes idle after panning or zooming.\n         */\n        this.idle = new EventEmitter();\n        /**\n         * This event is fired when the zoom level has changed.\n         */\n        this.zoomChange = new EventEmitter();\n        /**\n         * This event is fired when the google map is fully initialized.\n         * You get the google.maps.Map instance as a result of this EventEmitter.\n         */\n        this.mapReady = new EventEmitter();\n        /**\n         * This event is fired when the visible tiles have finished loading.\n         */\n        this.tilesLoaded = new EventEmitter();\n    }\n    /** @internal */\n    ngOnInit() {\n        if (isPlatformServer(this._platformId)) {\n            // The code is running on the server, do nothing\n            return;\n        }\n        // todo: this should be solved with a new component and a viewChild decorator\n        const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n        this._initMapInstance(container);\n    }\n    _initMapInstance(el) {\n        this._mapsWrapper.createMap(el, {\n            center: { lat: this.latitude || 0, lng: this.longitude || 0 },\n            zoom: this.zoom,\n            minZoom: this.minZoom,\n            maxZoom: this.maxZoom,\n            controlSize: this.controlSize,\n            disableDefaultUI: this.disableDefaultUI,\n            disableDoubleClickZoom: this.disableDoubleClickZoom,\n            scrollwheel: this.scrollwheel,\n            backgroundColor: this.backgroundColor,\n            draggable: this.draggable,\n            draggableCursor: this.draggableCursor,\n            draggingCursor: this.draggingCursor,\n            keyboardShortcuts: this.keyboardShortcuts,\n            styles: this.styles,\n            zoomControl: this.zoomControl,\n            zoomControlOptions: this.zoomControlOptions,\n            streetViewControl: this.streetViewControl,\n            streetViewControlOptions: this.streetViewControlOptions,\n            scaleControl: this.scaleControl,\n            scaleControlOptions: this.scaleControlOptions,\n            mapTypeControl: this.mapTypeControl,\n            mapTypeControlOptions: this.mapTypeControlOptions,\n            panControl: this.panControl,\n            panControlOptions: this.panControlOptions,\n            rotateControl: this.rotateControl,\n            rotateControlOptions: this.rotateControlOptions,\n            fullscreenControl: this.fullscreenControl,\n            fullscreenControlOptions: this.fullscreenControlOptions,\n            mapTypeId: this.mapTypeId,\n            clickableIcons: this.clickableIcons,\n            gestureHandling: this.gestureHandling,\n            tilt: this.tilt,\n            restriction: this.restriction,\n        })\n            .then(() => this._mapsWrapper.getNativeMap())\n            .then(map => this.mapReady.emit(map));\n        // register event listeners\n        this._handleMapCenterChange();\n        this._handleMapZoomChange();\n        this._handleMapMouseEvents();\n        this._handleBoundsChange();\n        this._handleMapTypeIdChange();\n        this._handleTilesLoadedEvent();\n        this._handleIdleEvent();\n    }\n    /** @internal */\n    ngOnDestroy() {\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\n        // remove all listeners from the map instance\n        this._mapsWrapper.clearInstanceListeners();\n        if (this._fitBoundsSubscription) {\n            this._fitBoundsSubscription.unsubscribe();\n        }\n    }\n    /* @internal */\n    ngOnChanges(changes) {\n        this._updateMapOptionsChanges(changes);\n        this._updatePosition(changes);\n    }\n    _updateMapOptionsChanges(changes) {\n        let options = {};\n        let optionKeys = Object.keys(changes).filter(k => AgmMap_1._mapOptionsAttributes.indexOf(k) !== -1);\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n        this._mapsWrapper.setMapOptions(options);\n    }\n    /**\n     * Triggers a resize event on the google map instance.\n     * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n     * Returns a promise that gets resolved after the event was triggered.\n     */\n    triggerResize(recenter = true) {\n        // Note: When we would trigger the resize event and show the map in the same turn (which is a\n        // common case for triggering a resize event), then the resize event would not\n        // work (to show the map), so we trigger the event in a timeout.\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                return this._mapsWrapper.triggerMapEvent('resize').then(() => {\n                    if (recenter) {\n                        this.fitBounds != null ? this._fitBounds() : this._setCenter();\n                    }\n                    resolve();\n                });\n            });\n        });\n    }\n    _updatePosition(changes) {\n        if (changes['latitude'] == null && changes['longitude'] == null &&\n            !changes['fitBounds']) {\n            // no position update needed\n            return;\n        }\n        // we prefer fitBounds in changes\n        if ('fitBounds' in changes) {\n            this._fitBounds();\n            return;\n        }\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n            return;\n        }\n        this._setCenter();\n    }\n    _setCenter() {\n        let newCenter = {\n            lat: this.latitude,\n            lng: this.longitude,\n        };\n        if (this.usePanning) {\n            this._mapsWrapper.panTo(newCenter);\n        }\n        else {\n            this._mapsWrapper.setCenter(newCenter);\n        }\n    }\n    _fitBounds() {\n        switch (this.fitBounds) {\n            case true:\n                this._subscribeToFitBoundsUpdates();\n                break;\n            case false:\n                if (this._fitBoundsSubscription) {\n                    this._fitBoundsSubscription.unsubscribe();\n                }\n                break;\n            default:\n                this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n        }\n    }\n    _subscribeToFitBoundsUpdates() {\n        this._zone.runOutsideAngular(() => {\n            this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => {\n                this._zone.run(() => this._updateBounds(b, this.fitBoundsPadding));\n            });\n        });\n    }\n    _updateBounds(bounds, padding) {\n        if (!bounds) {\n            return;\n        }\n        if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n            const newBounds = new google.maps.LatLngBounds();\n            newBounds.union(bounds);\n            bounds = newBounds;\n        }\n        if (this.usePanning) {\n            this._mapsWrapper.panToBounds(bounds, padding);\n            return;\n        }\n        this._mapsWrapper.fitBounds(bounds, padding);\n    }\n    _isLatLngBoundsLiteral(bounds) {\n        return bounds != null && bounds.extend === undefined;\n    }\n    _handleMapCenterChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(() => {\n            this._mapsWrapper.getCenter().then((center) => {\n                this.latitude = center.lat();\n                this.longitude = center.lng();\n                this.centerChange.emit({ lat: this.latitude, lng: this.longitude });\n            });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleBoundsChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(() => {\n            this._mapsWrapper.getBounds().then((bounds) => { this.boundsChange.emit(bounds); });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapTypeIdChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(() => {\n            this._mapsWrapper.getMapTypeId().then((mapTypeId) => { this.mapTypeIdChange.emit(mapTypeId); });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapZoomChange() {\n        const s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(() => {\n            this._mapsWrapper.getZoom().then((z) => {\n                this.zoom = z;\n                this.zoomChange.emit(z);\n            });\n        });\n        this._observableSubscriptions.push(s);\n    }\n    _handleIdleEvent() {\n        const s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(() => { this.idle.emit(void 0); });\n        this._observableSubscriptions.push(s);\n    }\n    _handleTilesLoadedEvent() {\n        const s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(() => this.tilesLoaded.emit(void 0));\n        this._observableSubscriptions.push(s);\n    }\n    _handleMapMouseEvents() {\n        const events = [\n            { name: 'click', emitter: this.mapClick },\n            { name: 'rightclick', emitter: this.mapRightClick },\n            { name: 'dblclick', emitter: this.mapDblClick },\n        ];\n        events.forEach((e) => {\n            const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe((event) => {\n                let value = {\n                    coords: {\n                        lat: event.latLng.lat(),\n                        lng: event.latLng.lng(),\n                    },\n                    placeId: event.placeId,\n                };\n                // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n                if (value.placeId && !this.showDefaultInfoWindow) {\n                    event.stop();\n                }\n                e.emitter.emit(value);\n            });\n            this._observableSubscriptions.push(s);\n        });\n    }\n};\n/**\n * Map option attributes that can change over time\n */\nAgmMap._mapOptionsAttributes = [\n    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\n    'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl',\n    'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom',\n    'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions',\n    'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions',\n    'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction',\n];\nAgmMap.ctorParameters = () => [\n    { type: ElementRef },\n    { type: GoogleMapsAPIWrapper },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: FitBoundsService },\n    { type: NgZone }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"longitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"latitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"zoom\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmMap.prototype, \"minZoom\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmMap.prototype, \"maxZoom\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmMap.prototype, \"controlSize\", void 0);\n__decorate([\n    Input('mapDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"disableDoubleClickZoom\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"disableDefaultUI\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"scrollwheel\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMap.prototype, \"backgroundColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMap.prototype, \"draggableCursor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMap.prototype, \"draggingCursor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"keyboardShortcuts\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], AgmMap.prototype, \"zoomControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"zoomControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], AgmMap.prototype, \"styles\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"usePanning\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], AgmMap.prototype, \"streetViewControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"streetViewControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"fitBounds\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"fitBoundsPadding\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"scaleControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"scaleControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"mapTypeControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"mapTypeControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"panControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"panControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"rotateControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"rotateControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"fullscreenControl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"fullscreenControlOptions\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMap.prototype, \"mapTypeId\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"clickableIcons\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"showDefaultInfoWindow\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMap.prototype, \"gestureHandling\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"tilt\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMap.prototype, \"restriction\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"mapClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"mapRightClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"mapDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"centerChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"boundsChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"mapTypeIdChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"idle\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"zoomChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"mapReady\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMap.prototype, \"tilesLoaded\", void 0);\nAgmMap = AgmMap_1 = __decorate([\n    Component({\n        selector: 'agm-map',\n        providers: [\n            CircleManager,\n            DataLayerManager,\n            DataLayerManager,\n            FitBoundsService,\n            GoogleMapsAPIWrapper,\n            InfoWindowManager,\n            KmlLayerManager,\n            LayerManager,\n            MarkerManager,\n            PolygonManager,\n            PolylineManager,\n            RectangleManager,\n        ],\n        host: {\n            // todo: deprecated - we will remove it with the next version\n            '[class.sebm-google-map-container]': 'true',\n        },\n        template: `\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n              <div class='agm-map-content'>\n                <ng-content></ng-content>\n              </div>\n  `,\n        styles: [`\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  `]\n    }),\n    __param(2, Inject(PLATFORM_ID)),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        GoogleMapsAPIWrapper,\n        Object,\n        FitBoundsService,\n        NgZone])\n], AgmMap);\n\nvar AgmMarker_1;\nlet markerId = 0;\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nlet AgmMarker = AgmMarker_1 = class AgmMarker {\n    constructor(_markerManager) {\n        this._markerManager = _markerManager;\n        /**\n         * If true, the marker can be dragged. Default value is false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If true, the marker is visible\n         */\n        this.visible = true;\n        /**\n         * Whether to automatically open the child info window when the marker is clicked.\n         */\n        this.openInfoWindow = true;\n        /**\n         * The marker's opacity between 0.0 and 1.0.\n         */\n        this.opacity = 1;\n        /**\n         * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n         * front of markers with lower values. By default, markers are displayed according to their\n         * vertical position on screen, with lower markers appearing in front of markers further up the\n         * screen.\n         */\n        this.zIndex = 1;\n        /**\n         * If true, the marker can be clicked. Default value is true.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.clickable = true;\n        /**\n         * This event is fired when the marker's animation property changes.\n         *\n         * @memberof AgmMarker\n         */\n        this.animationChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the marker.\n         */\n        this.markerClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks twice on the marker.\n         */\n        this.markerDblClick = new EventEmitter();\n        /**\n         * This event is fired when the user rightclicks on the marker.\n         */\n        this.markerRightClick = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the marker.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the marker.\n         */\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the marker.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user mouses over the marker.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the user mouses outside the marker.\n         */\n        this.mouseOut = new EventEmitter();\n        /** @internal */\n        this.infoWindow = new QueryList();\n        this._markerAddedToManger = false;\n        this._observableSubscriptions = [];\n        this._fitBoundsDetails$ = new ReplaySubject(1);\n        this._id = (markerId++).toString();\n    }\n    /* @internal */\n    ngAfterContentInit() {\n        this.handleInfoWindowUpdate();\n        this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\n    }\n    handleInfoWindowUpdate() {\n        if (this.infoWindow.length > 1) {\n            throw new Error('Expected no more than one info window.');\n        }\n        this.infoWindow.forEach(marker => {\n            marker.hostMarker = this;\n        });\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (typeof this.latitude === 'string') {\n            this.latitude = Number(this.latitude);\n        }\n        if (typeof this.longitude === 'string') {\n            this.longitude = Number(this.longitude);\n        }\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n            return;\n        }\n        if (!this._markerAddedToManger) {\n            this._markerManager.addMarker(this);\n            this._updateFitBoundsDetails();\n            this._markerAddedToManger = true;\n            this._addEventListeners();\n            return;\n        }\n        if (changes['latitude'] || changes['longitude']) {\n            this._markerManager.updateMarkerPosition(this);\n            this._updateFitBoundsDetails();\n        }\n        if (changes['title']) {\n            this._markerManager.updateTitle(this);\n        }\n        if (changes['label']) {\n            this._markerManager.updateLabel(this);\n        }\n        if (changes['draggable']) {\n            this._markerManager.updateDraggable(this);\n        }\n        if (changes['iconUrl']) {\n            this._markerManager.updateIcon(this);\n        }\n        if (changes['opacity']) {\n            this._markerManager.updateOpacity(this);\n        }\n        if (changes['visible']) {\n            this._markerManager.updateVisible(this);\n        }\n        if (changes['zIndex']) {\n            this._markerManager.updateZIndex(this);\n        }\n        if (changes['clickable']) {\n            this._markerManager.updateClickable(this);\n        }\n        if (changes['animation']) {\n            this._markerManager.updateAnimation(this);\n        }\n    }\n    /** @internal */\n    getFitBoundsDetails$() {\n        return this._fitBoundsDetails$.asObservable();\n    }\n    _updateFitBoundsDetails() {\n        this._fitBoundsDetails$.next({ latLng: { lat: this.latitude, lng: this.longitude } });\n    }\n    _addEventListeners() {\n        const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {\n            if (this.openInfoWindow) {\n                this.infoWindow.forEach(infoWindow => infoWindow.open());\n            }\n            this.markerClick.emit(this);\n        });\n        this._observableSubscriptions.push(cs);\n        const dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(() => {\n            this.markerDblClick.emit(null);\n        });\n        this._observableSubscriptions.push(dcs);\n        const rc = this._markerManager.createEventObservable('rightclick', this).subscribe(() => {\n            this.markerRightClick.emit(null);\n        });\n        this._observableSubscriptions.push(rc);\n        const ds = this._markerManager.createEventObservable('dragstart', this)\n            .subscribe((e) => {\n            this.dragStart.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(ds);\n        const d = this._markerManager.createEventObservable('drag', this)\n            .subscribe((e) => {\n            this.drag.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(d);\n        const de = this._markerManager.createEventObservable('dragend', this)\n            .subscribe((e) => {\n            this.dragEnd.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(de);\n        const mover = this._markerManager.createEventObservable('mouseover', this)\n            .subscribe((e) => {\n            this.mouseOver.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(mover);\n        const mout = this._markerManager.createEventObservable('mouseout', this)\n            .subscribe((e) => {\n            this.mouseOut.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\n        });\n        this._observableSubscriptions.push(mout);\n        const anChng = this._markerManager.createEventObservable('animation_changed', this)\n            .subscribe(() => {\n            this.animationChange.emit(this.animation);\n        });\n        this._observableSubscriptions.push(anChng);\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return 'AgmMarker-' + this._id.toString(); }\n    /** @internal */\n    ngOnDestroy() {\n        this._markerManager.deleteMarker(this);\n        // unsubscribe all registered observable subscriptions\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\n    }\n};\nAgmMarker.ctorParameters = () => [\n    { type: MarkerManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmMarker.prototype, \"latitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmMarker.prototype, \"longitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMarker.prototype, \"title\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"label\", void 0);\n__decorate([\n    Input('markerDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMarker.prototype, \"iconUrl\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"visible\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"openInfoWindow\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"opacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"zIndex\", void 0);\n__decorate([\n    Input('markerClickable'),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"clickable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmMarker.prototype, \"animation\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], AgmMarker.prototype, \"animationChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"markerClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"markerDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"markerRightClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"dragStart\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"drag\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"dragEnd\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"mouseOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmMarker.prototype, \"mouseOut\", void 0);\n__decorate([\n    ContentChildren(AgmInfoWindow),\n    __metadata(\"design:type\", QueryList)\n], AgmMarker.prototype, \"infoWindow\", void 0);\nAgmMarker = AgmMarker_1 = __decorate([\n    Directive({\n        selector: 'agm-marker',\n        providers: [\n            { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmMarker_1) },\n        ],\n        inputs: [\n            'latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl',\n            'openInfoWindow', 'opacity', 'visible', 'zIndex', 'animation',\n        ],\n        outputs: ['markerClick', 'dragStart', 'drag', 'dragEnd', 'mouseOver', 'mouseOut'],\n    }),\n    __metadata(\"design:paramtypes\", [MarkerManager])\n], AgmMarker);\n\nvar AgmPolygon_1;\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: Array<LatLngLiteral> = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\nlet AgmPolygon = AgmPolygon_1 = class AgmPolygon {\n    constructor(_polygonManager) {\n        this._polygonManager = _polygonManager;\n        /**\n         * Indicates whether this Polygon handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this shape over the map. The geodesic\n         * property defines the mode of dragging. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this shape by dragging the control\n         * points shown at the vertices and on each segment. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * When true, edges of the polygon are interpreted as geodesic and will\n         * follow the curvature of the Earth. When false, edges of the polygon are\n         * rendered as straight lines in screen space. Note that the shape of a\n         * geodesic polygon may appear to change when dragged, as the dimensions\n         * are maintained relative to the surface of the earth. Defaults to false.\n         */\n        this.geodesic = false;\n        /**\n         * The ordered sequence of coordinates that designates a closed loop.\n         * Unlike polylines, a polygon may consist of one or more paths.\n         *  As a result, the paths property may specify one or more arrays of\n         * LatLng coordinates. Paths are closed automatically; do not repeat the\n         * first vertex of the path as the last vertex. Simple polygons may be\n         * defined using a single array of LatLngs. More complex polygons may\n         * specify an array of arrays. Any simple arrays are converted into Arrays.\n         * Inserting or removing LatLngs from the Array will automatically update\n         * the polygon on the map.\n         */\n        this.paths = [];\n        /**\n         * This event is fired when the DOM click event is fired on the Polygon.\n         */\n        this.polyClick = new EventEmitter();\n        /**\n         * This event is fired when the DOM dblclick event is fired on the Polygon.\n         */\n        this.polyDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the polygon.\n         */\n        this.polyDrag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the polygon.\n         */\n        this.polyDragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the polygon.\n         */\n        this.polyDragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the Polygon.\n         */\n        this.polyMouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the Polygon.\n         */\n        this.polyMouseMove = new EventEmitter();\n        /**\n         * This event is fired on Polygon mouseout.\n         */\n        this.polyMouseOut = new EventEmitter();\n        /**\n         * This event is fired on Polygon mouseover.\n         */\n        this.polyMouseOver = new EventEmitter();\n        /**\n         * This event is fired whe the DOM mouseup event is fired on the Polygon\n         */\n        this.polyMouseUp = new EventEmitter();\n        /**\n         * This event is fired when the Polygon is right-clicked on.\n         */\n        this.polyRightClick = new EventEmitter();\n        /**\n         * This event is fired after Polygon first path changes.\n         */\n        this.polyPathsChange = new EventEmitter();\n        this._polygonAddedToManager = false;\n        this._subscriptions = [];\n    }\n    /** @internal */\n    ngAfterContentInit() {\n        if (!this._polygonAddedToManager) {\n            this._init();\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this._polygonAddedToManager) {\n            this._init();\n            return;\n        }\n        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n    }\n    _init() {\n        this._polygonManager.addPolygon(this);\n        this._polygonAddedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const handlers = [\n            { name: 'click', handler: (ev) => this.polyClick.emit(ev) },\n            { name: 'dblclick', handler: (ev) => this.polyDblClick.emit(ev) },\n            { name: 'drag', handler: (ev) => this.polyDrag.emit(ev) },\n            { name: 'dragend', handler: (ev) => this.polyDragEnd.emit(ev) },\n            { name: 'dragstart', handler: (ev) => this.polyDragStart.emit(ev) },\n            { name: 'mousedown', handler: (ev) => this.polyMouseDown.emit(ev) },\n            { name: 'mousemove', handler: (ev) => this.polyMouseMove.emit(ev) },\n            { name: 'mouseout', handler: (ev) => this.polyMouseOut.emit(ev) },\n            { name: 'mouseover', handler: (ev) => this.polyMouseOver.emit(ev) },\n            { name: 'mouseup', handler: (ev) => this.polyMouseUp.emit(ev) },\n            { name: 'rightclick', handler: (ev) => this.polyRightClick.emit(ev) },\n        ];\n        handlers.forEach((obj) => {\n            const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n        this._polygonManager.createPathEventObservable(this)\n            .then(paths$ => {\n            const os = paths$.subscribe(pathEvent => this.polyPathsChange.emit(pathEvent));\n            this._subscriptions.push(os);\n        });\n    }\n    _updatePolygonOptions(changes) {\n        return Object.keys(changes)\n            .filter(k => AgmPolygon_1._polygonOptionsAttributes.indexOf(k) !== -1)\n            .reduce((obj, k) => {\n            obj[k] = changes[k].currentValue;\n            return obj;\n        }, {});\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    ngOnDestroy() {\n        this._polygonManager.deletePolygon(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n    getPath() {\n        return this._polygonManager.getPath(this);\n    }\n    getPaths() {\n        return this._polygonManager.getPaths(this);\n    }\n};\nAgmPolygon._polygonOptionsAttributes = [\n    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\n    'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\n    'editable', 'visible',\n];\nAgmPolygon.ctorParameters = () => [\n    { type: PolygonManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolygon.prototype, \"clickable\", void 0);\n__decorate([\n    Input('polyDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmPolygon.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolygon.prototype, \"editable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolygon.prototype, \"fillColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolygon.prototype, \"fillOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolygon.prototype, \"geodesic\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Array)\n], AgmPolygon.prototype, \"paths\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolygon.prototype, \"strokeColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolygon.prototype, \"strokeOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolygon.prototype, \"strokeWeight\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], AgmPolygon.prototype, \"visible\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolygon.prototype, \"zIndex\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyDrag\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyDragEnd\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyDragStart\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyMouseDown\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyMouseMove\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyMouseOut\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyMouseOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyMouseUp\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolygon.prototype, \"polyRightClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], AgmPolygon.prototype, \"polyPathsChange\", void 0);\nAgmPolygon = AgmPolygon_1 = __decorate([\n    Directive({\n        selector: 'agm-polygon',\n    }),\n    __metadata(\"design:paramtypes\", [PolygonManager])\n], AgmPolygon);\n\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n *\n * @export\n * @class AgmPolylineIcon\n */\nlet AgmPolylineIcon = class AgmPolylineIcon {\n    ngOnInit() {\n        if (this.path == null) {\n            throw new Error('Icon Sequence path is required');\n        }\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Boolean)\n], AgmPolylineIcon.prototype, \"fixedRotation\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolylineIcon.prototype, \"offset\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolylineIcon.prototype, \"repeat\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"anchorX\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"anchorY\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolylineIcon.prototype, \"fillColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"fillOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolylineIcon.prototype, \"path\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"rotation\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"scale\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolylineIcon.prototype, \"strokeColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"strokeOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylineIcon.prototype, \"strokeWeight\", void 0);\nAgmPolylineIcon = __decorate([\n    Directive({ selector: 'agm-polyline agm-icon-sequence' })\n], AgmPolylineIcon);\n\nvar AgmPolylinePoint_1;\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\nlet AgmPolylinePoint = AgmPolylinePoint_1 = class AgmPolylinePoint {\n    constructor() {\n        /**\n         * This event emitter gets emitted when the position of the point changed.\n         */\n        this.positionChanged = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        if (changes['latitude'] || changes['longitude']) {\n            const position = {\n                lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n                lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude,\n            };\n            this.positionChanged.emit(position);\n        }\n    }\n    /** @internal */\n    getFitBoundsDetails$() {\n        return this.positionChanged.pipe(startWith({ lat: this.latitude, lng: this.longitude }), map(position => ({ latLng: position })));\n    }\n};\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylinePoint.prototype, \"latitude\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolylinePoint.prototype, \"longitude\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolylinePoint.prototype, \"positionChanged\", void 0);\nAgmPolylinePoint = AgmPolylinePoint_1 = __decorate([\n    Directive({\n        selector: 'agm-polyline-point',\n        providers: [\n            { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmPolylinePoint_1) },\n        ],\n    }),\n    __metadata(\"design:paramtypes\", [])\n], AgmPolylinePoint);\n\nvar AgmPolyline_1;\nlet polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nlet AgmPolyline = AgmPolyline_1 = class AgmPolyline {\n    constructor(_polylineManager) {\n        this._polylineManager = _polylineManager;\n        /**\n         * Indicates whether this Polyline handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this shape over the map. The geodesic property defines the\n         * mode of dragging. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this shape by dragging the control points shown at the\n         * vertices and on each segment. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n         * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n         * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n         * are maintained relative to the surface of the earth. Defaults to false.\n         */\n        this.geodesic = false;\n        /**\n         * Whether this polyline is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the DOM click event is fired on the Polyline.\n         */\n        this.lineClick = new EventEmitter();\n        /**\n         * This event is fired when the DOM dblclick event is fired on the Polyline.\n         */\n        this.lineDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the polyline.\n         */\n        this.lineDrag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the polyline.\n         */\n        this.lineDragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the polyline.\n         */\n        this.lineDragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the Polyline.\n         */\n        this.lineMouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the Polyline.\n         */\n        this.lineMouseMove = new EventEmitter();\n        /**\n         * This event is fired on Polyline mouseout.\n         */\n        this.lineMouseOut = new EventEmitter();\n        /**\n         * This event is fired on Polyline mouseover.\n         */\n        this.lineMouseOver = new EventEmitter();\n        /**\n         * This event is fired whe the DOM mouseup event is fired on the Polyline\n         */\n        this.lineMouseUp = new EventEmitter();\n        /**\n         * This event is fired when the Polyline is right-clicked on.\n         */\n        this.lineRightClick = new EventEmitter();\n        /**\n         * This event is fired after Polyline's path changes.\n         */\n        this.polyPathChange = new EventEmitter();\n        this._polylineAddedToManager = false;\n        this._subscriptions = [];\n        this._id = (polylineId++).toString();\n    }\n    /** @internal */\n    ngAfterContentInit() {\n        if (this.points.length) {\n            this.points.forEach((point) => {\n                const s = point.positionChanged.subscribe(() => { this._polylineManager.updatePolylinePoints(this); });\n                this._subscriptions.push(s);\n            });\n        }\n        if (!this._polylineAddedToManager) {\n            this._init();\n        }\n        const pointSub = this.points.changes.subscribe(() => this._polylineManager.updatePolylinePoints(this));\n        this._subscriptions.push(pointSub);\n        this._polylineManager.updatePolylinePoints(this);\n        const iconSub = this.iconSequences.changes.subscribe(() => this._polylineManager.updateIconSequences(this));\n        this._subscriptions.push(iconSub);\n    }\n    ngOnChanges(changes) {\n        if (!this._polylineAddedToManager) {\n            this._init();\n            return;\n        }\n        let options = {};\n        const optionKeys = Object.keys(changes).filter(k => AgmPolyline_1._polylineOptionsAttributes.indexOf(k) !== -1);\n        optionKeys.forEach(k => options[k] = changes[k].currentValue);\n        this._polylineManager.setPolylineOptions(this, options);\n    }\n    getPath() {\n        return this._polylineManager.getPath(this);\n    }\n    _init() {\n        this._polylineManager.addPolyline(this);\n        this._polylineAddedToManager = true;\n        this._addEventListeners();\n    }\n    _addEventListeners() {\n        const handlers = [\n            { name: 'click', handler: (ev) => this.lineClick.emit(ev) },\n            { name: 'dblclick', handler: (ev) => this.lineDblClick.emit(ev) },\n            { name: 'drag', handler: (ev) => this.lineDrag.emit(ev) },\n            { name: 'dragend', handler: (ev) => this.lineDragEnd.emit(ev) },\n            { name: 'dragstart', handler: (ev) => this.lineDragStart.emit(ev) },\n            { name: 'mousedown', handler: (ev) => this.lineMouseDown.emit(ev) },\n            { name: 'mousemove', handler: (ev) => this.lineMouseMove.emit(ev) },\n            { name: 'mouseout', handler: (ev) => this.lineMouseOut.emit(ev) },\n            { name: 'mouseover', handler: (ev) => this.lineMouseOver.emit(ev) },\n            { name: 'mouseup', handler: (ev) => this.lineMouseUp.emit(ev) },\n            { name: 'rightclick', handler: (ev) => this.lineRightClick.emit(ev) },\n        ];\n        handlers.forEach((obj) => {\n            const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n            this._subscriptions.push(os);\n        });\n        this._polylineManager.createPathEventObservable(this).then((ob$) => {\n            const os = ob$.subscribe(pathEvent => this.polyPathChange.emit(pathEvent));\n            this._subscriptions.push(os);\n        });\n    }\n    /** @internal */\n    _getPoints() {\n        if (this.points) {\n            return this.points.toArray();\n        }\n        return [];\n    }\n    _getIcons() {\n        if (this.iconSequences) {\n            return this.iconSequences.toArray();\n        }\n        return [];\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    ngOnDestroy() {\n        this._polylineManager.deletePolyline(this);\n        // unsubscribe all registered observable subscriptions\n        this._subscriptions.forEach((s) => s.unsubscribe());\n    }\n};\nAgmPolyline._polylineOptionsAttributes = [\n    'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\n    'zIndex',\n];\nAgmPolyline.ctorParameters = () => [\n    { type: PolylineManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"clickable\", void 0);\n__decorate([\n    Input('polylineDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"editable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"geodesic\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmPolyline.prototype, \"strokeColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolyline.prototype, \"strokeOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolyline.prototype, \"strokeWeight\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"visible\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmPolyline.prototype, \"zIndex\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineDrag\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineDragEnd\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineDragStart\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineMouseDown\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineMouseMove\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineMouseOut\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineMouseOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineMouseUp\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmPolyline.prototype, \"lineRightClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], AgmPolyline.prototype, \"polyPathChange\", void 0);\n__decorate([\n    ContentChildren(AgmPolylinePoint),\n    __metadata(\"design:type\", QueryList)\n], AgmPolyline.prototype, \"points\", void 0);\n__decorate([\n    ContentChildren(AgmPolylineIcon),\n    __metadata(\"design:type\", QueryList)\n], AgmPolyline.prototype, \"iconSequences\", void 0);\nAgmPolyline = AgmPolyline_1 = __decorate([\n    Directive({\n        selector: 'agm-polyline',\n    }),\n    __metadata(\"design:paramtypes\", [PolylineManager])\n], AgmPolyline);\n\nvar AgmRectangle_1;\nlet AgmRectangle = AgmRectangle_1 = class AgmRectangle {\n    constructor(_manager) {\n        this._manager = _manager;\n        /**\n         * Indicates whether this Rectangle handles mouse events. Defaults to true.\n         */\n        this.clickable = true;\n        /**\n         * If set to true, the user can drag this rectangle over the map. Defaults to false.\n         */\n        // tslint:disable-next-line:no-input-rename\n        this.draggable = false;\n        /**\n         * If set to true, the user can edit this rectangle by dragging the control points shown at\n         * the center and around the circumference of the rectangle. Defaults to false.\n         */\n        this.editable = false;\n        /**\n         * The stroke position. Defaults to CENTER.\n         * This property is not supported on Internet Explorer 8 and earlier.\n         */\n        this.strokePosition = 'CENTER';\n        /**\n         * The stroke width in pixels.\n         */\n        this.strokeWeight = 0;\n        /**\n         * Whether this rectangle is visible on the map. Defaults to true.\n         */\n        this.visible = true;\n        /**\n         * This event is fired when the rectangle's is changed.\n         */\n        this.boundsChange = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the rectangle.\n         */\n        this.rectangleClick = new EventEmitter();\n        /**\n         * This event emitter gets emitted when the user clicks on the rectangle.\n         */\n        this.rectangleDblClick = new EventEmitter();\n        /**\n         * This event is repeatedly fired while the user drags the rectangle.\n         */\n        this.drag = new EventEmitter();\n        /**\n         * This event is fired when the user stops dragging the rectangle.\n         */\n        this.dragEnd = new EventEmitter();\n        /**\n         * This event is fired when the user starts dragging the rectangle.\n         */\n        this.dragStart = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousedown event is fired on the rectangle.\n         */\n        this.mouseDown = new EventEmitter();\n        /**\n         * This event is fired when the DOM mousemove event is fired on the rectangle.\n         */\n        this.mouseMove = new EventEmitter();\n        /**\n         * This event is fired on rectangle mouseout.\n         */\n        this.mouseOut = new EventEmitter();\n        /**\n         * This event is fired on rectangle mouseover.\n         */\n        this.mouseOver = new EventEmitter();\n        /**\n         * This event is fired when the DOM mouseup event is fired on the rectangle.\n         */\n        this.mouseUp = new EventEmitter();\n        /**\n         * This event is fired when the rectangle is right-clicked on.\n         */\n        this.rightClick = new EventEmitter();\n        this._rectangleAddedToManager = false;\n        this._eventSubscriptions = [];\n    }\n    /** @internal */\n    ngOnInit() {\n        this._manager.addRectangle(this);\n        this._rectangleAddedToManager = true;\n        this._registerEventListeners();\n    }\n    /** @internal */\n    ngOnChanges(changes) {\n        if (!this._rectangleAddedToManager) {\n            return;\n        }\n        if (changes['north'] ||\n            changes['east'] ||\n            changes['south'] ||\n            changes['west']) {\n            this._manager.setBounds(this);\n        }\n        if (changes['editable']) {\n            this._manager.setEditable(this);\n        }\n        if (changes['draggable']) {\n            this._manager.setDraggable(this);\n        }\n        if (changes['visible']) {\n            this._manager.setVisible(this);\n        }\n        this._updateRectangleOptionsChanges(changes);\n    }\n    _updateRectangleOptionsChanges(changes) {\n        let options = {};\n        let optionKeys = Object.keys(changes).filter(k => AgmRectangle_1._mapOptions.indexOf(k) !== -1);\n        optionKeys.forEach(k => {\n            options[k] = changes[k].currentValue;\n        });\n        if (optionKeys.length > 0) {\n            this._manager.setOptions(this, options);\n        }\n    }\n    _registerEventListeners() {\n        let events = new Map();\n        events.set('bounds_changed', this.boundsChange);\n        events.set('click', this.rectangleClick);\n        events.set('dblclick', this.rectangleDblClick);\n        events.set('drag', this.drag);\n        events.set('dragend', this.dragEnd);\n        events.set('dragStart', this.dragStart);\n        events.set('mousedown', this.mouseDown);\n        events.set('mousemove', this.mouseMove);\n        events.set('mouseout', this.mouseOut);\n        events.set('mouseover', this.mouseOver);\n        events.set('mouseup', this.mouseUp);\n        events.set('rightclick', this.rightClick);\n        events.forEach((eventEmitter, eventName) => {\n            this._eventSubscriptions.push(this._manager\n                .createEventObservable(eventName, this)\n                .subscribe(value => {\n                switch (eventName) {\n                    case 'bounds_changed':\n                        this._manager.getBounds(this).then(bounds => eventEmitter.emit({\n                            north: bounds.getNorthEast().lat(),\n                            east: bounds.getNorthEast().lng(),\n                            south: bounds.getSouthWest().lat(),\n                            west: bounds.getSouthWest().lng(),\n                        }));\n                        break;\n                    default:\n                        eventEmitter.emit({\n                            coords: { lat: value.latLng.lat(), lng: value.latLng.lng() },\n                        });\n                }\n            }));\n        });\n    }\n    /** @internal */\n    ngOnDestroy() {\n        this._eventSubscriptions.forEach(function (s) {\n            s.unsubscribe();\n        });\n        this._eventSubscriptions = null;\n        this._manager.removeRectangle(this);\n    }\n    /**\n     * Gets the LatLngBounds of this Rectangle.\n     */\n    getBounds() {\n        return this._manager.getBounds(this);\n    }\n};\nAgmRectangle._mapOptions = [\n    'fillColor',\n    'fillOpacity',\n    'strokeColor',\n    'strokeOpacity',\n    'strokePosition',\n    'strokeWeight',\n    'visible',\n    'zIndex',\n    'clickable',\n];\nAgmRectangle.ctorParameters = () => [\n    { type: RectangleManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"north\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"east\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"south\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"west\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmRectangle.prototype, \"clickable\", void 0);\n__decorate([\n    Input('rectangleDraggable'),\n    __metadata(\"design:type\", Object)\n], AgmRectangle.prototype, \"draggable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmRectangle.prototype, \"editable\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmRectangle.prototype, \"fillColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"fillOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmRectangle.prototype, \"strokeColor\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"strokeOpacity\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], AgmRectangle.prototype, \"strokePosition\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmRectangle.prototype, \"strokeWeight\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmRectangle.prototype, \"visible\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], AgmRectangle.prototype, \"zIndex\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"boundsChange\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"rectangleClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"rectangleDblClick\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"drag\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"dragEnd\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"dragStart\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"mouseDown\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"mouseMove\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"mouseOut\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"mouseOver\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"mouseUp\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", EventEmitter)\n], AgmRectangle.prototype, \"rightClick\", void 0);\nAgmRectangle = AgmRectangle_1 = __decorate([\n    Directive({\n        selector: 'agm-rectangle',\n    }),\n    __metadata(\"design:paramtypes\", [RectangleManager])\n], AgmRectangle);\n\nlet layerId$3 = 0;\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\nlet AgmTransitLayer = class AgmTransitLayer {\n    constructor(_manager) {\n        this._manager = _manager;\n        this._addedToManager = false;\n        this._id = (layerId$3++).toString();\n        /**\n         * Hide/show transit layer\n         */\n        this.visible = true;\n    }\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addTransitLayer(this, { visible: this.visible });\n        this._addedToManager = true;\n    }\n    ngOnChanges(changes) {\n        if (!this._addedToManager) {\n            return;\n        }\n        if (changes['visible'] != null) {\n            this._manager.toggleLayerVisibility(this, { visible: changes['visible'].currentValue });\n        }\n    }\n    /** @internal */\n    id() { return this._id; }\n    /** @internal */\n    toString() { return `AgmTransitLayer-${this._id.toString()}`; }\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n};\nAgmTransitLayer.ctorParameters = () => [\n    { type: LayerManager }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], AgmTransitLayer.prototype, \"visible\", void 0);\nAgmTransitLayer = __decorate([\n    Directive({\n        selector: 'agm-transit-layer',\n    }),\n    __metadata(\"design:paramtypes\", [LayerManager])\n], AgmTransitLayer);\n\nvar google$1;\nvar SymbolPath;\n(function (SymbolPath) {\n    SymbolPath[SymbolPath[\"BACKWARD_CLOSED_ARROW\"] = 3] = \"BACKWARD_CLOSED_ARROW\";\n    SymbolPath[SymbolPath[\"BACKWARD_OPEN_ARROW\"] = 4] = \"BACKWARD_OPEN_ARROW\";\n    SymbolPath[SymbolPath[\"CIRCLE\"] = 0] = \"CIRCLE\";\n    SymbolPath[SymbolPath[\"FORWARD_CLOSED_ARROW\"] = 1] = \"FORWARD_CLOSED_ARROW\";\n    SymbolPath[SymbolPath[\"FORWARD_OPEN_ARROW\"] = 2] = \"FORWARD_OPEN_ARROW\";\n})(SymbolPath || (SymbolPath = {}));\n/**\n * Identifiers used to specify the placement of controls on the map. Controls are\n * positioned relative to other controls in the same layout position. Controls that\n * are added first are positioned closer to the edge of the map.\n */\nvar ControlPosition;\n(function (ControlPosition) {\n    ControlPosition[ControlPosition[\"RIGHT_BOTTOM\"] = 0] = \"RIGHT_BOTTOM\";\n    ControlPosition[ControlPosition[\"TOP_LEFT\"] = 1] = \"TOP_LEFT\";\n    ControlPosition[ControlPosition[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\n    ControlPosition[ControlPosition[\"TOP_RIGHT\"] = 3] = \"TOP_RIGHT\";\n    ControlPosition[ControlPosition[\"LEFT_CENTER\"] = 4] = \"LEFT_CENTER\";\n    ControlPosition[ControlPosition[\"LEFT_TOP\"] = 5] = \"LEFT_TOP\";\n    ControlPosition[ControlPosition[\"LEFT_BOTTOM\"] = 6] = \"LEFT_BOTTOM\";\n    ControlPosition[ControlPosition[\"RIGHT_TOP\"] = 7] = \"RIGHT_TOP\";\n    ControlPosition[ControlPosition[\"RIGHT_CENTER\"] = 8] = \"RIGHT_CENTER\";\n    ControlPosition[ControlPosition[\"BOTTOM_RIGHT\"] = 9] = \"BOTTOM_RIGHT\";\n    ControlPosition[ControlPosition[\"BOTTOM_LEFT\"] = 10] = \"BOTTOM_LEFT\";\n    ControlPosition[ControlPosition[\"BOTTOM_CENTER\"] = 11] = \"BOTTOM_CENTER\";\n})(ControlPosition || (ControlPosition = {}));\nvar MapTypeId;\n(function (MapTypeId) {\n    /** This map type displays a transparent layer of major streets on satellite images. */\n    MapTypeId[MapTypeId[\"HYBRID\"] = 0] = \"HYBRID\";\n    /** This map type displays a normal street map. */\n    MapTypeId[MapTypeId[\"ROADMAP\"] = 1] = \"ROADMAP\";\n    /** This map type displays satellite images. */\n    MapTypeId[MapTypeId[\"SATELLITE\"] = 2] = \"SATELLITE\";\n    /** This map type displays maps with physical features such as terrain and vegetation. */\n    MapTypeId[MapTypeId[\"TERRAIN\"] = 3] = \"TERRAIN\";\n})(MapTypeId || (MapTypeId = {}));\nvar MapTypeControlStyle;\n(function (MapTypeControlStyle) {\n    MapTypeControlStyle[MapTypeControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    MapTypeControlStyle[MapTypeControlStyle[\"DROPDOWN_MENU\"] = 2] = \"DROPDOWN_MENU\";\n    MapTypeControlStyle[MapTypeControlStyle[\"HORIZONTAL_BAR\"] = 1] = \"HORIZONTAL_BAR\";\n})(MapTypeControlStyle || (MapTypeControlStyle = {}));\nvar ScaleControlStyle;\n(function (ScaleControlStyle) {\n    ScaleControlStyle[ScaleControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n})(ScaleControlStyle || (ScaleControlStyle = {}));\nvar ZoomControlStyle;\n(function (ZoomControlStyle) {\n    ZoomControlStyle[ZoomControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    ZoomControlStyle[ZoomControlStyle[\"LARGE\"] = 1] = \"LARGE\";\n    ZoomControlStyle[ZoomControlStyle[\"SMALL\"] = 2] = \"SMALL\";\n})(ZoomControlStyle || (ZoomControlStyle = {}));\nvar GeocoderLocationType;\n(function (GeocoderLocationType) {\n    GeocoderLocationType[\"APPROXIMATE\"] = \"APPROXIMATE\";\n    GeocoderLocationType[\"GEOMETRIC_CENTER\"] = \"GEOMETRIC_CENTER\";\n    GeocoderLocationType[\"RANGE_INTERPOLATED\"] = \"RANGE_INTERPOLATED\";\n    GeocoderLocationType[\"ROOFTOP\"] = \"ROOFTOP\";\n})(GeocoderLocationType || (GeocoderLocationType = {}));\nvar GeocoderStatus;\n(function (GeocoderStatus) {\n    GeocoderStatus[\"ERROR\"] = \"ERROR\";\n    GeocoderStatus[\"INVALID_REQUEST\"] = \"INVALID_REQUEST\";\n    GeocoderStatus[\"OK\"] = \"OK\";\n    GeocoderStatus[\"OVER_QUERY_LIMIT\"] = \"OVER_QUERY_LIMIT\";\n    GeocoderStatus[\"REQUEST_DENIED\"] = \"REQUEST_DENIED\";\n    GeocoderStatus[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    GeocoderStatus[\"ZERO_RESULTS\"] = \"ZERO_RESULTS\";\n})(GeocoderStatus || (GeocoderStatus = {}));\n\nlet AgmGeocoder = class AgmGeocoder {\n    constructor(loader) {\n        const connectableGeocoder$ = new Observable(subscriber => {\n            loader.load().then(() => subscriber.next());\n        })\n            .pipe(map(() => this._createGeocoder()), multicast(new ReplaySubject(1)));\n        connectableGeocoder$.connect(); // ignore the subscription\n        // since we will remain subscribed till application exits\n        this.geocoder$ = connectableGeocoder$;\n    }\n    geocode(request) {\n        return this.geocoder$.pipe(switchMap((geocoder) => this._getGoogleResults(geocoder, request)));\n    }\n    _getGoogleResults(geocoder, request) {\n        const geocodeObservable = bindCallback(geocoder.geocode);\n        return geocodeObservable(request).pipe(switchMap(([results, status]) => {\n            if (status === GeocoderStatus.OK) {\n                return of(results);\n            }\n            return throwError(status);\n        }));\n    }\n    _createGeocoder() {\n        return new google.maps.Geocoder();\n    }\n};\nAgmGeocoder.ctorParameters = () => [\n    { type: MapsAPILoader }\n];\nAgmGeocoder.ngInjectableDef = ɵɵdefineInjectable({ factory: function AgmGeocoder_Factory() { return new AgmGeocoder(ɵɵinject(MapsAPILoader)); }, token: AgmGeocoder, providedIn: \"root\" });\nAgmGeocoder = __decorate([\n    Injectable({ providedIn: 'root' }),\n    __metadata(\"design:paramtypes\", [MapsAPILoader])\n], AgmGeocoder);\n\nclass WindowRef {\n    getNativeWindow() { return window; }\n}\nclass DocumentRef {\n    getNativeDocument() { return document; }\n}\nconst BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];\n\nvar GoogleMapsScriptProtocol;\n(function (GoogleMapsScriptProtocol) {\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\n})(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\nconst LAZY_MAPS_API_CONFIG = new InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\nlet LazyMapsAPILoader = class LazyMapsAPILoader extends MapsAPILoader {\n    constructor(config = null, w, d, localeId) {\n        super();\n        this.localeId = localeId;\n        this._SCRIPT_ID = 'agmGoogleMapsApiScript';\n        this.callbackName = `agmLazyMapsAPILoader`;\n        this._config = config || {};\n        this._windowRef = w;\n        this._documentRef = d;\n    }\n    load() {\n        const window = this._windowRef.getNativeWindow();\n        if (window.google && window.google.maps) {\n            // Google maps already loaded on the page.\n            return Promise.resolve();\n        }\n        if (this._scriptLoadingPromise) {\n            return this._scriptLoadingPromise;\n        }\n        // this can happen in HMR situations or Stackblitz.io editors.\n        const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n        if (scriptOnPage) {\n            this._assignScriptLoadingPromise(scriptOnPage);\n            return this._scriptLoadingPromise;\n        }\n        const script = this._documentRef.getNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.id = this._SCRIPT_ID;\n        script.src = this._getScriptSrc(this.callbackName);\n        this._assignScriptLoadingPromise(script);\n        this._documentRef.getNativeDocument().body.appendChild(script);\n        return this._scriptLoadingPromise;\n    }\n    _assignScriptLoadingPromise(scriptElem) {\n        this._scriptLoadingPromise = new Promise((resolve, reject) => {\n            this._windowRef.getNativeWindow()[this.callbackName] = () => {\n                resolve();\n            };\n            scriptElem.onerror = (error) => {\n                reject(error);\n            };\n        });\n    }\n    _getScriptSrc(callbackName) {\n        let protocolType = (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\n        let protocol;\n        switch (protocolType) {\n            case GoogleMapsScriptProtocol.AUTO:\n                protocol = '';\n                break;\n            case GoogleMapsScriptProtocol.HTTP:\n                protocol = 'http:';\n                break;\n            case GoogleMapsScriptProtocol.HTTPS:\n                protocol = 'https:';\n                break;\n        }\n        const hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n        const queryParams = {\n            v: this._config.apiVersion || 'quarterly',\n            callback: callbackName,\n            key: this._config.apiKey,\n            client: this._config.clientId,\n            channel: this._config.channel,\n            libraries: this._config.libraries,\n            region: this._config.region,\n            language: this._config.language || this.localeId !== 'en-US' ? this.localeId : null,\n        };\n        const params = Object.keys(queryParams)\n            .filter((k) => queryParams[k] != null)\n            .filter((k) => {\n            // remove empty arrays\n            return !Array.isArray(queryParams[k]) ||\n                (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n        })\n            .map((k) => {\n            // join arrays as comma seperated strings\n            let i = queryParams[k];\n            if (Array.isArray(i)) {\n                return { key: k, value: i.join(',') };\n            }\n            return { key: k, value: queryParams[k] };\n        })\n            .map((entry) => {\n            return `${entry.key}=${entry.value}`;\n        })\n            .join('&');\n        return `${protocol}//${hostAndPath}?${params}`;\n    }\n};\nLazyMapsAPILoader.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_MAPS_API_CONFIG,] }] },\n    { type: WindowRef },\n    { type: DocumentRef },\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\n];\nLazyMapsAPILoader = __decorate([\n    Injectable(),\n    __param(0, Optional()), __param(0, Inject(LAZY_MAPS_API_CONFIG)),\n    __param(3, Inject(LOCALE_ID)),\n    __metadata(\"design:paramtypes\", [Object, WindowRef, DocumentRef, String])\n], LazyMapsAPILoader);\n\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\nclass NoOpMapsAPILoader {\n    load() {\n        if (!window.google || !window.google.maps) {\n            throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\n        }\n        return Promise.resolve();\n    }\n}\n\n// exported map types\n\nvar AgmCoreModule_1;\n/**\n * @internal\n */\nfunction coreDirectives() {\n    return [\n        AgmBicyclingLayer,\n        AgmCircle,\n        AgmDataLayer,\n        AgmFitBounds,\n        AgmInfoWindow,\n        AgmKmlLayer,\n        AgmMap,\n        AgmMarker,\n        AgmPolygon,\n        AgmPolyline,\n        AgmPolylineIcon,\n        AgmPolylinePoint,\n        AgmRectangle,\n        AgmTransitLayer,\n    ];\n}\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\nlet AgmCoreModule = AgmCoreModule_1 = class AgmCoreModule {\n    /**\n     * Please use this method when you register the module at the root level.\n     */\n    static forRoot(lazyMapsAPILoaderConfig) {\n        return {\n            ngModule: AgmCoreModule_1,\n            providers: [\n                ...BROWSER_GLOBALS_PROVIDERS, { provide: MapsAPILoader, useClass: LazyMapsAPILoader },\n                { provide: LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig },\n            ],\n        };\n    }\n};\nAgmCoreModule = AgmCoreModule_1 = __decorate([\n    NgModule({ declarations: coreDirectives(), exports: coreDirectives() })\n], AgmCoreModule);\n\n// main modules\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer, CircleManager, ControlPosition, DataLayerManager, FitBoundsAccessor, GeocoderLocationType, GeocoderStatus, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapTypeId, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, ScaleControlStyle, ZoomControlStyle, FitBoundsService as ɵa, coreDirectives as ɵb, WindowRef as ɵc, DocumentRef as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵe };\n//# sourceMappingURL=agm-core.js.map\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n    return new Observable(subscriber => {\n        const handler = (...e) => subscriber.next(e.length === 1 ? e[0] : e);\n        let retValue;\n        try {\n            retValue = addHandler(handler);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!isFunction(removeHandler)) {\n            return undefined;\n        }\n        return () => removeHandler(handler, retValue);\n    });\n}\n//# sourceMappingURL=fromEventPattern.js.map","import { EventEmitter, Directive, ElementRef, Inject, PLATFORM_ID, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/ng2-tel-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst defaultUtilScript = 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/16.0.1/js/utils.js';\nclass Ng2TelInput {\n    /**\n     * @param {?} el\n     * @param {?} platformId\n     */\n    constructor(el, platformId) {\n        this.el = el;\n        this.platformId = platformId;\n        this.ng2TelInputOptions = {};\n        this.hasError = new EventEmitter();\n        this.ng2TelOutput = new EventEmitter();\n        this.countryChange = new EventEmitter();\n        this.intlTelInputObject = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.ng2TelInputOptions = Object.assign({}, this.ng2TelInputOptions, { utilsScript: this.getUtilsScript(this.ng2TelInputOptions) });\n            this.ngTelInput = window.intlTelInput(this.el.nativeElement, Object.assign({}, this.ng2TelInputOptions));\n            this.el.nativeElement.addEventListener(\"countrychange\", (/**\n             * @return {?}\n             */\n            () => {\n                this.countryChange.emit(this.ngTelInput.getSelectedCountryData());\n            }));\n            this.intlTelInputObject.emit(this.ngTelInput);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        /** @type {?} */\n        let isInputValid = this.isInputValid();\n        if (isInputValid) {\n            /** @type {?} */\n            let telOutput = this.ngTelInput.getNumber();\n            this.hasError.emit(isInputValid);\n            this.ng2TelOutput.emit(telOutput);\n        }\n        else {\n            this.hasError.emit(isInputValid);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    isInputValid() {\n        return this.ngTelInput.isValidNumber();\n    }\n    /**\n     * @param {?} country\n     * @return {?}\n     */\n    setCountry(country) {\n        this.ngTelInput.setCountry(country);\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    getUtilsScript(options) {\n        return options.utilsScript || defaultUtilScript;\n    }\n}\nNg2TelInput.decorators = [\n    { type: Directive, args: [{\n                selector: '[ng2TelInput]',\n            },] },\n];\n/** @nocollapse */\nNg2TelInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\n];\nNg2TelInput.propDecorators = {\n    ng2TelInputOptions: [{ type: Input, args: ['ng2TelInputOptions',] }],\n    hasError: [{ type: Output, args: ['hasError',] }],\n    ng2TelOutput: [{ type: Output, args: ['ng2TelOutput',] }],\n    countryChange: [{ type: Output, args: ['countryChange',] }],\n    intlTelInputObject: [{ type: Output, args: ['intlTelInputObject',] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/ng2-tel-input.module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass Ng2TelInputModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n        return {\n            ngModule: Ng2TelInputModule,\n            providers: []\n        };\n    }\n}\nNg2TelInputModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [Ng2TelInput],\n                exports: [Ng2TelInput]\n            },] },\n];\n\nexport { Ng2TelInput, Ng2TelInputModule };\n"]}