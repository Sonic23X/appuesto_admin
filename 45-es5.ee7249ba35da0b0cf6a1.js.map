{"version":3,"sources":["webpack:///src/app/pages/onboarding/onboarding.module.ts","webpack:///node_modules/@angular/cdk/fesm2015/stepper.js","webpack:///node_modules/@angular/material/fesm2015/stepper.js","webpack:///node_modules/@angular/material/stepper/index.d.ts.MatStep.html","webpack:///node_modules/@angular/material/stepper/index.d.ts.MatHorizontalStepper.html","webpack:///node_modules/@angular/material/stepper/index.d.ts.MatStepHeader.html","webpack:///src/app/shared/services/onboarding.service.ts","webpack:///src/app/pages/onboarding/first-step/first-step.component.ts","webpack:///src/app/pages/onboarding/first-step/first-step.component.html","webpack:///src/app/pages/onboarding/second-step/second-step.component.ts","webpack:///src/app/pages/onboarding/second-step/second-step.component.html","webpack:///src/app/pages/onboarding/third-step/third-step.component.ts","webpack:///src/app/pages/onboarding/third-step/third-step.component.html","webpack:///node_modules/@angular/material/slide-toggle/index.d.ts.MatSlideToggle.html","webpack:///src/app/pages/onboarding/fourth-step/fourth-step.component.ts","webpack:///src/app/pages/onboarding/fourth-step/fourth-step.component.html","webpack:///src/app/pages/onboarding/fifth-step/fifth-step.component.ts","webpack:///src/app/pages/onboarding/fifth-step/fifth-step.component.html","webpack:///src/app/pages/onboarding/onboarding.component.ts","webpack:///src/app/pages/onboarding/onboarding.component.html","webpack:///src/app/pages/onboarding/onboarding-routing.module.ts"],"names":["displayDefaultIndicatorType","OnboardingModule","nextId","STEPPER_GLOBAL_OPTIONS","_stepper","stepperOptions","this","interacted","_editable","_optional","_completedOverride","_customError","_stepperOptions","_displayDefaultIndicatorType","_showError","showError","stepControl","valid","invalid","selected","reset","_stateChanged","value","c","_getDefaultCompleted","_getDefaultError","_dir","_changeDetectorRef","_elementRef","_document","_destroyed","Subject","_linear","_selectedIndex","selectionChange","_orientation","_groupId","_keyManager","_stepHeader","withWrap","withVerticalOrientation","of","pipe","startWith","_layoutDirection","takeUntil","subscribe","direction","withHorizontalOrientation","updateActiveItem","steps","changes","Math","max","next","complete","selectedIndex","min","length","_updateSelectedItemIndex","forEach","step","i","markForCheck","index","position","state","toArray","isCurrentStep","_isCurrentStep","_getDefaultIndicatorLogic","_getGuidelineLogic","hasError","completed","editable","activeItemIndex","newIndex","stepsArray","emit","previouslySelectedIndex","selectedStep","previouslySelectedStep","_containsFocus","setActiveItem","event","hasModifier","keyCode","manager","setFirstItemActive","preventDefault","setLastItemActive","onKeydown","slice","some","control","pending","optional","stepperElement","nativeElement","focusedElement","activeElement","contains","_steps","Error","_anyControlsInvalidOrPending","indexOf","CdkStepperModule","MatStepperIntl","template","optionalLabel","Éµprov","factory","token","providedIn","MAT_STEPPER_INTL_PROVIDER_FACTORY","parentIntl","_intl","_focusMonitor","changeDetectorRef","super","monitor","_intlSubscription","unsubscribe","stopMonitoring","focusVia","label","active","focus","MatStepperIcon","templateRef","stepper","_errorStateMatcher","form","isErrorState","arguments","animationDone","_iconOverrides","_animationDone","_icons","name","distinctUntilChanged","x","y","fromState","toState","MatHorizontalStepper","labelPosition","MatStepperModule","OnboardingService","zone","fb","franchiseService","onboardingService","styleList","priceRangesList","userName","currentUser","displayName","createForm","getStyles","getPriceRanges","response","styles","firstFormGroup","group","required","minLength","maxLength","price_range","style","franchiseToSave","get","createFranchise","franchise","setfranchiseId","id","continueToNextStep","price_ranges","sendFieldsAlert","submitFirstStep","isEditing","editFranchise","payload","createFranchisePutBody","updateFranchise","franchiseId","run","setStep","status","isFirstStepCompleted","snackBar","BehaviorSubject","isSecondStepCompleted","isThirdStepCompleted","isFourthStepCompleted","isFifthStepCompleted","onboardingStatus","asObservable","data","nextStep","Object","assign","open","duration","restaurantId","localStorage","setItem","JSON","stringify","parse","getItem","mapsAPILoader","restaurantService","coordinatesMatcher","CoordinatesErrorMatcher","hasReturnOptionToBeVisible","secondFormGroup","description","latitude","longitude","address","address_extra","dialCode","phone","phoneNumberValidator","email","validators","pattern","updateOn","max_offered_seats","disabled","max_people_per_order","max_cancel_limit_hours","max_cancel_limit_minutes","reservation_time_minutes","billingOption","emailBilling","websiteBilling","validator","coordinatesValidator","initLocationInput","load","then","autocomplete","google","maps","places","Autocomplete","searchElementRef","types","addListener","place","getPlace","geometry","setValue","formatted_address","location","lat","lng","inltObject","inputFlagSection","dialCodeElement","document","createElement","textContent","setAttribute","flagElement","selectedFlag","childNodes","parentNode","insertBefore","nextSibling","code","getElementById","iso","setValidators","toUpperCase","updateValueAndValidity","setInputDialCodeOnSelectedCountry","createRestaurant","restaurantToSave","restaurant","setRestaurantId","operation","quantity","controlName","actualValue","newValue","coordinatesDoNotSetted","regionCode","phoneNumberUtil","PhoneNumberUtil","getInstance","validNumber","phoneNumber","parseAndKeepRawInput","isValidNumber","e","wrongNumber","submitStep","editRestaurant","submitSecondStep","updateRestaurantDetails","toString","previous","controls","disableInput","enableInput","input","enable","disable","body","coordinates","is_head_office","invoice_email","invoice_url","submitted","touched","typesListAmenities","newExtraControl","compose","zonesListAmenities","extrasListAmenities","parkingsListAmenities","paymentListAmenities","activeNewService","zonesList","typesList","paymentMethodsList","parkingsList","extrasList","extrasAddedByUser","extrasAddedByUserToSave","shouldSaveAmenities","getAmenities","amenities","zones","extras","map","extra","parkings","payment_methods","toLowerCase","extraObject","capitalizeString","is_global","push","checked","splitString","split","charAt","substring","join","splice","amenitiesPayload","toJson","setRestaurantAmenities","isPerDay","isSameSchedule","mondayTimesMatcher","ClosingTimeErrorMatcher","tuesdayTimesMatcher","wednesdayTimesMatcher","thursdayTimesMatcher","fridayTimesMatcher","saturdayTimesMatcher","sundayTimesMatcher","allTimesMatcher","initForm","changeSchedule","fourthFormGroup","opening","closing","wHArray","week_day","opens_at","closes_at","working_hours","typeOfSchedule","openingMonday","closingMonday","openingTuesday","closingTuesday","openingWednesday","closingWednesday","openingThursday","closingThursday","openingFriday","closingFriday","openingSaturday","closingSaturday","openingSunday","closingSunday","openingAll","closingAll","openMonday","openTuesday","openWednesday","openThursday","openFriday","openSaturday","openSunday","mondayTimesValidator","tuesdayTimesValidator","wednesdayTimesValidator","thursdayTimesValidator","fridayTimesValidator","saturdayTimesValidator","sundayTimesValidator","allTimesValidator","selectedSchedule","key","clearValidators","openControlName","closeControlName","mondayClosingTimeIsNotLater","tuesdayClosingTimeIsNotLater","wednesdayClosingTimeIsNotLater","thursdayClosingTimeIsNotLater","fridayClosingTimeIsNotLater","saturdayClosingTimeIsNotLater","sundayClosingTimeIsNotLater","allClosingTimeIsNotLater","schedules","getWorkingHours","setRestaurantSchedules","type","changeTimeValidations","fourthForm","errorName","router","coverImage","brandImages","fifthFormGroup","imageLink","galleryImages","array","galleryImageInput","file","dataTransfer","files","target","fileType","size","reader","FileReader","onload","eImage","img","Image","src","galleryImagesAsFormArray","addGalleryImage","fileValue","result","readAsDataURL","galleryImage","imageIndex","removeAt","createGalleryImage","galleryToSave","getGallerytoSave","setRestaurantGallery","navigate","FormData","append","submitFifthtStep","OnboardingComponent","hasOnboardingToSkipFirstStep","isOnboardingGettingFranchisesInfo","checkFranchiseStatus","getFranchises","responseFranchises","franchises","isFirstStepEditable","isSecondStepEditable","OnboardingRoutingModule"],"mappings":"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","file":"x","sourcesContent":["import { STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';\r\nimport { FirstStepComponent } from './first-step/first-step.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { OnboardingComponent } from './onboarding.component';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { AgmCoreModule } from '@agm/core';\r\nimport { environment } from '@environments/environment';\r\nimport { OnboardingRoutingModule } from './onboarding-routing.module';\r\nimport { NgxMaskModule } from 'ngx-mask';\r\nimport { Ng2TelInputModule } from 'ng2-tel-input';\r\nimport { SortablejsModule } from 'ngx-sortablejs';\r\nimport { AngularFireAuthModule } from '@angular/fire/auth';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { SecondStepComponent } from './second-step/second-step.component';\r\nimport { ThirdStepComponent } from './third-step/third-step.component';\r\nimport { FourthStepComponent } from './fourth-step/fourth-step.component';\r\nimport { FifthStepComponent } from './fifth-step/fifth-step.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    OnboardingComponent,\r\n    FirstStepComponent,\r\n    SecondStepComponent,\r\n    ThirdStepComponent,\r\n    FourthStepComponent,\r\n    FifthStepComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatStepperModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    OnboardingRoutingModule,\r\n    AgmCoreModule.forRoot({\r\n      apiKey: environment.maps.apiKey,\r\n      libraries: ['places'],\r\n    }),\r\n    NgxMaskModule.forRoot(),\r\n    Ng2TelInputModule,\r\n    SortablejsModule.forRoot({ animation: 150 }),\r\n    AngularFireAuthModule,\r\n    MatIconModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: STEPPER_GLOBAL_OPTIONS,\r\n      useValue: { displayDefaultIndicatorType: false },\r\n    },\r\n  ],\r\n})\r\nexport class OnboardingModule {}\r\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, SPACE, ENTER, HOME, END } from '@angular/cdk/keycodes';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Directive, ElementRef, TemplateRef, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, forwardRef, Optional, ContentChild, ViewChild, Input, EventEmitter, ChangeDetectorRef, ContentChildren, Output, HostListener, NgModule } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/stepper/step-header.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkStepHeader {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    /**\n     * Focuses the step header.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n}\nCdkStepHeader.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkStepHeader]',\n                host: {\n                    'role': 'tab',\n                },\n            },] }\n];\n/** @nocollapse */\nCdkStepHeader.ctorParameters = () => [\n    { type: ElementRef }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkStepHeader.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/stepper/step-label.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkStepLabel {\n    /**\n     * @param {?} template\n     */\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n}\nCdkStepLabel.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkStepLabel]',\n            },] }\n];\n/** @nocollapse */\nCdkStepLabel.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    CdkStepLabel.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/stepper/stepper.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID for each stepper component.\n * @type {?}\n */\nlet nextId = 0;\n/**\n * Change event emitted on selection changes.\n */\nclass StepperSelectionEvent {\n}\nif (false) {\n    /**\n     * Index of the step now selected.\n     * @type {?}\n     */\n    StepperSelectionEvent.prototype.selectedIndex;\n    /**\n     * Index of the step previously selected.\n     * @type {?}\n     */\n    StepperSelectionEvent.prototype.previouslySelectedIndex;\n    /**\n     * The step instance now selected.\n     * @type {?}\n     */\n    StepperSelectionEvent.prototype.selectedStep;\n    /**\n     * The step instance previously selected.\n     * @type {?}\n     */\n    StepperSelectionEvent.prototype.previouslySelectedStep;\n}\n/**\n * Enum to represent the different states of the steps.\n * @type {?}\n */\nconst STEP_STATE = {\n    NUMBER: 'number',\n    EDIT: 'edit',\n    DONE: 'done',\n    ERROR: 'error'\n};\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @type {?}\n */\nconst STEPPER_GLOBAL_OPTIONS = new InjectionToken('STEPPER_GLOBAL_OPTIONS');\n/**\n * InjectionToken that can be used to specify the global stepper options.\n * @deprecated Use `STEPPER_GLOBAL_OPTIONS` instead.\n * \\@breaking-change 8.0.0.\n * @type {?}\n */\nconst MAT_STEPPER_GLOBAL_OPTIONS = STEPPER_GLOBAL_OPTIONS;\n/**\n * Configurable options for stepper.\n * @record\n */\nfunction StepperOptions() { }\nif (false) {\n    /**\n     * Whether the stepper should display an error state or not.\n     * Default behavior is assumed to be false.\n     * @type {?|undefined}\n     */\n    StepperOptions.prototype.showError;\n    /**\n     * Whether the stepper should display the default indicator type\n     * or not.\n     * Default behavior is assumed to be true.\n     * @type {?|undefined}\n     */\n    StepperOptions.prototype.displayDefaultIndicatorType;\n}\nclass CdkStep {\n    /**\n     * \\@breaking-change 8.0.0 remove the `?` after `stepperOptions`\n     * @param {?} _stepper\n     * @param {?=} stepperOptions\n     */\n    constructor(_stepper, stepperOptions) {\n        this._stepper = _stepper;\n        /**\n         * Whether user has seen the expanded step content or not.\n         */\n        this.interacted = false;\n        this._editable = true;\n        this._optional = false;\n        this._completedOverride = null;\n        this._customError = null;\n        this._stepperOptions = stepperOptions ? stepperOptions : {};\n        this._displayDefaultIndicatorType = this._stepperOptions.displayDefaultIndicatorType !== false;\n        this._showError = !!this._stepperOptions.showError;\n    }\n    /**\n     * Whether the user can return to this step once it has been marked as completed.\n     * @return {?}\n     */\n    get editable() {\n        return this._editable;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set editable(value) {\n        this._editable = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the completion of step is optional.\n     * @return {?}\n     */\n    get optional() {\n        return this._optional;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set optional(value) {\n        this._optional = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether step is marked as completed.\n     * @return {?}\n     */\n    get completed() {\n        return this._completedOverride == null ? this._getDefaultCompleted() : this._completedOverride;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set completed(value) {\n        this._completedOverride = coerceBooleanProperty(value);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getDefaultCompleted() {\n        return this.stepControl ? this.stepControl.valid && this.interacted : this.interacted;\n    }\n    /**\n     * Whether step has an error.\n     * @return {?}\n     */\n    get hasError() {\n        return this._customError == null ? this._getDefaultError() : this._customError;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasError(value) {\n        this._customError = coerceBooleanProperty(value);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _getDefaultError() {\n        return this.stepControl && this.stepControl.invalid && this.interacted;\n    }\n    /**\n     * Selects this step component.\n     * @return {?}\n     */\n    select() {\n        this._stepper.selected = this;\n    }\n    /**\n     * Resets the step to its initial state. Note that this includes resetting form data.\n     * @return {?}\n     */\n    reset() {\n        this.interacted = false;\n        if (this._completedOverride != null) {\n            this._completedOverride = false;\n        }\n        if (this._customError != null) {\n            this._customError = false;\n        }\n        if (this.stepControl) {\n            this.stepControl.reset();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        // Since basically all inputs of the MatStep get proxied through the view down to the\n        // underlying MatStepHeader, we have to make sure that change detection runs correctly.\n        this._stepper._stateChanged();\n    }\n}\nCdkStep.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-step',\n                exportAs: 'cdkStep',\n                template: '<ng-template><ng-content></ng-content></ng-template>',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\n/** @nocollapse */\nCdkStep.ctorParameters = () => [\n    { type: CdkStepper, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => CdkStepper)),] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [STEPPER_GLOBAL_OPTIONS,] }] }\n];\nCdkStep.propDecorators = {\n    stepLabel: [{ type: ContentChild, args: [CdkStepLabel,] }],\n    content: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    stepControl: [{ type: Input }],\n    label: [{ type: Input }],\n    errorMessage: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    state: [{ type: Input }],\n    editable: [{ type: Input }],\n    optional: [{ type: Input }],\n    completed: [{ type: Input }],\n    hasError: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    CdkStep.ngAcceptInputType_editable;\n    /** @type {?} */\n    CdkStep.ngAcceptInputType_hasError;\n    /** @type {?} */\n    CdkStep.ngAcceptInputType_optional;\n    /** @type {?} */\n    CdkStep.ngAcceptInputType_completed;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkStep.prototype._stepperOptions;\n    /** @type {?} */\n    CdkStep.prototype._showError;\n    /** @type {?} */\n    CdkStep.prototype._displayDefaultIndicatorType;\n    /**\n     * Template for step label if it exists.\n     * @type {?}\n     */\n    CdkStep.prototype.stepLabel;\n    /**\n     * Template for step content.\n     * @type {?}\n     */\n    CdkStep.prototype.content;\n    /**\n     * The top level abstract control of the step.\n     * @type {?}\n     */\n    CdkStep.prototype.stepControl;\n    /**\n     * Whether user has seen the expanded step content or not.\n     * @type {?}\n     */\n    CdkStep.prototype.interacted;\n    /**\n     * Plain text label of the step.\n     * @type {?}\n     */\n    CdkStep.prototype.label;\n    /**\n     * Error message to display when there's an error.\n     * @type {?}\n     */\n    CdkStep.prototype.errorMessage;\n    /**\n     * Aria label for the tab.\n     * @type {?}\n     */\n    CdkStep.prototype.ariaLabel;\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     * @type {?}\n     */\n    CdkStep.prototype.ariaLabelledby;\n    /**\n     * State of the step.\n     * @type {?}\n     */\n    CdkStep.prototype.state;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkStep.prototype._editable;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkStep.prototype._optional;\n    /** @type {?} */\n    CdkStep.prototype._completedOverride;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkStep.prototype._customError;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkStep.prototype._stepper;\n}\nclass CdkStepper {\n    /**\n     * @param {?} _dir\n     * @param {?} _changeDetectorRef\n     * @param {?=} _elementRef\n     * @param {?=} _document\n     */\n    constructor(_dir, _changeDetectorRef, _elementRef, _document) {\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        this._linear = false;\n        this._selectedIndex = 0;\n        /**\n         * Event emitted when the selected step has changed.\n         */\n        this.selectionChange = new EventEmitter();\n        this._orientation = 'horizontal';\n        this._groupId = nextId++;\n        this._document = _document;\n    }\n    /**\n     * The list of step components that the stepper is holding.\n     * @return {?}\n     */\n    get steps() {\n        return this._steps;\n    }\n    /**\n     * Whether the validity of previous steps should be checked or not.\n     * @return {?}\n     */\n    get linear() {\n        return this._linear;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set linear(value) {\n        this._linear = coerceBooleanProperty(value);\n    }\n    /**\n     * The index of the selected step.\n     * @return {?}\n     */\n    get selectedIndex() {\n        return this._selectedIndex;\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    set selectedIndex(index) {\n        /** @type {?} */\n        const newIndex = coerceNumberProperty(index);\n        if (this.steps) {\n            // Ensure that the index can't be out of bounds.\n            if (newIndex < 0 || newIndex > this.steps.length - 1) {\n                throw Error('cdkStepper: Cannot assign out-of-bounds value to `selectedIndex`.');\n            }\n            if (this._selectedIndex != newIndex && !this._anyControlsInvalidOrPending(newIndex) &&\n                (newIndex >= this._selectedIndex || this.steps.toArray()[newIndex].editable)) {\n                this._updateSelectedItemIndex(index);\n            }\n        }\n        else {\n            this._selectedIndex = newIndex;\n        }\n    }\n    /**\n     * The step that is selected.\n     * @return {?}\n     */\n    get selected() {\n        // @breaking-change 8.0.0 Change return type to `CdkStep | undefined`.\n        return this.steps ? this.steps.toArray()[this.selectedIndex] : (/** @type {?} */ (undefined));\n    }\n    /**\n     * @param {?} step\n     * @return {?}\n     */\n    set selected(step) {\n        this.selectedIndex = this.steps ? this.steps.toArray().indexOf(step) : -1;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // Note that while the step headers are content children by default, any components that\n        // extend this one might have them as view children. We initialize the keyboard handling in\n        // AfterViewInit so we're guaranteed for both view and content children to be defined.\n        this._keyManager = new FocusKeyManager(this._stepHeader)\n            .withWrap()\n            .withVerticalOrientation(this._orientation === 'vertical');\n        (this._dir ? ((/** @type {?} */ (this._dir.change))) : of())\n            .pipe(startWith(this._layoutDirection()), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} direction\n         * @return {?}\n         */\n        direction => this._keyManager.withHorizontalOrientation(direction)));\n        this._keyManager.updateActiveItem(this._selectedIndex);\n        this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!this.selected) {\n                this._selectedIndex = Math.max(this._selectedIndex - 1, 0);\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Selects and focuses the next step in list.\n     * @return {?}\n     */\n    next() {\n        this.selectedIndex = Math.min(this._selectedIndex + 1, this.steps.length - 1);\n    }\n    /**\n     * Selects and focuses the previous step in list.\n     * @return {?}\n     */\n    previous() {\n        this.selectedIndex = Math.max(this._selectedIndex - 1, 0);\n    }\n    /**\n     * Resets the stepper to its initial state. Note that this includes clearing form data.\n     * @return {?}\n     */\n    reset() {\n        this._updateSelectedItemIndex(0);\n        this.steps.forEach((/**\n         * @param {?} step\n         * @return {?}\n         */\n        step => step.reset()));\n        this._stateChanged();\n    }\n    /**\n     * Returns a unique id for each step label element.\n     * @param {?} i\n     * @return {?}\n     */\n    _getStepLabelId(i) {\n        return `cdk-step-label-${this._groupId}-${i}`;\n    }\n    /**\n     * Returns unique id for each step content element.\n     * @param {?} i\n     * @return {?}\n     */\n    _getStepContentId(i) {\n        return `cdk-step-content-${this._groupId}-${i}`;\n    }\n    /**\n     * Marks the component to be change detected.\n     * @return {?}\n     */\n    _stateChanged() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns position state of the step with the given index.\n     * @param {?} index\n     * @return {?}\n     */\n    _getAnimationDirection(index) {\n        /** @type {?} */\n        const position = index - this._selectedIndex;\n        if (position < 0) {\n            return this._layoutDirection() === 'rtl' ? 'next' : 'previous';\n        }\n        else if (position > 0) {\n            return this._layoutDirection() === 'rtl' ? 'previous' : 'next';\n        }\n        return 'current';\n    }\n    /**\n     * Returns the type of icon to be displayed.\n     * @param {?} index\n     * @param {?=} state\n     * @return {?}\n     */\n    _getIndicatorType(index, state = STEP_STATE.NUMBER) {\n        /** @type {?} */\n        const step = this.steps.toArray()[index];\n        /** @type {?} */\n        const isCurrentStep = this._isCurrentStep(index);\n        return step._displayDefaultIndicatorType ? this._getDefaultIndicatorLogic(step, isCurrentStep) :\n            this._getGuidelineLogic(step, isCurrentStep, state);\n    }\n    /**\n     * @private\n     * @param {?} step\n     * @param {?} isCurrentStep\n     * @return {?}\n     */\n    _getDefaultIndicatorLogic(step, isCurrentStep) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (!step.completed || isCurrentStep) {\n            return STEP_STATE.NUMBER;\n        }\n        else {\n            return step.editable ? STEP_STATE.EDIT : STEP_STATE.DONE;\n        }\n    }\n    /**\n     * @private\n     * @param {?} step\n     * @param {?} isCurrentStep\n     * @param {?=} state\n     * @return {?}\n     */\n    _getGuidelineLogic(step, isCurrentStep, state = STEP_STATE.NUMBER) {\n        if (step._showError && step.hasError && !isCurrentStep) {\n            return STEP_STATE.ERROR;\n        }\n        else if (step.completed && !isCurrentStep) {\n            return STEP_STATE.DONE;\n        }\n        else if (step.completed && isCurrentStep) {\n            return state;\n        }\n        else if (step.editable && isCurrentStep) {\n            return STEP_STATE.EDIT;\n        }\n        else {\n            return state;\n        }\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _isCurrentStep(index) {\n        return this._selectedIndex === index;\n    }\n    /**\n     * Returns the index of the currently-focused step header.\n     * @return {?}\n     */\n    _getFocusIndex() {\n        return this._keyManager ? this._keyManager.activeItemIndex : this._selectedIndex;\n    }\n    /**\n     * @private\n     * @param {?} newIndex\n     * @return {?}\n     */\n    _updateSelectedItemIndex(newIndex) {\n        /** @type {?} */\n        const stepsArray = this.steps.toArray();\n        this.selectionChange.emit({\n            selectedIndex: newIndex,\n            previouslySelectedIndex: this._selectedIndex,\n            selectedStep: stepsArray[newIndex],\n            previouslySelectedStep: stepsArray[this._selectedIndex],\n        });\n        // If focus is inside the stepper, move it to the next header, otherwise it may become\n        // lost when the active step content is hidden. We can't be more granular with the check\n        // (e.g. checking whether focus is inside the active step), because we don't have a\n        // reference to the elements that are rendering out the content.\n        this._containsFocus() ? this._keyManager.setActiveItem(newIndex) :\n            this._keyManager.updateActiveItem(newIndex);\n        this._selectedIndex = newIndex;\n        this._stateChanged();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onKeydown(event) {\n        /** @type {?} */\n        const hasModifier = hasModifierKey(event);\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (manager.activeItemIndex != null && !hasModifier &&\n            (keyCode === SPACE || keyCode === ENTER)) {\n            this.selectedIndex = manager.activeItemIndex;\n            event.preventDefault();\n        }\n        else if (keyCode === HOME) {\n            manager.setFirstItemActive();\n            event.preventDefault();\n        }\n        else if (keyCode === END) {\n            manager.setLastItemActive();\n            event.preventDefault();\n        }\n        else {\n            manager.onKeydown(event);\n        }\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _anyControlsInvalidOrPending(index) {\n        /** @type {?} */\n        const steps = this.steps.toArray();\n        steps[this._selectedIndex].interacted = true;\n        if (this._linear && index >= 0) {\n            return steps.slice(0, index).some((/**\n             * @param {?} step\n             * @return {?}\n             */\n            step => {\n                /** @type {?} */\n                const control = step.stepControl;\n                /** @type {?} */\n                const isIncomplete = control ? (control.invalid || control.pending || !step.interacted) : !step.completed;\n                return isIncomplete && !step.optional && !step._completedOverride;\n            }));\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _layoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Checks whether the stepper contains the focused element.\n     * @private\n     * @return {?}\n     */\n    _containsFocus() {\n        if (!this._document || !this._elementRef) {\n            return false;\n        }\n        /** @type {?} */\n        const stepperElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        const focusedElement = this._document.activeElement;\n        return stepperElement === focusedElement || stepperElement.contains(focusedElement);\n    }\n}\nCdkStepper.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkStepper]',\n                exportAs: 'cdkStepper',\n            },] }\n];\n/** @nocollapse */\nCdkStepper.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkStepper.propDecorators = {\n    _steps: [{ type: ContentChildren, args: [CdkStep, { descendants: true },] }],\n    _stepHeader: [{ type: ContentChildren, args: [CdkStepHeader, { descendants: true },] }],\n    linear: [{ type: Input }],\n    selectedIndex: [{ type: Input }],\n    selected: [{ type: Input }],\n    selectionChange: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    CdkStepper.ngAcceptInputType_editable;\n    /** @type {?} */\n    CdkStepper.ngAcceptInputType_optional;\n    /** @type {?} */\n    CdkStepper.ngAcceptInputType_completed;\n    /** @type {?} */\n    CdkStepper.ngAcceptInputType_hasError;\n    /** @type {?} */\n    CdkStepper.ngAcceptInputType_linear;\n    /** @type {?} */\n    CdkStepper.ngAcceptInputType_selectedIndex;\n    /**\n     * Emits when the component is destroyed.\n     * @type {?}\n     * @protected\n     */\n    CdkStepper.prototype._destroyed;\n    /**\n     * Used for managing keyboard focus.\n     * @type {?}\n     * @private\n     */\n    CdkStepper.prototype._keyManager;\n    /**\n     * \\@breaking-change 8.0.0 Remove `| undefined` once the `_document`\n     * constructor param is required.\n     * @type {?}\n     * @private\n     */\n    CdkStepper.prototype._document;\n    /**\n     * The list of step components that the stepper is holding.\n     * @deprecated use `steps` instead\n     * \\@breaking-change 9.0.0 remove this property\n     * @type {?}\n     */\n    CdkStepper.prototype._steps;\n    /**\n     * The list of step headers of the steps in the stepper.\n     * @deprecated Type to be changed to `QueryList<CdkStepHeader>`.\n     * \\@breaking-change 8.0.0\n     * @type {?}\n     */\n    CdkStepper.prototype._stepHeader;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkStepper.prototype._linear;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkStepper.prototype._selectedIndex;\n    /**\n     * Event emitted when the selected step has changed.\n     * @type {?}\n     */\n    CdkStepper.prototype.selectionChange;\n    /**\n     * Used to track unique ID for each stepper component.\n     * @type {?}\n     */\n    CdkStepper.prototype._groupId;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkStepper.prototype._orientation;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkStepper.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkStepper.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkStepper.prototype._elementRef;\n}\n/**\n * Simplified representation of an \"AbstractControl\" from \\@angular/forms.\n * Used to avoid having to bring in \\@angular/forms for a single optional interface.\n * \\@docs-private\n * @record\n */\nfunction AbstractControlLike() { }\nif (false) {\n    /** @type {?} */\n    AbstractControlLike.prototype.asyncValidator;\n    /** @type {?} */\n    AbstractControlLike.prototype.dirty;\n    /** @type {?} */\n    AbstractControlLike.prototype.disabled;\n    /** @type {?} */\n    AbstractControlLike.prototype.enabled;\n    /** @type {?} */\n    AbstractControlLike.prototype.errors;\n    /** @type {?} */\n    AbstractControlLike.prototype.invalid;\n    /** @type {?} */\n    AbstractControlLike.prototype.parent;\n    /** @type {?} */\n    AbstractControlLike.prototype.pending;\n    /** @type {?} */\n    AbstractControlLike.prototype.pristine;\n    /** @type {?} */\n    AbstractControlLike.prototype.root;\n    /** @type {?} */\n    AbstractControlLike.prototype.status;\n    /** @type {?} */\n    AbstractControlLike.prototype.statusChanges;\n    /** @type {?} */\n    AbstractControlLike.prototype.touched;\n    /** @type {?} */\n    AbstractControlLike.prototype.untouched;\n    /** @type {?} */\n    AbstractControlLike.prototype.updateOn;\n    /** @type {?} */\n    AbstractControlLike.prototype.valid;\n    /** @type {?} */\n    AbstractControlLike.prototype.validator;\n    /** @type {?} */\n    AbstractControlLike.prototype.value;\n    /** @type {?} */\n    AbstractControlLike.prototype.valueChanges;\n    /**\n     * @return {?}\n     */\n    AbstractControlLike.prototype.clearAsyncValidators = function () { };\n    /**\n     * @return {?}\n     */\n    AbstractControlLike.prototype.clearValidators = function () { };\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControlLike.prototype.disable = function (opts) { };\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControlLike.prototype.enable = function (opts) { };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    AbstractControlLike.prototype.get = function (path) { };\n    /**\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlLike.prototype.getError = function (errorCode, path) { };\n    /**\n     * @param {?} errorCode\n     * @param {?=} path\n     * @return {?}\n     */\n    AbstractControlLike.prototype.hasError = function (errorCode, path) { };\n    /**\n     * @return {?}\n     */\n    AbstractControlLike.prototype.markAllAsTouched = function () { };\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControlLike.prototype.markAsDirty = function (opts) { };\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControlLike.prototype.markAsPending = function (opts) { };\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControlLike.prototype.markAsPristine = function (opts) { };\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControlLike.prototype.markAsTouched = function (opts) { };\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControlLike.prototype.markAsUntouched = function (opts) { };\n    /**\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControlLike.prototype.patchValue = function (value, options) { };\n    /**\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControlLike.prototype.reset = function (value, options) { };\n    /**\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControlLike.prototype.setAsyncValidators = function (newValidator) { };\n    /**\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControlLike.prototype.setErrors = function (errors, opts) { };\n    /**\n     * @param {?} parent\n     * @return {?}\n     */\n    AbstractControlLike.prototype.setParent = function (parent) { };\n    /**\n     * @param {?} newValidator\n     * @return {?}\n     */\n    AbstractControlLike.prototype.setValidators = function (newValidator) { };\n    /**\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControlLike.prototype.setValue = function (value, options) { };\n    /**\n     * @param {?=} opts\n     * @return {?}\n     */\n    AbstractControlLike.prototype.updateValueAndValidity = function (opts) { };\n    /**\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControlLike.prototype.patchValue = function (value, options) { };\n    /**\n     * @param {?=} formState\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControlLike.prototype.reset = function (formState, options) { };\n    /**\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControlLike.prototype.setValue = function (value, options) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/stepper/stepper-button.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nclass CdkStepperNext {\n    /**\n     * @param {?} _stepper\n     */\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /**\n         * Type of the next button. Defaults to \"submit\" if not specified.\n         */\n        this.type = 'submit';\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @return {?}\n     */\n    _handleClick() {\n        this._stepper.next();\n    }\n}\nCdkStepperNext.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[cdkStepperNext]',\n                host: {\n                    '[type]': 'type',\n                }\n            },] }\n];\n/** @nocollapse */\nCdkStepperNext.ctorParameters = () => [\n    { type: CdkStepper }\n];\nCdkStepperNext.propDecorators = {\n    type: [{ type: Input }],\n    _handleClick: [{ type: HostListener, args: ['click',] }]\n};\nif (false) {\n    /**\n     * Type of the next button. Defaults to \"submit\" if not specified.\n     * @type {?}\n     */\n    CdkStepperNext.prototype.type;\n    /** @type {?} */\n    CdkStepperNext.prototype._stepper;\n}\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nclass CdkStepperPrevious {\n    /**\n     * @param {?} _stepper\n     */\n    constructor(_stepper) {\n        this._stepper = _stepper;\n        /**\n         * Type of the previous button. Defaults to \"button\" if not specified.\n         */\n        this.type = 'button';\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @return {?}\n     */\n    _handleClick() {\n        this._stepper.previous();\n    }\n}\nCdkStepperPrevious.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[cdkStepperPrevious]',\n                host: {\n                    '[type]': 'type',\n                }\n            },] }\n];\n/** @nocollapse */\nCdkStepperPrevious.ctorParameters = () => [\n    { type: CdkStepper }\n];\nCdkStepperPrevious.propDecorators = {\n    type: [{ type: Input }],\n    _handleClick: [{ type: HostListener, args: ['click',] }]\n};\nif (false) {\n    /**\n     * Type of the previous button. Defaults to \"button\" if not specified.\n     * @type {?}\n     */\n    CdkStepperPrevious.prototype.type;\n    /** @type {?} */\n    CdkStepperPrevious.prototype._stepper;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/stepper/stepper-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass CdkStepperModule {\n}\nCdkStepperModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [BidiModule, CommonModule],\n                exports: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ],\n                declarations: [\n                    CdkStep,\n                    CdkStepper,\n                    CdkStepHeader,\n                    CdkStepLabel,\n                    CdkStepperNext,\n                    CdkStepperPrevious,\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/stepper/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkStep, CdkStepHeader, CdkStepLabel, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious, MAT_STEPPER_GLOBAL_OPTIONS, STEPPER_GLOBAL_OPTIONS, STEP_STATE, StepperSelectionEvent };\n//# sourceMappingURL=stepper.js.map\n","import { PortalModule } from '@angular/cdk/portal';\nimport { CdkStepLabel, CdkStepHeader, CdkStep, STEPPER_GLOBAL_OPTIONS, CdkStepper, CdkStepperNext, CdkStepperPrevious, CdkStepperModule } from '@angular/cdk/stepper';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Directive, Injectable, ÉµÉµdefineInjectable, Optional, SkipSelf, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Input, TemplateRef, Inject, forwardRef, ContentChild, EventEmitter, ViewChildren, ContentChildren, Output, NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { ErrorStateMatcher, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Subject } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/stepper/step-label.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStepLabel extends CdkStepLabel {\n}\nMatStepLabel.decorators = [\n    { type: Directive, args: [{\n                selector: '[matStepLabel]',\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/stepper/stepper-intl.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Stepper data that is required for internationalization.\n */\nclass MatStepperIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * Label that is rendered below optional steps.\n         */\n        this.optionalLabel = 'Optional';\n    }\n}\nMatStepperIntl.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */ MatStepperIntl.Éµprov = ÉµÉµdefineInjectable({ factory: function MatStepperIntl_Factory() { return new MatStepperIntl(); }, token: MatStepperIntl, providedIn: \"root\" });\nif (false) {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     * @type {?}\n     */\n    MatStepperIntl.prototype.changes;\n    /**\n     * Label that is rendered below optional steps.\n     * @type {?}\n     */\n    MatStepperIntl.prototype.optionalLabel;\n}\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatStepperIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_STEPPER_INTL_PROVIDER = {\n    provide: MatStepperIntl,\n    deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n    useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/stepper/step-header.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStepHeader extends CdkStepHeader {\n    /**\n     * @param {?} _intl\n     * @param {?} _focusMonitor\n     * @param {?} _elementRef\n     * @param {?} changeDetectorRef\n     */\n    constructor(_intl, _focusMonitor, _elementRef, changeDetectorRef) {\n        super(_elementRef);\n        this._intl = _intl;\n        this._focusMonitor = _focusMonitor;\n        _focusMonitor.monitor(_elementRef, true);\n        this._intlSubscription = _intl.changes.subscribe((/**\n         * @return {?}\n         */\n        () => changeDetectorRef.markForCheck()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._intlSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Focuses the step header.\n     * @return {?}\n     */\n    focus() {\n        this._focusMonitor.focusVia(this._elementRef, 'program');\n    }\n    /**\n     * Returns string label of given step if it is a text label.\n     * @return {?}\n     */\n    _stringLabel() {\n        return this.label instanceof MatStepLabel ? null : this.label;\n    }\n    /**\n     * Returns MatStepLabel if the label of given step is a template label.\n     * @return {?}\n     */\n    _templateLabel() {\n        return this.label instanceof MatStepLabel ? this.label : null;\n    }\n    /**\n     * Returns the host HTML element.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /**\n     * Template context variables that are exposed to the `matStepperIcon` instances.\n     * @return {?}\n     */\n    _getIconContext() {\n        return {\n            index: this.index,\n            active: this.active,\n            optional: this.optional\n        };\n    }\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n    _getDefaultTextForState(state) {\n        if (state == 'number') {\n            return `${this.index + 1}`;\n        }\n        if (state == 'edit') {\n            return 'create';\n        }\n        if (state == 'error') {\n            return 'warning';\n        }\n        return state;\n    }\n}\nMatStepHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-step-header',\n                template: \"<div class=\\\"mat-step-header-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"_getHostElement()\\\"\\n     [matRippleDisabled]=\\\"disableRipple\\\"></div>\\n\\n<div class=\\\"mat-step-icon-state-{{state}} mat-step-icon\\\" [class.mat-step-icon-selected]=\\\"selected\\\">\\n  <div class=\\\"mat-step-icon-content\\\" [ngSwitch]=\\\"!!(iconOverrides && iconOverrides[state])\\\">\\n    <ng-container\\n      *ngSwitchCase=\\\"true\\\"\\n      [ngTemplateOutlet]=\\\"iconOverrides[state]\\\"\\n      [ngTemplateOutletContext]=\\\"_getIconContext()\\\"></ng-container>\\n    <ng-container *ngSwitchDefault [ngSwitch]=\\\"state\\\">\\n      <span *ngSwitchCase=\\\"'number'\\\">{{_getDefaultTextForState(state)}}</span>\\n      <mat-icon *ngSwitchDefault>{{_getDefaultTextForState(state)}}</mat-icon>\\n    </ng-container>\\n  </div>\\n</div>\\n<div class=\\\"mat-step-label\\\"\\n     [class.mat-step-label-active]=\\\"active\\\"\\n     [class.mat-step-label-selected]=\\\"selected\\\"\\n     [class.mat-step-label-error]=\\\"state == 'error'\\\">\\n  <!-- If there is a label template, use it. -->\\n  <ng-container *ngIf=\\\"_templateLabel()\\\" [ngTemplateOutlet]=\\\"_templateLabel()!.template\\\">\\n  </ng-container>\\n  <!-- If there is no label template, fall back to the text label. -->\\n  <div class=\\\"mat-step-text-label\\\" *ngIf=\\\"_stringLabel()\\\">{{label}}</div>\\n\\n  <div class=\\\"mat-step-optional\\\" *ngIf=\\\"optional && state != 'error'\\\">{{_intl.optionalLabel}}</div>\\n  <div class=\\\"mat-step-sub-label-error\\\" *ngIf=\\\"state == 'error'\\\">{{errorMessage}}</div>\\n</div>\\n\\n\",\n                host: {\n                    'class': 'mat-step-header',\n                    'role': 'tab',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-step-header{overflow:hidden;outline:none;cursor:pointer;position:relative;box-sizing:content-box;-webkit-tap-highlight-color:transparent}.mat-step-optional,.mat-step-sub-label-error{font-size:12px}.mat-step-icon{border-radius:50%;height:24px;width:24px;flex-shrink:0;position:relative}.mat-step-icon-content,.mat-step-icon .mat-icon{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}.mat-step-icon .mat-icon{font-size:16px;height:16px;width:16px}.mat-step-icon-state-error .mat-icon{font-size:24px;height:24px;width:24px}.mat-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle}.mat-step-text-label{text-overflow:ellipsis;overflow:hidden}.mat-step-header .mat-step-header-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatStepHeader.ctorParameters = () => [\n    { type: MatStepperIntl },\n    { type: FocusMonitor },\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\nMatStepHeader.propDecorators = {\n    state: [{ type: Input }],\n    label: [{ type: Input }],\n    errorMessage: [{ type: Input }],\n    iconOverrides: [{ type: Input }],\n    index: [{ type: Input }],\n    selected: [{ type: Input }],\n    active: [{ type: Input }],\n    optional: [{ type: Input }],\n    disableRipple: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatStepHeader.prototype._intlSubscription;\n    /**\n     * State of the given step.\n     * @type {?}\n     */\n    MatStepHeader.prototype.state;\n    /**\n     * Label of the given step.\n     * @type {?}\n     */\n    MatStepHeader.prototype.label;\n    /**\n     * Error message to display when there's an error.\n     * @type {?}\n     */\n    MatStepHeader.prototype.errorMessage;\n    /**\n     * Overrides for the header icons, passed in via the stepper.\n     * @type {?}\n     */\n    MatStepHeader.prototype.iconOverrides;\n    /**\n     * Index of the given step.\n     * @type {?}\n     */\n    MatStepHeader.prototype.index;\n    /**\n     * Whether the given step is selected.\n     * @type {?}\n     */\n    MatStepHeader.prototype.selected;\n    /**\n     * Whether the given step label is active.\n     * @type {?}\n     */\n    MatStepHeader.prototype.active;\n    /**\n     * Whether the given step is optional.\n     * @type {?}\n     */\n    MatStepHeader.prototype.optional;\n    /**\n     * Whether the ripple should be disabled.\n     * @type {?}\n     */\n    MatStepHeader.prototype.disableRipple;\n    /** @type {?} */\n    MatStepHeader.prototype._intl;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatStepHeader.prototype._focusMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/stepper/stepper-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material steppers.\n * \\@docs-private\n * @type {?}\n */\nconst matStepperAnimations = {\n    /**\n     * Animation that transitions the step along the X axis in a horizontal stepper.\n     */\n    horizontalStepTransition: trigger('stepTransition', [\n        state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),\n        state('current', style({ transform: 'none', visibility: 'visible' })),\n        state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),\n        transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ]),\n    /**\n     * Animation that transitions the step along the Y axis in a vertical stepper.\n     */\n    verticalStepTransition: trigger('stepTransition', [\n        state('previous', style({ height: '0px', visibility: 'hidden' })),\n        state('next', style({ height: '0px', visibility: 'hidden' })),\n        state('current', style({ height: '*', visibility: 'visible' })),\n        transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/stepper/stepper-icon.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Template context available to an attached `matStepperIcon`.\n * @record\n */\nfunction MatStepperIconContext() { }\nif (false) {\n    /**\n     * Index of the step.\n     * @type {?}\n     */\n    MatStepperIconContext.prototype.index;\n    /**\n     * Whether the step is currently active.\n     * @type {?}\n     */\n    MatStepperIconContext.prototype.active;\n    /**\n     * Whether the step is optional.\n     * @type {?}\n     */\n    MatStepperIconContext.prototype.optional;\n}\n/**\n * Template to be used to override the icons inside the step header.\n */\nclass MatStepperIcon {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nMatStepperIcon.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[matStepperIcon]',\n            },] }\n];\n/** @nocollapse */\nMatStepperIcon.ctorParameters = () => [\n    { type: TemplateRef }\n];\nMatStepperIcon.propDecorators = {\n    name: [{ type: Input, args: ['matStepperIcon',] }]\n};\nif (false) {\n    /**\n     * Name of the icon to be overridden.\n     * @type {?}\n     */\n    MatStepperIcon.prototype.name;\n    /** @type {?} */\n    MatStepperIcon.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/stepper/stepper.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStep extends CdkStep {\n    /**\n     * \\@breaking-change 8.0.0 remove the `?` after `stepperOptions`\n     * @param {?} stepper\n     * @param {?} _errorStateMatcher\n     * @param {?=} stepperOptions\n     */\n    constructor(stepper, _errorStateMatcher, stepperOptions) {\n        super(stepper, stepperOptions);\n        this._errorStateMatcher = _errorStateMatcher;\n    }\n    /**\n     * Custom error state matcher that additionally checks for validity of interacted form.\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    isErrorState(control, form) {\n        /** @type {?} */\n        const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n        // Custom error state checks for the validity of form that is not submitted or touched\n        // since user can trigger a form change by calling for another step without directly\n        // interacting with the current form.\n        /** @type {?} */\n        const customErrorState = !!(control && control.invalid && this.interacted);\n        return originalErrorState || customErrorState;\n    }\n}\nMatStep.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-step',\n                template: \"<ng-template><ng-content></ng-content></ng-template>\\n\",\n                providers: [\n                    { provide: ErrorStateMatcher, useExisting: MatStep },\n                    { provide: CdkStep, useExisting: MatStep },\n                ],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matStep',\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\n/** @nocollapse */\nMatStep.ctorParameters = () => [\n    { type: MatStepper, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatStepper)),] }] },\n    { type: ErrorStateMatcher, decorators: [{ type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [STEPPER_GLOBAL_OPTIONS,] }] }\n];\nMatStep.propDecorators = {\n    stepLabel: [{ type: ContentChild, args: [MatStepLabel,] }]\n};\nif (false) {\n    /**\n     * Content for step label given by `<ng-template matStepLabel>`.\n     * @type {?}\n     */\n    MatStep.prototype.stepLabel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatStep.prototype._errorStateMatcher;\n}\nclass MatStepper extends CdkStepper {\n    constructor() {\n        super(...arguments);\n        /**\n         * Event emitted when the current step is done transitioning in.\n         */\n        this.animationDone = new EventEmitter();\n        /**\n         * Consumer-specified template-refs to be used to override the header icons.\n         */\n        this._iconOverrides = {};\n        /**\n         * Stream of animation `done` events when the body expands/collapses.\n         */\n        this._animationDone = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._icons.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ name, templateRef }) => this._iconOverrides[name] = templateRef));\n        // Mark the component for change detection whenever the content children query changes\n        this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._stateChanged();\n        }));\n        this._animationDone.pipe(\n        // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n        // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n        // See https://github.com/angular/angular/issues/24084\n        distinctUntilChanged((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => x.fromState === y.fromState && x.toState === y.toState)), takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (((/** @type {?} */ (event.toState))) === 'current') {\n                this.animationDone.emit();\n            }\n        }));\n    }\n}\nMatStepper.decorators = [\n    { type: Directive, args: [{ selector: '[matStepper]', providers: [{ provide: CdkStepper, useExisting: MatStepper }] },] }\n];\nMatStepper.propDecorators = {\n    _stepHeader: [{ type: ViewChildren, args: [MatStepHeader,] }],\n    _steps: [{ type: ContentChildren, args: [MatStep, { descendants: true },] }],\n    _icons: [{ type: ContentChildren, args: [MatStepperIcon, { descendants: true },] }],\n    animationDone: [{ type: Output }],\n    disableRipple: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatStepper.ngAcceptInputType_editable;\n    /** @type {?} */\n    MatStepper.ngAcceptInputType_optional;\n    /** @type {?} */\n    MatStepper.ngAcceptInputType_completed;\n    /** @type {?} */\n    MatStepper.ngAcceptInputType_hasError;\n    /**\n     * The list of step headers of the steps in the stepper.\n     * @type {?}\n     */\n    MatStepper.prototype._stepHeader;\n    /**\n     * Steps that the stepper holds.\n     * @type {?}\n     */\n    MatStepper.prototype._steps;\n    /**\n     * Custom icon overrides passed in by the consumer.\n     * @type {?}\n     */\n    MatStepper.prototype._icons;\n    /**\n     * Event emitted when the current step is done transitioning in.\n     * @type {?}\n     */\n    MatStepper.prototype.animationDone;\n    /**\n     * Whether ripples should be disabled for the step headers.\n     * @type {?}\n     */\n    MatStepper.prototype.disableRipple;\n    /**\n     * Consumer-specified template-refs to be used to override the header icons.\n     * @type {?}\n     */\n    MatStepper.prototype._iconOverrides;\n    /**\n     * Stream of animation `done` events when the body expands/collapses.\n     * @type {?}\n     */\n    MatStepper.prototype._animationDone;\n}\nclass MatHorizontalStepper extends MatStepper {\n    constructor() {\n        super(...arguments);\n        /**\n         * Whether the label should display in bottom or end position.\n         */\n        this.labelPosition = 'end';\n    }\n}\nMatHorizontalStepper.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-horizontal-stepper',\n                exportAs: 'matHorizontalStepper',\n                template: \"<div class=\\\"mat-horizontal-stepper-header-container\\\">\\n  <ng-container *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\">\\n    <mat-step-header class=\\\"mat-horizontal-stepper-header\\\"\\n                     (click)=\\\"step.select()\\\"\\n                     (keydown)=\\\"_onKeydown($event)\\\"\\n                     [tabIndex]=\\\"_getFocusIndex() === i ? 0 : -1\\\"\\n                     [id]=\\\"_getStepLabelId(i)\\\"\\n                     [attr.aria-posinset]=\\\"i + 1\\\"\\n                     [attr.aria-setsize]=\\\"steps.length\\\"\\n                     [attr.aria-controls]=\\\"_getStepContentId(i)\\\"\\n                     [attr.aria-selected]=\\\"selectedIndex == i\\\"\\n                     [attr.aria-label]=\\\"step.ariaLabel || null\\\"\\n                     [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\"\\n                     [index]=\\\"i\\\"\\n                     [state]=\\\"_getIndicatorType(i, step.state)\\\"\\n                     [label]=\\\"step.stepLabel || step.label\\\"\\n                     [selected]=\\\"selectedIndex === i\\\"\\n                     [active]=\\\"step.completed || selectedIndex === i || !linear\\\"\\n                     [optional]=\\\"step.optional\\\"\\n                     [errorMessage]=\\\"step.errorMessage\\\"\\n                     [iconOverrides]=\\\"_iconOverrides\\\"\\n                     [disableRipple]=\\\"disableRipple\\\">\\n    </mat-step-header>\\n    <div *ngIf=\\\"!isLast\\\" class=\\\"mat-stepper-horizontal-line\\\"></div>\\n  </ng-container>\\n</div>\\n\\n<div class=\\\"mat-horizontal-content-container\\\">\\n  <div *ngFor=\\\"let step of steps; let i = index\\\"\\n       [attr.tabindex]=\\\"selectedIndex === i ? 0 : null\\\"\\n       class=\\\"mat-horizontal-stepper-content\\\" role=\\\"tabpanel\\\"\\n       [@stepTransition]=\\\"_getAnimationDirection(i)\\\"\\n       (@stepTransition.done)=\\\"_animationDone.next($event)\\\"\\n       [id]=\\\"_getStepContentId(i)\\\"\\n       [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\"\\n       [attr.aria-expanded]=\\\"selectedIndex === i\\\">\\n    <ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container>\\n  </div>\\n</div>\\n\",\n                inputs: ['selectedIndex'],\n                host: {\n                    'class': 'mat-stepper-horizontal',\n                    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n                    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n                    'aria-orientation': 'horizontal',\n                    'role': 'tablist',\n                },\n                animations: [matStepperAnimations.horizontalStepTransition],\n                providers: [\n                    { provide: MatStepper, useExisting: MatHorizontalStepper },\n                    { provide: CdkStepper, useExisting: MatHorizontalStepper }\n                ],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative;top:36px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;top:36px;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto;padding:24px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;padding:24px;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;top:-16px;bottom:-16px;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\\n\"]\n            }] }\n];\nMatHorizontalStepper.propDecorators = {\n    labelPosition: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatHorizontalStepper.ngAcceptInputType_editable;\n    /** @type {?} */\n    MatHorizontalStepper.ngAcceptInputType_optional;\n    /** @type {?} */\n    MatHorizontalStepper.ngAcceptInputType_completed;\n    /** @type {?} */\n    MatHorizontalStepper.ngAcceptInputType_hasError;\n    /**\n     * Whether the label should display in bottom or end position.\n     * @type {?}\n     */\n    MatHorizontalStepper.prototype.labelPosition;\n}\nclass MatVerticalStepper extends MatStepper {\n    /**\n     * @param {?} dir\n     * @param {?} changeDetectorRef\n     * @param {?=} elementRef\n     * @param {?=} _document\n     */\n    constructor(dir, changeDetectorRef, \n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef, _document) {\n        super(dir, changeDetectorRef, elementRef, _document);\n        this._orientation = 'vertical';\n    }\n}\nMatVerticalStepper.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-vertical-stepper',\n                exportAs: 'matVerticalStepper',\n                template: \"<div class=\\\"mat-step\\\" *ngFor=\\\"let step of steps; let i = index; let isLast = last\\\">\\n  <mat-step-header class=\\\"mat-vertical-stepper-header\\\"\\n                   (click)=\\\"step.select()\\\"\\n                   (keydown)=\\\"_onKeydown($event)\\\"\\n                   [tabIndex]=\\\"_getFocusIndex() == i ? 0 : -1\\\"\\n                   [id]=\\\"_getStepLabelId(i)\\\"\\n                   [attr.aria-posinset]=\\\"i + 1\\\"\\n                   [attr.aria-setsize]=\\\"steps.length\\\"\\n                   [attr.aria-controls]=\\\"_getStepContentId(i)\\\"\\n                   [attr.aria-selected]=\\\"selectedIndex === i\\\"\\n                   [attr.aria-label]=\\\"step.ariaLabel || null\\\"\\n                   [attr.aria-labelledby]=\\\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\\\"\\n                   [index]=\\\"i\\\"\\n                   [state]=\\\"_getIndicatorType(i, step.state)\\\"\\n                   [label]=\\\"step.stepLabel || step.label\\\"\\n                   [selected]=\\\"selectedIndex === i\\\"\\n                   [active]=\\\"step.completed || selectedIndex === i || !linear\\\"\\n                   [optional]=\\\"step.optional\\\"\\n                   [errorMessage]=\\\"step.errorMessage\\\"\\n                   [iconOverrides]=\\\"_iconOverrides\\\"\\n                   [disableRipple]=\\\"disableRipple\\\">\\n  </mat-step-header>\\n\\n  <div class=\\\"mat-vertical-content-container\\\" [class.mat-stepper-vertical-line]=\\\"!isLast\\\">\\n    <div class=\\\"mat-vertical-stepper-content\\\" role=\\\"tabpanel\\\"\\n         [attr.tabindex]=\\\"selectedIndex === i ? 0 : null\\\"\\n         [@stepTransition]=\\\"_getAnimationDirection(i)\\\"\\n         (@stepTransition.done)=\\\"_animationDone.next($event)\\\"\\n         [id]=\\\"_getStepContentId(i)\\\"\\n         [attr.aria-labelledby]=\\\"_getStepLabelId(i)\\\"\\n         [attr.aria-expanded]=\\\"selectedIndex === i\\\">\\n      <div class=\\\"mat-vertical-content\\\">\\n        <ng-container [ngTemplateOutlet]=\\\"step.content\\\"></ng-container>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['selectedIndex'],\n                host: {\n                    'class': 'mat-stepper-vertical',\n                    'aria-orientation': 'vertical',\n                    'role': 'tablist',\n                },\n                animations: [matStepperAnimations.verticalStepTransition],\n                providers: [\n                    { provide: MatStepper, useExisting: MatVerticalStepper },\n                    { provide: CdkStepper, useExisting: MatVerticalStepper }\n                ],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-stepper-vertical,.mat-stepper-horizontal{display:block}.mat-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header-container{align-items:flex-start}.mat-stepper-horizontal-line{border-top-width:1px;border-top-style:solid;flex:auto;height:0;margin:0 -16px;min-width:32px}.mat-stepper-label-position-bottom .mat-stepper-horizontal-line{margin:0;min-width:0;position:relative;top:36px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before,.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{border-top-width:1px;border-top-style:solid;content:\\\"\\\";display:inline-block;height:0;position:absolute;top:36px;width:calc(50% - 20px)}.mat-horizontal-stepper-header{display:flex;height:72px;overflow:hidden;align-items:center;padding:0 24px}.mat-horizontal-stepper-header .mat-step-icon{margin-right:8px;flex:none}[dir=rtl] .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:8px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header{box-sizing:border-box;flex-direction:column;height:auto;padding:24px}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::after,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::after{right:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:first-child)::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:not(:last-child)::before{left:0}[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:last-child::before,[dir=rtl] .mat-stepper-label-position-bottom .mat-horizontal-stepper-header:first-child::after{display:none}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-icon{margin-right:0;margin-left:0}.mat-stepper-label-position-bottom .mat-horizontal-stepper-header .mat-step-label{padding:16px 0 0 0;text-align:center;width:100%}.mat-vertical-stepper-header{display:flex;align-items:center;padding:24px;height:24px}.mat-vertical-stepper-header .mat-step-icon{margin-right:12px}[dir=rtl] .mat-vertical-stepper-header .mat-step-icon{margin-right:0;margin-left:12px}.mat-horizontal-stepper-content{outline:0}.mat-horizontal-stepper-content[aria-expanded=false]{height:0;overflow:hidden}.mat-horizontal-content-container{overflow:hidden;padding:0 24px 24px 24px}.mat-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .mat-vertical-content-container{margin-left:0;margin-right:36px}.mat-stepper-vertical-line::before{content:\\\"\\\";position:absolute;top:-16px;bottom:-16px;left:0;border-left-width:1px;border-left-style:solid}[dir=rtl] .mat-stepper-vertical-line::before{left:auto;right:0}.mat-vertical-stepper-content{overflow:hidden;outline:0}.mat-vertical-content{padding:0 24px 24px 24px}.mat-step:last-child .mat-vertical-content-container{border:none}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatVerticalStepper.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MatVerticalStepper.ngAcceptInputType_editable;\n    /** @type {?} */\n    MatVerticalStepper.ngAcceptInputType_optional;\n    /** @type {?} */\n    MatVerticalStepper.ngAcceptInputType_completed;\n    /** @type {?} */\n    MatVerticalStepper.ngAcceptInputType_hasError;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/stepper/stepper-button.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nclass MatStepperNext extends CdkStepperNext {\n}\nMatStepperNext.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[matStepperNext]',\n                host: {\n                    '[type]': 'type',\n                },\n                inputs: ['type']\n            },] }\n];\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nclass MatStepperPrevious extends CdkStepperPrevious {\n}\nMatStepperPrevious.decorators = [\n    { type: Directive, args: [{\n                selector: 'button[matStepperPrevious]',\n                host: {\n                    '[type]': 'type',\n                },\n                inputs: ['type']\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/stepper/stepper-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatStepperModule {\n}\nMatStepperModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    MatCommonModule,\n                    CommonModule,\n                    PortalModule,\n                    MatButtonModule,\n                    CdkStepperModule,\n                    MatIconModule,\n                    MatRippleModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatHorizontalStepper,\n                    MatVerticalStepper,\n                    MatStep,\n                    MatStepLabel,\n                    MatStepper,\n                    MatStepperNext,\n                    MatStepperPrevious,\n                    MatStepHeader,\n                    MatStepperIcon,\n                ],\n                declarations: [\n                    MatHorizontalStepper,\n                    MatVerticalStepper,\n                    MatStep,\n                    MatStepLabel,\n                    MatStepper,\n                    MatStepperNext,\n                    MatStepperPrevious,\n                    MatStepHeader,\n                    MatStepperIcon,\n                ],\n                providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/stepper/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_STEPPER_INTL_PROVIDER, MAT_STEPPER_INTL_PROVIDER_FACTORY, MatHorizontalStepper, MatStep, MatStepHeader, MatStepLabel, MatStepper, MatStepperIcon, MatStepperIntl, MatStepperModule, MatStepperNext, MatStepperPrevious, MatVerticalStepper, matStepperAnimations };\n//# sourceMappingURL=stepper.js.map\n","<ng-template><ng-content></ng-content></ng-template>\n","<div class=\"mat-horizontal-stepper-header-container\">\n  <ng-container *ngFor=\"let step of steps; let i = index; let isLast = last\">\n    <mat-step-header class=\"mat-horizontal-stepper-header\"\n                     (click)=\"step.select()\"\n                     (keydown)=\"_onKeydown($event)\"\n                     [tabIndex]=\"_getFocusIndex() === i ? 0 : -1\"\n                     [id]=\"_getStepLabelId(i)\"\n                     [attr.aria-posinset]=\"i + 1\"\n                     [attr.aria-setsize]=\"steps.length\"\n                     [attr.aria-controls]=\"_getStepContentId(i)\"\n                     [attr.aria-selected]=\"selectedIndex == i\"\n                     [attr.aria-label]=\"step.ariaLabel || null\"\n                     [attr.aria-labelledby]=\"(!step.ariaLabel && step.ariaLabelledby) ? step.ariaLabelledby : null\"\n                     [index]=\"i\"\n                     [state]=\"_getIndicatorType(i, step.state)\"\n                     [label]=\"step.stepLabel || step.label\"\n                     [selected]=\"selectedIndex === i\"\n                     [active]=\"step.completed || selectedIndex === i || !linear\"\n                     [optional]=\"step.optional\"\n                     [errorMessage]=\"step.errorMessage\"\n                     [iconOverrides]=\"_iconOverrides\"\n                     [disableRipple]=\"disableRipple\">\n    </mat-step-header>\n    <div *ngIf=\"!isLast\" class=\"mat-stepper-horizontal-line\"></div>\n  </ng-container>\n</div>\n\n<div class=\"mat-horizontal-content-container\">\n  <div *ngFor=\"let step of steps; let i = index\"\n       [attr.tabindex]=\"selectedIndex === i ? 0 : null\"\n       class=\"mat-horizontal-stepper-content\" role=\"tabpanel\"\n       [@stepTransition]=\"_getAnimationDirection(i)\"\n       (@stepTransition.done)=\"_animationDone.next($event)\"\n       [id]=\"_getStepContentId(i)\"\n       [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n       [attr.aria-expanded]=\"selectedIndex === i\">\n    <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n  </div>\n</div>\n","<div class=\"mat-step-header-ripple\" matRipple\n     [matRippleTrigger]=\"_getHostElement()\"\n     [matRippleDisabled]=\"disableRipple\"></div>\n\n<div class=\"mat-step-icon-state-{{state}} mat-step-icon\" [class.mat-step-icon-selected]=\"selected\">\n  <div class=\"mat-step-icon-content\" [ngSwitch]=\"!!(iconOverrides && iconOverrides[state])\">\n    <ng-container\n      *ngSwitchCase=\"true\"\n      [ngTemplateOutlet]=\"iconOverrides[state]\"\n      [ngTemplateOutletContext]=\"_getIconContext()\"></ng-container>\n    <ng-container *ngSwitchDefault [ngSwitch]=\"state\">\n      <span *ngSwitchCase=\"'number'\">{{_getDefaultTextForState(state)}}</span>\n      <mat-icon *ngSwitchDefault>{{_getDefaultTextForState(state)}}</mat-icon>\n    </ng-container>\n  </div>\n</div>\n<div class=\"mat-step-label\"\n     [class.mat-step-label-active]=\"active\"\n     [class.mat-step-label-selected]=\"selected\"\n     [class.mat-step-label-error]=\"state == 'error'\">\n  <!-- If there is a label template, use it. -->\n  <ng-container *ngIf=\"_templateLabel()\" [ngTemplateOutlet]=\"_templateLabel()!.template\">\n  </ng-container>\n  <!-- If there is no label template, fall back to the text label. -->\n  <div class=\"mat-step-text-label\" *ngIf=\"_stringLabel()\">{{label}}</div>\n\n  <div class=\"mat-step-optional\" *ngIf=\"optional && state != 'error'\">{{_intl.optionalLabel}}</div>\n  <div class=\"mat-step-sub-label-error\" *ngIf=\"state == 'error'\">{{errorMessage}}</div>\n</div>\n\n","import { ISteps } from '@interfaces';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Injectable } from '@angular/core';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class OnboardingService {\r\n  public status = new BehaviorSubject<ISteps>({\r\n    isFirstStepCompleted: false,\r\n    isSecondStepCompleted: false,\r\n    isThirdStepCompleted: false,\r\n    isFourthStepCompleted: false,\r\n    isFifthStepCompleted: false,\r\n  });\r\n\r\n  public onboardingStatus = this.status.asObservable();\r\n\r\n  constructor(public snackBar: MatSnackBar) {}\r\n\r\n  public setStep(step: ISteps, data: any) {\r\n    const nextStep = Object.assign(step, data);\r\n    this.status.next(nextStep);\r\n  }\r\n\r\n  /**\r\n   * Sends an alert if the form that is being submitted is invalid\r\n   *\r\n   * @param form FormGroup to be checked\r\n   */\r\n  public sendFieldsAlert(form: FormGroup): void {\r\n    if (form.invalid) {\r\n      this.snackBar.open(\r\n        'Por favor, revisa los campos que estÃ¡n marcados en rojo',\r\n        'Entendido',\r\n        {\r\n          duration: 15000,\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  public setRestaurantId(restaurantId: number): void {\r\n    localStorage.setItem('restaurantId', JSON.stringify(restaurantId));\r\n  }\r\n\r\n  public setfranchiseId(franchiseId: number): void {\r\n    localStorage.setItem('franchiseId', JSON.stringify(franchiseId));\r\n  }\r\n\r\n  public get franchiseId(): number {\r\n    return JSON.parse(localStorage.getItem('franchiseId'));\r\n  }\r\n\r\n  public get restaurantId(): number {\r\n    return JSON.parse(localStorage.getItem('restaurantId'));\r\n  }\r\n}\r\n","import { IFranchise, ISteps } from '@interfaces';\r\nimport { MatHorizontalStepper } from '@angular/material/stepper';\r\nimport { OnboardingService } from '@services';\r\nimport {\r\n  Franchise,\r\n  ResponseStyles,\r\n  Style,\r\n  PriceRange,\r\n  ResponsePriceRanges,\r\n} from '@models';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  FormControl,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { FranchiseService } from '@services';\r\nimport * as firebase from 'firebase/app';\r\nimport { Component, OnInit, Input, NgZone } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-first-step',\r\n  templateUrl: './first-step.component.html',\r\n  styleUrls: ['./first-step.component.scss'],\r\n})\r\nexport class FirstStepComponent implements OnInit {\r\n  @Input() status: ISteps;\r\n  @Input() isEditing: boolean;\r\n  @Input() step: MatHorizontalStepper;\r\n  public firstFormGroup: FormGroup;\r\n  public styleList: Array<Style> = [];\r\n  public priceRangesList: Array<PriceRange> = [];\r\n  public userName = firebase.auth().currentUser.displayName;\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private fb: FormBuilder,\r\n    private franchiseService: FranchiseService,\r\n    private onboardingService: OnboardingService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.createForm();\r\n    this.getStyles();\r\n    this.getPriceRanges();\r\n  }\r\n\r\n  private getStyles() {\r\n    this.franchiseService.getStyles().subscribe((response: ResponseStyles) => {\r\n      this.styleList = response.styles;\r\n    });\r\n  }\r\n\r\n  public createForm(): void {\r\n    this.firstFormGroup = this.fb.group({\r\n      name: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(150),\r\n      ]),\r\n      price_range: new FormControl('', Validators.required),\r\n      style: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  private createFranchise() {\r\n    const franchiseToSave = {\r\n      name: this.firstFormGroup.get('name').value,\r\n      style: this.firstFormGroup.get('style').value,\r\n      price_range: this.firstFormGroup.get('price_range').value,\r\n    };\r\n\r\n    this.franchiseService\r\n      .createFranchise(franchiseToSave)\r\n      .subscribe((franchise: Franchise) => {\r\n        this.onboardingService.setfranchiseId(franchise.id);\r\n        this.continueToNextStep();\r\n      });\r\n  }\r\n\r\n  private getPriceRanges(): void {\r\n    this.franchiseService\r\n      .getPriceRanges()\r\n      .subscribe((response: ResponsePriceRanges) => {\r\n        this.priceRangesList = response.price_ranges;\r\n      });\r\n  }\r\n\r\n  public submit(): void {\r\n    if (this.firstFormGroup.invalid) {\r\n      this.onboardingService.sendFieldsAlert(this.firstFormGroup);\r\n    } else {\r\n      this.submitFirstStep();\r\n    }\r\n  }\r\n\r\n  public submitFirstStep(): void {\r\n    if (this.isEditing) {\r\n      this.editFranchise();\r\n    } else {\r\n      this.createFranchise();\r\n    }\r\n  }\r\n\r\n  public editFranchise(): void {\r\n    const payload = this.createFranchisePutBody();\r\n    this.franchiseService\r\n      .updateFranchise(this.onboardingService.franchiseId, payload)\r\n      .subscribe(() => {\r\n        this.continueToNextStep();\r\n      });\r\n  }\r\n\r\n  private createFranchisePutBody(): Franchise {\r\n    const { name, price_range, style } = this.firstFormGroup.value;\r\n    const body: IFranchise = {\r\n      id: this.onboardingService.franchiseId,\r\n      name,\r\n      price_range,\r\n      style,\r\n    };\r\n\r\n    return body;\r\n  }\r\n\r\n  private continueToNextStep(): void {\r\n    this.zone.run(() => {\r\n      this.step.selected.completed = true;\r\n      this.step.next();\r\n      this.onboardingService.setStep(this.status, {\r\n        isFirstStepCompleted: true,\r\n      });\r\n    });\r\n  }\r\n}\r\n","<div class=\"container\" id=\"firstForm\">\r\n  <p class=\"h5 txtC clr-gray\">Hola {{ userName }}</p>\r\n  <p class=\"txtC\">\r\n    Vamos a comenzar con los datos de tu negocio <br>\r\n  </p>\r\n  <form\r\n    (keydown.enter)=\"$event.preventDefault()\"\r\n    [formGroup]=\"firstFormGroup\"\r\n    (ngSubmit)=\"submit()\"\r\n    id=\"firstForm\"\r\n    novalidate\r\n  >\r\n    <mat-form-field>\r\n      <mat-label>Nombre comercial del restaurante*</mat-label>\r\n      <input matInput formControlName=\"name\" maxlength=\"150\" />\r\n      <mat-error *ngIf=\"firstFormGroup.get('name').hasError('required')\">\r\n        Esta informaciÃ³n es necesaria\r\n      </mat-error>\r\n      <mat-error *ngIf=\"firstFormGroup.get('name').hasError('minlength')\">\r\n        El mÃ­nimo de caracteres es de 3 de caracteres\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <mat-label>Tipo de comida que ofrece tu negocio*</mat-label>\r\n      <mat-select formControlName=\"style\">\r\n        <mat-option *ngFor=\"let style of styleList\" [value]=\"style.id\">{{\r\n          style.name\r\n        }}</mat-option>\r\n      </mat-select>\r\n      <mat-error> Esta informaciÃ³n es necesaria </mat-error>\r\n    </mat-form-field>\r\n    <p class=\"nm clr-gray\">Precios</p>\r\n    <mat-form-field>\r\n      <mat-label>Rango de precios*</mat-label>\r\n      <mat-select formControlName=\"price_range\">\r\n        <mat-option *ngFor=\"let price of priceRangesList\" [value]=\"price.id\">{{\r\n          price.range\r\n        }}</mat-option>\r\n      </mat-select>\r\n      <mat-error> Esta informaciÃ³n es necesaria </mat-error>\r\n    </mat-form-field>\r\n\r\n    <button mat-button type=\"submit\" class=\"btns\">\r\n      <span>Continuar</span>\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { ISteps } from '@interfaces';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { RestaurantService, OnboardingService } from '@services';\r\nimport {\r\n  Component,\r\n  NgZone,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  Input,\r\n} from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  FormControl,\r\n  Validators,\r\n  ValidatorFn,\r\n  AbstractControl,\r\n  NgForm,\r\n  FormGroupDirective,\r\n} from '@angular/forms';\r\nimport { MapsAPILoader } from '@agm/core';\r\nimport { Restaurant } from '@models';\r\nimport { PhoneNumberUtil } from 'google-libphonenumber';\r\nimport { RegexEmail, RegexUrl } from '@constants';\r\nimport { google } from 'google-maps';\r\ndeclare var google: google;\r\n\r\n@Component({\r\n  selector: 'app-second-step',\r\n  templateUrl: './second-step.component.html',\r\n  styleUrls: ['./second-step.component.scss'],\r\n})\r\nexport class SecondStepComponent implements OnInit {\r\n  public coordinatesMatcher = new CoordinatesErrorMatcher();\r\n  public inputFlagSection: any;\r\n  @ViewChild('searchAddress') private searchElementRef: ElementRef;\r\n  @Input() status: ISteps;\r\n  @Input() step: MatStepper;\r\n  @Input() isEditing: boolean;\r\n  @Input() hasReturnOptionToBeVisible = true;\r\n  constructor(\r\n    private zone: NgZone,\r\n    private fb: FormBuilder,\r\n    private mapsAPILoader: MapsAPILoader,\r\n    private onboardingService: OnboardingService,\r\n    private restaurantService: RestaurantService\r\n  ) {}\r\n\r\n  // Variables used in the second step\r\n  public secondFormGroup = this.fb.group(\r\n    {\r\n      name: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(150),\r\n      ]),\r\n      description: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(220),\r\n      ]),\r\n      latitude: new FormControl('', Validators.required),\r\n      longitude: new FormControl('', Validators.required),\r\n      address: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(220),\r\n      ]),\r\n      address_extra: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(220),\r\n      ]),\r\n      dialCode: new FormControl(52, Validators.required),\r\n      phone: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(10),\r\n        Validators.maxLength(10),\r\n        this.phoneNumberValidator('MX'),\r\n      ]),\r\n      email: new FormControl('', {\r\n        validators: [Validators.required, Validators.pattern(RegexEmail)],\r\n        updateOn: 'blur',\r\n      }),\r\n      max_offered_seats: new FormControl({ value: 1, disabled: true }, [\r\n        Validators.required,\r\n        Validators.min(1),\r\n      ]),\r\n      max_people_per_order: new FormControl({ value: 1, disabled: true }, [\r\n        Validators.required,\r\n        Validators.min(1),\r\n      ]),\r\n      max_cancel_limit_hours: new FormControl({ value: 1, disabled: true }, [\r\n        Validators.required,\r\n        Validators.min(1),\r\n      ]),\r\n      max_cancel_limit_minutes: new FormControl({ value: 0, disabled: true }, [\r\n        Validators.required,\r\n        Validators.min(0),\r\n        Validators.max(59),\r\n      ]),\r\n      reservation_time_minutes: new FormControl({ value: 0, disabled: true }, [\r\n        Validators.required,\r\n        Validators.min(1),\r\n      ]),\r\n      billingOption: new FormControl('email', Validators.required),\r\n      emailBilling: new FormControl('', {\r\n        validators: [Validators.pattern(RegexEmail), Validators.required],\r\n        updateOn: 'blur',\r\n      }),\r\n      websiteBilling: new FormControl('', [Validators.pattern(RegexUrl)]),\r\n    },\r\n    { validator: this.coordinatesValidator }\r\n  );\r\n\r\n  ngOnInit(): void {\r\n    this.initLocationInput();\r\n  }\r\n\r\n  private initLocationInput(): void {\r\n    this.mapsAPILoader.load().then(() => {\r\n      const autocomplete = new google.maps.places.Autocomplete(\r\n        this.searchElementRef.nativeElement,\r\n        {\r\n          types: ['address'],\r\n        }\r\n      );\r\n      autocomplete.addListener('place_changed', () => {\r\n        this.zone.run(() => {\r\n          const place: google.maps.places.PlaceResult = autocomplete.getPlace();\r\n          if (place.geometry === undefined || place.geometry === null) {\r\n            return;\r\n          }\r\n          this.secondFormGroup.get('address').setValue(place.formatted_address);\r\n          this.secondFormGroup\r\n            .get('latitude')\r\n            .setValue(place.geometry.location.lat());\r\n          this.secondFormGroup\r\n            .get('longitude')\r\n            .setValue(place.geometry.location.lng());\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  public addInitialDialCode(inltObject: any) {\r\n    this.inputFlagSection = inltObject;\r\n    const dialCodeElement = document.createElement('P');\r\n    dialCodeElement.textContent = '+52';\r\n    dialCodeElement.setAttribute('id', 'dial');\r\n    const flagElement = this.inputFlagSection.selectedFlag.childNodes[0];\r\n    flagElement.parentNode.insertBefore(\r\n      dialCodeElement,\r\n      flagElement.nextSibling\r\n    );\r\n  }\r\n\r\n  private setInputDialCodeOnSelectedCountry(code: number) {\r\n    const child = document.getElementById('dial');\r\n    child.textContent = `+${code}`;\r\n  }\r\n\r\n  public setDialCode(iso: string, dialCode: number) {\r\n    this.secondFormGroup.get('dialCode').setValue(dialCode);\r\n    this.secondFormGroup\r\n      .get('phone')\r\n      .setValidators([\r\n        Validators.required,\r\n        Validators.minLength(10),\r\n        Validators.maxLength(10),\r\n        this.phoneNumberValidator(iso.toUpperCase()),\r\n      ]);\r\n    this.secondFormGroup.get('phone').updateValueAndValidity();\r\n    this.setInputDialCodeOnSelectedCountry(dialCode);\r\n  }\r\n\r\n  private submitSecondStep() {\r\n    const restaurantToSave = this.restaurantToSave;\r\n    this.restaurantService\r\n      .createRestaurant(restaurantToSave, this.onboardingService.franchiseId)\r\n      .subscribe((restaurant: Restaurant) => {\r\n        this.onboardingService.setRestaurantId(restaurant.id);\r\n        this.continueToNextStep();\r\n      });\r\n  }\r\n\r\n  public manageControlQuantity(\r\n    quantity: number = 1,\r\n    form: FormGroup,\r\n    controlName: string,\r\n    operation: string\r\n  ): void {\r\n    const actualValue = form.get(controlName).value;\r\n    let newValue = actualValue;\r\n    if (operation === 'subtract') {\r\n      if (\r\n        actualValue > quantity &&\r\n        controlName !== 'max_cancel_limit_minutes'\r\n      ) {\r\n        newValue = actualValue - quantity;\r\n      } else if (\r\n        (controlName === 'max_cancel_limit_minutes' ||\r\n          controlName === 'reservation_time_minutes') &&\r\n        actualValue > 0 &&\r\n        actualValue !== 60\r\n      ) {\r\n        newValue = actualValue - quantity;\r\n      } else if (\r\n        (controlName === 'max_cancel_limit_minutes' ||\r\n          controlName === 'reservation_time_minutes') &&\r\n        actualValue === 50\r\n      ) {\r\n        newValue = 60;\r\n        newValue = newValue - quantity;\r\n      }\r\n    } else if (operation === 'add' && actualValue < 99) {\r\n      if (\r\n        (controlName === 'max_cancel_limit_minutes' ||\r\n          controlName === 'reservation_time_minutes') &&\r\n        (actualValue + quantity > 60 || actualValue + quantity === 60)\r\n      ) {\r\n        if (controlName === 'max_cancel_limit_minutes') {\r\n          this.secondFormGroup\r\n            .get('max_cancel_limit_hours')\r\n            .setValue(\r\n              this.secondFormGroup.get('max_cancel_limit_hours').value + 1\r\n            );\r\n          newValue = 0;\r\n        } else {\r\n          newValue = 60;\r\n        }\r\n      } else {\r\n        newValue = actualValue + quantity;\r\n      }\r\n    }\r\n    form.get(controlName).setValue(newValue);\r\n  }\r\n\r\n  private coordinatesValidator(form: FormGroup) {\r\n    const condition =\r\n      !!form.get('latitude').value && !!form.get('longitude').value;\r\n    return condition ? null : { coordinatesDoNotSetted: true };\r\n  }\r\n\r\n  private phoneNumberValidator(regionCode: string): ValidatorFn {\r\n    const phoneNumberUtil = PhoneNumberUtil.getInstance();\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n      let validNumber = false;\r\n      try {\r\n        const phoneNumber = phoneNumberUtil.parseAndKeepRawInput(\r\n          control.value,\r\n          regionCode\r\n        );\r\n        validNumber = phoneNumberUtil.isValidNumber(phoneNumber);\r\n      } catch (e) {}\r\n\r\n      return validNumber ? null : { wrongNumber: { value: control.value } };\r\n    };\r\n  }\r\n\r\n  public submit(): void {\r\n    if (this.secondFormGroup.invalid) {\r\n      this.onboardingService.sendFieldsAlert(this.secondFormGroup);\r\n    } else {\r\n      this.submitStep();\r\n    }\r\n  }\r\n\r\n  public submitStep(): void {\r\n    if (this.isEditing) {\r\n      this.editRestaurant();\r\n    } else {\r\n      this.submitSecondStep();\r\n    }\r\n  }\r\n\r\n  public editRestaurant() {\r\n    const payload = this.restaurantToSave;\r\n    this.restaurantService\r\n      .updateRestaurantDetails(\r\n        this.onboardingService.restaurantId.toString(),\r\n        payload\r\n      )\r\n      .subscribe((response) => {\r\n        this.continueToNextStep();\r\n      });\r\n  }\r\n\r\n  private continueToNextStep(): void {\r\n    this.zone.run(() => {\r\n      this.step.selected.completed = true;\r\n      this.step.next();\r\n      this.onboardingService.setStep(this.status, {\r\n        isSecondStepCompleted: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  public goBack(): void {\r\n    this.onboardingService.setStep(this.status, {\r\n      isFirstStepCompleted: false,\r\n    });\r\n    this.step.previous();\r\n  }\r\n\r\n  get restaurantToSave(): Restaurant {\r\n    const body = new Restaurant({\r\n      name: this.secondFormGroup.get('name').value,\r\n      description: this.secondFormGroup.get('description').value,\r\n      address: this.secondFormGroup.get('address').value,\r\n      address_extra: this.secondFormGroup.get('address_extra').value,\r\n      coordinates: [\r\n        this.secondFormGroup.get('latitude').value.toString(),\r\n        this.secondFormGroup.get('longitude').value.toString(),\r\n      ],\r\n      phone:\r\n        '+' +\r\n        this.secondFormGroup.get('dialCode').value +\r\n        this.secondFormGroup.get('phone').value,\r\n      email: this.secondFormGroup.get('email').value,\r\n      max_offered_seats: this.secondFormGroup.get('max_offered_seats').value,\r\n      max_people_per_order: this.secondFormGroup.get('max_people_per_order')\r\n        .value,\r\n      max_cancel_limit_minutes:\r\n        this.secondFormGroup.get('max_cancel_limit_hours').value * 60 +\r\n        this.secondFormGroup.get('max_cancel_limit_minutes').value,\r\n      reservation_time_minutes: this.secondFormGroup.get(\r\n        'reservation_time_minutes'\r\n      ).value,\r\n      is_head_office: false,\r\n      invoice_email: this.secondFormGroup.value.emailBilling,\r\n      invoice_url: this.secondFormGroup.value.websiteBilling,\r\n    });\r\n\r\n    if (this.secondFormGroup.value.billingOption === 'email') {\r\n      delete body.invoice_url;\r\n    } else if (this.secondFormGroup.value.billingOption === 'website') {\r\n      delete body.invoice_email;\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  public changeForm(): void {\r\n    if (this.secondFormGroup.controls.billingOption.value === 'email') {\r\n      this.disableInput('websiteBilling');\r\n      this.enableInput('emailBilling');\r\n      this.setValidators('emailBilling');\r\n    } else if (\r\n      this.secondFormGroup.controls.billingOption.value === 'website'\r\n    ) {\r\n      this.disableInput('emailBilling');\r\n      this.enableInput('websiteBilling');\r\n      this.setValidators('websiteBilling');\r\n    }\r\n  }\r\n\r\n  private enableInput(input: string): void {\r\n    this.secondFormGroup.get(input).enable();\r\n  }\r\n\r\n  private disableInput(input: string): void {\r\n    this.secondFormGroup.get(input).disable();\r\n  }\r\n\r\n  private setValidators(input: string): void {\r\n    if (this.secondFormGroup.controls.billingOption.value === 'email') {\r\n      this.secondFormGroup\r\n        .get(input)\r\n        .setValidators([Validators.required, Validators.pattern(RegexEmail)]);\r\n      this.secondFormGroup.get('websiteBilling').setValidators([]);\r\n    } else if (\r\n      this.secondFormGroup.controls.billingOption.value === 'website'\r\n    ) {\r\n      this.secondFormGroup\r\n        .get(input)\r\n        .setValidators([Validators.required, Validators.pattern(RegexUrl)]);\r\n      this.secondFormGroup.get('emailBilling').setValidators([]);\r\n    }\r\n  }\r\n\r\n  public selectedBillingOption(value: string): boolean {\r\n    return this.secondFormGroup.get('billingOption').value === value;\r\n  }\r\n}\r\n\r\nclass CoordinatesErrorMatcher implements ErrorStateMatcher {\r\n  isErrorState(\r\n    control: FormControl | null,\r\n    form: FormGroupDirective | NgForm | null\r\n  ): boolean {\r\n    return (\r\n      (form.submitted || control.touched) &&\r\n      form.hasError('coordinatesDoNotSetted')\r\n    );\r\n  }\r\n}\r\n","<div class=\"container\" id=\"secondForm\">\r\n  <p class=\"h5 txtC clr-gray\">Sucursal matriz</p>\r\n  <p class=\"txtC\">\r\n    Comenzaremos con tu sucursal principal. Si cuentas con <br />\r\n    mÃ¡s sucursales, las podrÃ¡s configurar mÃ¡s adelante\r\n  </p>\r\n  <p class=\"nm\">Detalles de tu sucursal matriz</p>\r\n  <form\r\n    (keydown.enter)=\"$event.preventDefault()\"\r\n    [formGroup]=\"secondFormGroup\"\r\n    id=\"secondForm\"\r\n    (ngSubmit)=\"submit()\"\r\n    novalidate\r\n  >\r\n    <div class=\"inl column\">\r\n      <mat-form-field>\r\n        <mat-label>Nombre de sucursal*</mat-label>\r\n        <input matInput formControlName=\"name\" maxlength=\"150\" />\r\n        <mat-error *ngIf=\"secondFormGroup.get('name').hasError('required')\">\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"secondFormGroup.get('name').hasError('minlength')\">\r\n          El mÃ­nimo de caracteres es de 3 caracteres\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div>\r\n      <mat-form-field>\r\n        <mat-label\r\n          >DescripciÃ³n de la sucursal*</mat-label\r\n        >\r\n        <textarea\r\n          matInput\r\n          formControlName=\"description\"\r\n          maxlength=\"220\"\r\n          cdkTextareaAutosize\r\n          cdkAutosizeMinRows=\"1\"\r\n          cdkAutosizeMaxRows=\"5\"\r\n        ></textarea>\r\n        <mat-error\r\n          *ngIf=\"secondFormGroup.get('description').hasError('required')\"\r\n        >\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"secondFormGroup.get('description').hasError('minlength')\"\r\n        >\r\n          El mÃ­nimo de caracteres es de 3 caracteres\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <p class=\"nm\">DirecciÃ³n de la sucursal matriz</p>\r\n    <div class=\"inl column\">\r\n      <mat-form-field class=\"field-suffix\">\r\n        <mat-label>Ingresa una direcciÃ³n*</mat-label>\r\n        <input\r\n          matInput\r\n          autocorrect=\"off\"\r\n          autocapitalize=\"off\"\r\n          spellcheck=\"off\"\r\n          type=\"text\"\r\n          #searchAddress\r\n          placeholder=\"\"\r\n          formControlName=\"address\"\r\n          [errorStateMatcher]=\"coordinatesMatcher\"\r\n        />\r\n        <span matSuffix>\r\n          <mat-icon class=\"clr-yellow\">place</mat-icon>\r\n        </span>\r\n        <mat-error *ngIf=\"secondFormGroup.get('address').hasError('required')\">\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"secondFormGroup.get('address').hasError('minlength')\">\r\n          El mÃ­nimo de caracteres es de 3 caracteres\r\n        </mat-error>\r\n        <mat-error *ngIf=\"secondFormGroup.get('address').hasError('maxlength')\">\r\n          El mÃ¡ximo de caracteres es de 220 caracteres\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <mat-label>Nota adicional: Ej. Piso, Interior, etc.</mat-label>\r\n        <input matInput formControlName=\"address_extra\" />\r\n        <mat-error\r\n          *ngIf=\"secondFormGroup.get('address_extra').hasError('required')\"\r\n        >\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"secondFormGroup.get('address_extra').hasError('minlength')\"\r\n        >\r\n          El mÃ­nimo de caracteres es de 3 caracteres\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"secondFormGroup.get('address_extra').hasError('maxlength')\"\r\n        >\r\n          El mÃ¡ximo de caracteres es de 220 caracteres\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"inl column map\">\r\n      <agm-map\r\n        [latitude]=\"secondFormGroup.get('latitude').value\"\r\n        [longitude]=\"secondFormGroup.get('longitude').value\"\r\n        [zoom]=\"16\"\r\n      >\r\n        <agm-marker\r\n          [latitude]=\"secondFormGroup.get('latitude').value\"\r\n          [longitude]=\"secondFormGroup.get('longitude').value\"\r\n        ></agm-marker>\r\n      </agm-map>\r\n    </div>\r\n    <p class=\"nm\">Datos de contacto de la sucursal matriz</p>\r\n    <div class=\"inl column\">\r\n      <mat-form-field class=\"phone\">\r\n        <mat-label>TelÃ©fono*</mat-label>\r\n        <input\r\n          matInput\r\n          formControlName=\"phone\"\r\n          [ng2TelInputOptions]=\"{ initialCountry: 'mx' }\"\r\n          mask=\"00 0000 0000\"\r\n          [validation]=\"false\"\r\n          (intlTelInputObject)=\"addInitialDialCode($event)\"\r\n          ng2TelInput\r\n          (countryChange)=\"setDialCode($event.iso2, $event.dialCode)\"\r\n          placeholder=\"00 0000 0000\"\r\n        />\r\n        <mat-error *ngIf=\"secondFormGroup.get('phone').hasError('required')\">\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"secondFormGroup.get('phone').hasError('minlength')\">\r\n          El telÃ©fono deberÃ¡ ser de 10 dÃ­gitos. Ej. 55 5555 5555\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"\r\n            secondFormGroup.get('phone').invalid &&\r\n            !secondFormGroup.get('phone').hasError('minlength') &&\r\n            !secondFormGroup.get('phone').hasError('required')\r\n          \"\r\n        >\r\n          El nÃºmero no corresponde al paÃ­s seleccionado\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <mat-label>Correo*</mat-label>\r\n        <input matInput formControlName=\"email\" />\r\n        <mat-error *ngIf=\"secondFormGroup.get('email').hasError('required')\">\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"secondFormGroup.get('email').hasError('pattern')\">\r\n          El formato correcto deberÃ¡ ser: ejemplo@ejemplo.com\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <p class=\"nm\">Reservaciones asignadas a tu sucursal</p>\r\n    <p class=\"clr-gray\">\r\n      Total de asientos que ofertarÃ¡s unicamente para las reservas por medio de\r\n      la aplicaciÃ³n\r\n    </p>\r\n    <small class=\"clr-nm\"\r\n      >No todos los lugares de tu establecimiento tienen que estar asignados por\r\n      medio de la aplicaciÃ³n.</small\r\n    >\r\n    <mat-form-field class=\"number contains-arrows\">\r\n      <input\r\n        matInput\r\n        formControlName=\"max_offered_seats\"\r\n        mask=\"0*\"\r\n        maxlength=\"2\"\r\n      />\r\n      <mat-error\r\n        *ngIf=\"secondFormGroup.get('max_offered_seats').hasError('required')\"\r\n      >\r\n        Esta informaciÃ³n es necesaria\r\n      </mat-error>\r\n      <mat-error\r\n        *ngIf=\"secondFormGroup.get('max_offered_seats').hasError('min')\"\r\n      >\r\n        El valor mÃ­nimo requerido es 1\r\n      </mat-error>\r\n      <span matSuffix>\r\n        Comensales*\r\n        <img\r\n          src=\"assets/images/icons/btn-stepper-up.svg\"\r\n          class=\"quantity-control up\"\r\n          (click)=\"\r\n            manageControlQuantity(\r\n              1,\r\n              secondFormGroup,\r\n              'max_offered_seats',\r\n              'add'\r\n            )\r\n          \"\r\n        />\r\n        <img\r\n          src=\"assets/images/icons/btn-stepper-down.svg\"\r\n          class=\"quantity-control down\"\r\n          (click)=\"\r\n            manageControlQuantity(\r\n              1,\r\n              secondFormGroup,\r\n              'max_offered_seats',\r\n              'subtract'\r\n            )\r\n          \"\r\n        />\r\n      </span>\r\n    </mat-form-field>\r\n    <p class=\"clr-gray\">MÃ¡ximo de comensales por grupo</p>\r\n    <small class=\"clr-nm\"\r\n      >Elige el nÃºmero de comensales que aceptaras por reservaciÃ³n</small\r\n    >\r\n    <mat-form-field class=\"number contains-arrows\">\r\n      <input\r\n        matInput\r\n        formControlName=\"max_people_per_order\"\r\n        mask=\"0*\"\r\n        maxlength=\"2\"\r\n      />\r\n      <mat-error\r\n        *ngIf=\"secondFormGroup.get('max_people_per_order').hasError('required')\"\r\n      >\r\n        Esta informaciÃ³n es necesaria\r\n      </mat-error>\r\n      <mat-error\r\n        *ngIf=\"secondFormGroup.get('max_people_per_order').hasError('min')\"\r\n      >\r\n        El valor mÃ­nimo requerido es 1\r\n      </mat-error>\r\n      <span matSuffix>\r\n        Comensales por reservaciÃ³n*\r\n        <img\r\n          src=\"assets/images/icons/btn-stepper-up.svg\"\r\n          class=\"quantity-control up\"\r\n          (click)=\"\r\n            manageControlQuantity(\r\n              1,\r\n              secondFormGroup,\r\n              'max_people_per_order',\r\n              'add'\r\n            )\r\n          \"\r\n        />\r\n        <img\r\n          src=\"assets/images/icons/btn-stepper-down.svg\"\r\n          class=\"quantity-control down\"\r\n          (click)=\"\r\n            manageControlQuantity(\r\n              1,\r\n              secondFormGroup,\r\n              'max_people_per_order',\r\n              'subtract'\r\n            )\r\n          \"\r\n        />\r\n      </span>\r\n    </mat-form-field>\r\n    <p class=\"nm\">Tiempos de pedidos y cancelaciones</p>\r\n    <p class=\"clr-gray\">\r\n      Define el tiempo mÃ¡ximo en que los usuarios podrÃ¡n cancelar\r\n    </p>\r\n    <div class=\"inl\">\r\n      <mat-form-field class=\"number contains-arrows\">\r\n        <input\r\n          matInput\r\n          formControlName=\"max_cancel_limit_hours\"\r\n          mask=\"0*\"\r\n          maxlength=\"2\"\r\n        />\r\n        <mat-error\r\n          *ngIf=\"\r\n            secondFormGroup.get('max_cancel_limit_hours').hasError('required')\r\n          \"\r\n        >\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"secondFormGroup.get('max_cancel_limit_hours').hasError('min')\"\r\n        >\r\n          El valor mÃ­nimo requerido es 1\r\n        </mat-error>\r\n        <span matSuffix>\r\n          Horas*\r\n          <img\r\n            src=\"assets/images/icons/btn-stepper-up.svg\"\r\n            class=\"quantity-control up\"\r\n            (click)=\"\r\n              manageControlQuantity(\r\n                1,\r\n                secondFormGroup,\r\n                'max_cancel_limit_hours',\r\n                'add'\r\n              )\r\n            \"\r\n          />\r\n          <img\r\n            src=\"assets/images/icons/btn-stepper-down.svg\"\r\n            class=\"quantity-control down\"\r\n            (click)=\"\r\n              manageControlQuantity(\r\n                1,\r\n                secondFormGroup,\r\n                'max_cancel_limit_hours',\r\n                'subtract'\r\n              )\r\n            \"\r\n          />\r\n        </span>\r\n      </mat-form-field>\r\n      <mat-form-field class=\"number contains-arrows\">\r\n        <input\r\n          matInput\r\n          formControlName=\"max_cancel_limit_minutes\"\r\n          mask=\"0*\"\r\n          maxlength=\"2\"\r\n        />\r\n        <mat-error\r\n          *ngIf=\"\r\n            secondFormGroup.get('max_cancel_limit_minutes').hasError('required')\r\n          \"\r\n        >\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"\r\n            secondFormGroup.get('max_cancel_limit_minutes').hasError('min')\r\n          \"\r\n        >\r\n          El valor mÃ­nimo requerido es 0\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"\r\n            secondFormGroup.get('max_cancel_limit_minutes').hasError('max')\r\n          \"\r\n        >\r\n          El valor mÃ¡ximo es 60\r\n        </mat-error>\r\n        <span matSuffix>\r\n          Minutos*\r\n          <img\r\n            src=\"assets/images/icons/btn-stepper-up.svg\"\r\n            class=\"quantity-control up\"\r\n            (click)=\"\r\n              manageControlQuantity(\r\n                30,\r\n                secondFormGroup,\r\n                'max_cancel_limit_minutes',\r\n                'add'\r\n              )\r\n            \"\r\n          />\r\n          <img\r\n            src=\"assets/images/icons/btn-stepper-down.svg\"\r\n            class=\"quantity-control down\"\r\n            (click)=\"\r\n              manageControlQuantity(\r\n                30,\r\n                secondFormGroup,\r\n                'max_cancel_limit_minutes',\r\n                'subtract'\r\n              )\r\n            \"\r\n          />\r\n        </span>\r\n      </mat-form-field>\r\n      <small class=\"clr-nm ml\">Antes de la reservaciÃ³n</small>\r\n    </div>\r\n    <p class=\"clr-gray\">\r\n      Define cada cuÃ¡nto se mostrarÃ¡ un espacio para reservaciones en la\r\n      aplicaciÃ³n\r\n    </p>\r\n    <div class=\"inl\">\r\n      <small class=\"clr-nm mr\">TendrÃ© reservaciones cada</small>\r\n      <mat-form-field class=\"number contains-arrows\">\r\n        <input\r\n          matInput\r\n          formControlName=\"reservation_time_minutes\"\r\n          mask=\"0*\"\r\n          maxlength=\"2\"\r\n        />\r\n        <mat-error\r\n          *ngIf=\"\r\n            secondFormGroup.get('reservation_time_minutes').hasError('required')\r\n          \"\r\n        >\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"\r\n            secondFormGroup.get('reservation_time_minutes').hasError('min')\r\n          \"\r\n        >\r\n          El valor mÃ­nimo requerido es 1\r\n        </mat-error>\r\n        <span matSuffix>\r\n          Minutos*\r\n          <img\r\n            src=\"assets/images/icons/btn-stepper-up.svg\"\r\n            class=\"quantity-control up\"\r\n            (click)=\"\r\n              manageControlQuantity(\r\n                15,\r\n                secondFormGroup,\r\n                'reservation_time_minutes',\r\n                'add'\r\n              )\r\n            \"\r\n          />\r\n          <img\r\n            src=\"assets/images/icons/btn-stepper-down.svg\"\r\n            class=\"quantity-control down\"\r\n            (click)=\"\r\n              manageControlQuantity(\r\n                15,\r\n                secondFormGroup,\r\n                'reservation_time_minutes',\r\n                'subtract'\r\n              )\r\n            \"\r\n          />\r\n        </span>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <p class=\"nm\">FacturaciÃ³n</p>\r\n\r\n    <p class=\"nm subtitle-field clr-gray\">\r\n      Ingresa el lugar en donde tus clientes podrÃ¡n solicitar su factura\r\n    </p>\r\n\r\n    <mat-radio-group\r\n      (change)=\"changeForm()\"\r\n      formControlName=\"billingOption\"\r\n      class=\"inl\"\r\n    >\r\n      <mat-radio-button value=\"email\">Correo electrÃ³nico </mat-radio-button>\r\n      <mat-radio-button value=\"website\"> Sitio web </mat-radio-button>\r\n    </mat-radio-group>\r\n\r\n    <mat-error\r\n      class=\"error-billing\"\r\n      *ngIf=\"secondFormGroup.get('billingOption').hasError('required')\"\r\n    >\r\n      Esta informaciÃ³n es necesaria\r\n    </mat-error>\r\n\r\n    <div class=\"input-group\" *ngIf=\"selectedBillingOption('email')\">\r\n      <mat-form-field>\r\n        <mat-label>Ingresa el correo electrÃ³nico</mat-label>\r\n        <input matInput formControlName=\"emailBilling\" />\r\n        <mat-error\r\n          *ngIf=\"secondFormGroup.get('emailBilling').hasError('pattern')\"\r\n        >\r\n          El formato correcto deberÃ¡ ser: ejemplo@ejemplo.com\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"secondFormGroup.get('emailBilling').hasError('required')\"\r\n        >\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngIf=\"selectedBillingOption('website')\">\r\n      <mat-form-field>\r\n        <mat-label>Ingresa el sitio web</mat-label>\r\n        <input matInput formControlName=\"websiteBilling\" />\r\n        <mat-error\r\n          *ngIf=\"secondFormGroup.get('websiteBilling').hasError('pattern')\"\r\n        >\r\n          Utilice el siguiente formato https://www.ejemplo.com/\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"secondFormGroup.get('websiteBilling').hasError('required')\"\r\n        >\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div\r\n      class=\"inl column buttons\"\r\n      [ngClass]=\"{ 'center-continue': !hasReturnOptionToBeVisible }\"\r\n    >\r\n      <div class=\"txtR\" *ngIf=\"hasReturnOptionToBeVisible\">\r\n        <button mat-button (click)=\"goBack()\" class=\"link\">\r\n          <img src=\"assets/images/icons/arrow.svg\" alt=\"Regresar\" />\r\n          <span>Regresar</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"txtC\">\r\n        <button type=\"submit\" mat-button class=\"btns\">\r\n          <span>Continuar</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { FormControl, Validators } from '@angular/forms';\r\n\r\nimport { ISteps } from '@interfaces';\r\nimport { OnboardingService, RestaurantService } from '@services';\r\nimport { AmenitiesPayload } from '@payloads';\r\nimport { MatCheckboxChange } from '@angular/material/checkbox';\r\nimport { Component, OnInit, Input, NgZone } from '@angular/core';\r\nimport { Amenities, Amenity, Extra, AmenitiesToSave } from '@models';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatStepper } from '@angular/material/stepper';\r\n\r\n@Component({\r\n  selector: 'app-third-step',\r\n  templateUrl: './third-step.component.html',\r\n  styleUrls: ['./third-step.component.scss'],\r\n})\r\nexport class ThirdStepComponent implements OnInit {\r\n  @Input() status: ISteps;\r\n  @Input() step: MatStepper;\r\n  // Variables used in the third step\r\n  public typesListAmenities: Array<Amenity> = [];\r\n  public newExtraControl = new FormControl(\r\n    '',\r\n    Validators.compose([Validators.minLength(3), Validators.maxLength(80)])\r\n  );\r\n  public zonesListAmenities: Array<Amenity> = [];\r\n  public extrasListAmenities: Array<Extra> = [];\r\n  public parkingsListAmenities: Array<Amenity> = [];\r\n  public paymentListAmenities: Array<Amenity> = [];\r\n  public activeNewService = false;\r\n  private zonesList: Array<number> = [];\r\n  private typesList: Array<number> = [];\r\n  private paymentMethodsList: Array<number> = [];\r\n  private parkingsList: Array<number> = [];\r\n  private extrasList: Array<number> = [];\r\n  public extrasAddedByUser: Array<string> = [];\r\n  private extrasAddedByUserToSave: Array<string> = [];\r\n  public shouldSaveAmenities = false;\r\n\r\n  constructor(\r\n    private restaurantService: RestaurantService,\r\n    private snackBar: MatSnackBar,\r\n    private onboardingService: OnboardingService,\r\n    private zone: NgZone\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getAmenities();\r\n  }\r\n\r\n  private getAmenities() {\r\n    this.restaurantService.getAmenities().subscribe((amenities: Amenities) => {\r\n      this.typesListAmenities = amenities.types;\r\n      this.zonesListAmenities = amenities.zones;\r\n      this.extrasListAmenities = amenities.extras.map(\r\n        (extra) => new Extra(extra)\r\n      );\r\n      this.parkingsListAmenities = amenities.parkings;\r\n      this.paymentListAmenities = amenities.payment_methods;\r\n    });\r\n  }\r\n\r\n  public addUserExtraAmenity() {\r\n    if (this.newExtraControl.invalid) {\r\n      return;\r\n    }\r\n    const { value } = this.newExtraControl;\r\n\r\n    for (const extra of this.extrasListAmenities) {\r\n      if (extra.name.toLowerCase() === value.toLowerCase()) {\r\n        this.snackBar.open('El nombre ya estÃ¡ en uso', 'Entendido', {\r\n          duration: 15000,\r\n        });\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    const extraObject = new Extra({\r\n      name: this.capitalizeString(value),\r\n      active: true,\r\n      is_global: false,\r\n    });\r\n\r\n    this.extrasListAmenities.push(extraObject);\r\n    this.activeNewService = false;\r\n    this.newExtraControl.setValue('');\r\n  }\r\n\r\n  public onExtraCheck(event: MatCheckboxChange, index: number) {\r\n    this.extrasListAmenities[index].active = event.checked;\r\n  }\r\n\r\n  private capitalizeString(value: string): string {\r\n    const splitString = value.toLowerCase().split(' ');\r\n\r\n    for (let i = 0; i < splitString.length; i++) {\r\n      splitString[i] =\r\n        splitString[i].charAt(0).toUpperCase() + splitString[i].substring(1);\r\n    }\r\n\r\n    return splitString.join(' ');\r\n  }\r\n\r\n  public switchUserExtraAmenitiesStatus(name: string) {\r\n    const index = this.extrasAddedByUserToSave.indexOf(name);\r\n    if (index !== -1) {\r\n      this.extrasAddedByUserToSave.splice(index, 1);\r\n    } else {\r\n      this.extrasAddedByUserToSave.push(name);\r\n    }\r\n  }\r\n\r\n  public switchAmenitiesStatus(id: number, controlName: string) {\r\n    if (controlName === 'type') {\r\n      const index = this.typesList.indexOf(id);\r\n      if (index !== -1) {\r\n        this.typesList.splice(index, 1);\r\n      } else {\r\n        this.typesList.push(id);\r\n      }\r\n    }\r\n    if (controlName === 'zone') {\r\n      const index = this.zonesList.indexOf(id);\r\n      if (index !== -1) {\r\n        this.zonesList.splice(index, 1);\r\n      } else {\r\n        this.zonesList.push(id);\r\n      }\r\n    }\r\n    if (controlName === 'parking') {\r\n      const index = this.extrasList.indexOf(id);\r\n      if (index !== -1) {\r\n        this.parkingsList.splice(index, 1);\r\n      } else {\r\n        this.parkingsList.push(id);\r\n      }\r\n    }\r\n    if (controlName === 'payment') {\r\n      const index = this.extrasList.indexOf(id);\r\n      if (index !== -1) {\r\n        this.paymentMethodsList.splice(index, 1);\r\n      } else {\r\n        this.paymentMethodsList.push(id);\r\n      }\r\n    }\r\n  }\r\n\r\n  public submit(): void {\r\n    const amenitiesPayload: AmenitiesToSave = new AmenitiesPayload(\r\n      this.typesList,\r\n      this.zonesList,\r\n      this.extrasListAmenities,\r\n      this.parkingsList,\r\n      this.paymentMethodsList\r\n    ).toJson();\r\n\r\n    this.restaurantService\r\n      .setRestaurantAmenities(\r\n        amenitiesPayload,\r\n        this.onboardingService.restaurantId\r\n      )\r\n      .subscribe((response) => {\r\n        this.continueToNextStep();\r\n      });\r\n  }\r\n\r\n  public deleteAmenity(index: number): void {\r\n    this.extrasListAmenities.splice(index, 1);\r\n  }\r\n\r\n  public declineToSaveAmenities(): void {\r\n    this.shouldSaveAmenities = false;\r\n    this.continueToNextStep();\r\n  }\r\n\r\n  private continueToNextStep(): void {\r\n    this.zone.run(() => {\r\n      this.step.selected.completed = true;\r\n      this.step.next();\r\n      this.onboardingService.setStep(this.status, {\r\n        isThirdStepCompleted: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  public goBack(): void {\r\n    this.step.previous();\r\n    this.onboardingService.setStep(this.status, {\r\n      isSecondStepCompleted: false,\r\n    });\r\n  }\r\n}\r\n","<div class=\"container\" id=\"thirdForm\">\r\n  <p class=\"h5 txtC clr-gray\">Servicios y Amenidades de tu sucursal matriz</p>\r\n  <p class=\"txtC\">Servicios y Amenidades de tu sucursal matriz</p>\r\n  <form id=\"thirdForm\" (keydown.enter)=\"$event.preventDefault()\" novalidate>\r\n    <p class=\"nm\">Tu sucursal es ideal para</p>\r\n    <div>\r\n      <mat-checkbox\r\n        *ngFor=\"let type of typesListAmenities\"\r\n        [value]=\"type.id\"\r\n        (change)=\"switchAmenitiesStatus(type.id, 'type')\"\r\n        >{{ type.name }}</mat-checkbox\r\n      >\r\n    </div>\r\n    <p class=\"nm\">Zonas para las reservaciones</p>\r\n    <div class=\"checks-container\">\r\n      <div class=\"checkbox-container\" *ngFor=\"let zones of zonesListAmenities\">\r\n        <mat-checkbox\r\n          [value]=\"zones.id\"\r\n          (change)=\"switchAmenitiesStatus(zones.id, 'zone')\"\r\n          >{{ zones.name }}</mat-checkbox\r\n        >\r\n      </div>\r\n    </div>\r\n    <p class=\"nm\">Extras</p>\r\n    <div class=\"checks-container\">\r\n      <div class=\"checkbox-container delete-button\" *ngFor=\"let extra of extrasListAmenities; let i = index\">\r\n        <div class=\"checkbox-wrap\">\r\n          <mat-checkbox\r\n            (change)=\"onExtraCheck($event, i)\"\r\n          >\r\n            {{ extra.name }}\r\n          </mat-checkbox>\r\n        </div>\r\n        <mat-icon\r\n          class=\"clr-yellow\"\r\n          (click)=\"deleteAmenity(i)\"\r\n          *ngIf=\"!extra.isGlobal\"\r\n          >delete</mat-icon\r\n        >\r\n      </div>\r\n      <div class=\"inl column news\">\r\n        <div>\r\n          <a\r\n            class=\"inl\"\r\n            (click)=\"activeNewService = true\"\r\n            *ngIf=\"!activeNewService\"\r\n          >\r\n            <img src=\"/assets/images/icons/icon-add.svg\" alt=\"Agregar\" />\r\n            <span>Agregar</span>\r\n          </a>\r\n          <mat-form-field *ngIf=\"activeNewService\">\r\n            <mat-label>Nuevo</mat-label>\r\n            <input\r\n              [formControl]=\"newExtraControl\"\r\n              name=\"addNew\"\r\n              [maxlength]=\"80\"\r\n              matInput\r\n              (keyup.enter)=\"addUserExtraAmenity()\"\r\n            />\r\n            <mat-error *ngIf=\"newExtraControl.hasError('minlength')\">\r\n              El mÃ­nimo de caracteres es de 3 caracteres\r\n            </mat-error>\r\n            <mat-error *ngIf=\"newExtraControl.hasError('maxlength')\">\r\n              El mÃ¡ximo de caracteres es de 80 caracteres\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <p class=\"nm\">Estacionamiento</p>\r\n    <div>\r\n      <mat-checkbox\r\n        *ngFor=\"let parking of parkingsListAmenities\"\r\n        [value]=\"parking.id\"\r\n        (change)=\"switchAmenitiesStatus(parking.id, 'parking')\"\r\n        >{{ parking.description }}</mat-checkbox\r\n      >\r\n    </div>\r\n    <p class=\"nm\">Opciones de pago en restaurante</p>\r\n    <div>\r\n      <mat-checkbox\r\n        *ngFor=\"let payment_methods of paymentListAmenities\"\r\n        [value]=\"payment_methods.id\"\r\n        (change)=\"switchAmenitiesStatus(payment_methods.id, 'payment')\"\r\n        >{{ payment_methods.name }}</mat-checkbox\r\n      >\r\n    </div>\r\n  </form>\r\n\r\n  <div class=\"inl column buttons\">\r\n    <div class=\"txtC\">\r\n      <button mat-button (click)=\"goBack()\" class=\"link\">\r\n        <img src=\"assets/images/icons/arrow.svg\" alt=\"Regresar\" />\r\n        <span>Regresar</span>\r\n      </button>\r\n    </div>\r\n    <div class=\"inl\">\r\n      <button class=\"later link\" (click)=\"declineToSaveAmenities()\">\r\n        <p>Lo harÃ© despuÃ©s</p>\r\n      </button>\r\n      <button class=\"btns\" (click)=\"submit()\">\r\n        <span>Continuar</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","<label [attr.for]=\"inputId\" class=\"mat-slide-toggle-label\" #label>\n  <div #toggleBar class=\"mat-slide-toggle-bar\"\n       [class.mat-slide-toggle-bar-no-side-margin]=\"!labelContent.textContent || !labelContent.textContent.trim()\">\n\n    <input #input class=\"mat-slide-toggle-input cdk-visually-hidden\" type=\"checkbox\"\n           role=\"switch\"\n           [id]=\"inputId\"\n           [required]=\"required\"\n           [tabIndex]=\"tabIndex\"\n           [checked]=\"checked\"\n           [disabled]=\"disabled\"\n           [attr.name]=\"name\"\n           [attr.aria-checked]=\"checked.toString()\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           (change)=\"_onChangeEvent($event)\"\n           (click)=\"_onInputClick($event)\">\n\n    <div class=\"mat-slide-toggle-thumb-container\" #thumbContainer>\n      <div class=\"mat-slide-toggle-thumb\"></div>\n      <div class=\"mat-slide-toggle-ripple\" mat-ripple\n           [matRippleTrigger]=\"label\"\n           [matRippleDisabled]=\"disableRipple || disabled\"\n           [matRippleCentered]=\"true\"\n           [matRippleRadius]=\"20\"\n           [matRippleAnimation]=\"{enterDuration: 150}\">\n\n        <div class=\"mat-ripple-element mat-slide-toggle-persistent-ripple\"></div>\n      </div>\n    </div>\n\n  </div>\n\n  <span class=\"mat-slide-toggle-content\" #labelContent (cdkObserveContent)=\"_onLabelTextChange()\">\n    <!-- Add an invisible span so JAWS can read the label -->\n    <span style=\"display:none\">&nbsp;</span>\n    <ng-content></ng-content>\n  </span>\n</label>\n","import { ISteps } from '@interfaces';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { RestaurantService, OnboardingService } from '@services';\r\nimport { Regex24Hours } from '@constants';\r\nimport { WorkingHoursResponse } from '@models';\r\nimport { Component, OnInit, Input, NgZone } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  FormControl,\r\n  Validators,\r\n  FormGroupDirective,\r\n  NgForm,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\n@Component({\r\n  selector: 'app-fourth-step',\r\n  templateUrl: './fourth-step.component.html',\r\n  styleUrls: ['./fourth-step.component.scss'],\r\n})\r\nexport class FourthStepComponent implements OnInit {\r\n  @Input() status: ISteps;\r\n  @Input() step: MatStepper;\r\n\r\n  public fourthFormGroup: FormGroup;\r\n  public isPerDay = false;\r\n  public isSameSchedule = false;\r\n  public mondayTimesMatcher = new ClosingTimeErrorMatcher(\r\n    'mondayClosingTimeIsNotLater'\r\n  );\r\n  public tuesdayTimesMatcher = new ClosingTimeErrorMatcher(\r\n    'tuesdayClosingTimeIsNotLater'\r\n  );\r\n  public wednesdayTimesMatcher = new ClosingTimeErrorMatcher(\r\n    'wednesdayClosingTimeIsNotLater'\r\n  );\r\n  public thursdayTimesMatcher = new ClosingTimeErrorMatcher(\r\n    'thursdayClosingTimeIsNotLater'\r\n  );\r\n  public fridayTimesMatcher = new ClosingTimeErrorMatcher(\r\n    'fridayClosingTimeIsNotLater'\r\n  );\r\n  public saturdayTimesMatcher = new ClosingTimeErrorMatcher(\r\n    'saturdayClosingTimeIsNotLater'\r\n  );\r\n  public sundayTimesMatcher = new ClosingTimeErrorMatcher(\r\n    'sundayClosingTimeIsNotLater'\r\n  );\r\n  public allTimesMatcher = new ClosingTimeErrorMatcher(\r\n    'allClosingTimeIsNotLater'\r\n  );\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private restaurantService: RestaurantService,\r\n    private onboardingService: OnboardingService,\r\n    private zone: NgZone\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    this.changeSchedule('schedulePerDay');\r\n  }\r\n\r\n  private getWorkingHours(): WorkingHoursResponse {\r\n    if (this.fourthFormGroup.get('typeOfSchedule').value === 'sameSchedule') {\r\n      const opening = this.fourthFormGroup.get('openingAll').value;\r\n      const closing = this.fourthFormGroup.get('closingAll').value;\r\n      const wHArray = [];\r\n      if (this.fourthFormGroup.get('openMonday').value) {\r\n        wHArray.push({ week_day: 1, opens_at: opening, closes_at: closing });\r\n      }\r\n      if (this.fourthFormGroup.get('openTuesday').value) {\r\n        wHArray.push({ week_day: 2, opens_at: opening, closes_at: closing });\r\n      }\r\n      if (this.fourthFormGroup.get('openWednesday').value) {\r\n        wHArray.push({ week_day: 3, opens_at: opening, closes_at: closing });\r\n      }\r\n      if (this.fourthFormGroup.get('openThursday').value) {\r\n        wHArray.push({ week_day: 4, opens_at: opening, closes_at: closing });\r\n      }\r\n      if (this.fourthFormGroup.get('openFriday').value) {\r\n        wHArray.push({ week_day: 5, opens_at: opening, closes_at: closing });\r\n      }\r\n      if (this.fourthFormGroup.get('openSaturday').value) {\r\n        wHArray.push({ week_day: 6, opens_at: opening, closes_at: closing });\r\n      }\r\n      if (this.fourthFormGroup.get('openSunday').value) {\r\n        wHArray.push({ week_day: 7, opens_at: opening, closes_at: closing });\r\n      }\r\n      return { working_hours: wHArray };\r\n    } else {\r\n      const wHArray = [];\r\n      if (this.fourthFormGroup.get('openMonday').value) {\r\n        wHArray.push({\r\n          week_day: 1,\r\n          opens_at: this.fourthFormGroup.get('openingMonday').value,\r\n          closes_at: this.fourthFormGroup.get('closingMonday').value,\r\n        });\r\n      }\r\n      if (this.fourthFormGroup.get('openTuesday').value) {\r\n        wHArray.push({\r\n          week_day: 2,\r\n          opens_at: this.fourthFormGroup.get('openingTuesday').value,\r\n          closes_at: this.fourthFormGroup.get('closingTuesday').value,\r\n        });\r\n      }\r\n      if (this.fourthFormGroup.get('openWednesday').value) {\r\n        wHArray.push({\r\n          week_day: 3,\r\n          opens_at: this.fourthFormGroup.get('openingWednesday').value,\r\n          closes_at: this.fourthFormGroup.get('closingWednesday').value,\r\n        });\r\n      }\r\n      if (this.fourthFormGroup.get('openThursday').value) {\r\n        wHArray.push({\r\n          week_day: 4,\r\n          opens_at: this.fourthFormGroup.get('openingThursday').value,\r\n          closes_at: this.fourthFormGroup.get('closingThursday').value,\r\n        });\r\n      }\r\n      if (this.fourthFormGroup.get('openFriday').value) {\r\n        wHArray.push({\r\n          week_day: 5,\r\n          opens_at: this.fourthFormGroup.get('openingFriday').value,\r\n          closes_at: this.fourthFormGroup.get('closingFriday').value,\r\n        });\r\n      }\r\n      if (this.fourthFormGroup.get('openSaturday').value) {\r\n        wHArray.push({\r\n          week_day: 6,\r\n          opens_at: this.fourthFormGroup.get('openingSaturday').value,\r\n          closes_at: this.fourthFormGroup.get('closingSaturday').value,\r\n        });\r\n      }\r\n      if (this.fourthFormGroup.get('openSunday').value) {\r\n        wHArray.push({\r\n          week_day: 7,\r\n          opens_at: this.fourthFormGroup.get('openingSunday').value,\r\n          closes_at: this.fourthFormGroup.get('closingSunday').value,\r\n        });\r\n      }\r\n      return { working_hours: wHArray };\r\n    }\r\n  }\r\n\r\n  public initForm(): void {\r\n    this.fourthFormGroup = this.fb.group(\r\n      {\r\n        typeOfSchedule: new FormControl('schedulePerDay'),\r\n        openingMonday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        closingMonday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        openingTuesday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        closingTuesday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        openingWednesday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        closingWednesday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        openingThursday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        closingThursday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        openingFriday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        closingFriday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        openingSaturday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        closingSaturday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        openingSunday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        closingSunday: new FormControl('00:00', [\r\n          Validators.required,\r\n          Validators.pattern(Regex24Hours),\r\n        ]),\r\n        openingAll: new FormControl('00:00'),\r\n        closingAll: new FormControl('00:00'),\r\n        openMonday: new FormControl(true),\r\n        openTuesday: new FormControl(true),\r\n        openWednesday: new FormControl(true),\r\n        openThursday: new FormControl(true),\r\n        openFriday: new FormControl(true),\r\n        openSaturday: new FormControl(true),\r\n        openSunday: new FormControl(true),\r\n      },\r\n      {\r\n        validators: [\r\n          this.mondayTimesValidator,\r\n          this.tuesdayTimesValidator,\r\n          this.wednesdayTimesValidator,\r\n          this.thursdayTimesValidator,\r\n          this.fridayTimesValidator,\r\n          this.saturdayTimesValidator,\r\n          this.sundayTimesValidator,\r\n          this.allTimesValidator,\r\n        ],\r\n      }\r\n    );\r\n  }\r\n\r\n  public changeTimeValidations(selectedSchedule: string) {\r\n    if (selectedSchedule === 'sameSchedule') {\r\n      this.fourthFormGroup.get('openingMonday').clearValidators();\r\n      this.fourthFormGroup.get('closingMonday').clearValidators();\r\n      this.fourthFormGroup.get('openingTuesday').clearValidators();\r\n      this.fourthFormGroup.get('closingTuesday').clearValidators();\r\n      this.fourthFormGroup.get('openingWednesday').clearValidators();\r\n      this.fourthFormGroup.get('closingWednesday').clearValidators();\r\n      this.fourthFormGroup.get('openingThursday').clearValidators();\r\n      this.fourthFormGroup.get('closingThursday').clearValidators();\r\n      this.fourthFormGroup.get('openingFriday').clearValidators();\r\n      this.fourthFormGroup.get('closingFriday').clearValidators();\r\n      this.fourthFormGroup.get('openingSaturday').clearValidators();\r\n      this.fourthFormGroup.get('closingSaturday').clearValidators();\r\n      this.fourthFormGroup.get('openingSunday').clearValidators();\r\n      this.fourthFormGroup.get('closingSunday').clearValidators();\r\n      this.fourthFormGroup\r\n        .get('openingAll')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('closingAll')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n    }\r\n    if (selectedSchedule === 'schedulePerDay') {\r\n      this.fourthFormGroup\r\n        .get('openingMonday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('closingMonday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('openingTuesday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('closingTuesday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('openingWednesday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('closingWednesday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('openingThursday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('closingThursday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('openingFriday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('closingFriday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('openingSaturday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('closingSaturday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('openingSunday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup\r\n        .get('closingSunday')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.fourthFormGroup.get('openingAll').clearValidators();\r\n      this.fourthFormGroup.get('closingAll').clearValidators();\r\n    }\r\n    for (const key in this.fourthFormGroup.controls) {\r\n      if (this.fourthFormGroup.get(key)) {\r\n        this.fourthFormGroup.get(key).updateValueAndValidity();\r\n      }\r\n    }\r\n  }\r\n\r\n  public switchDayScheduleStatus(\r\n    e: any,\r\n    openControlName: string,\r\n    closeControlName: string\r\n  ): void {\r\n    if (e.checked) {\r\n      this.fourthFormGroup.get(openControlName).enable();\r\n      this.fourthFormGroup.get(closeControlName).enable();\r\n    } else {\r\n      this.fourthFormGroup.get(openControlName).disable();\r\n      this.fourthFormGroup.get(closeControlName).disable();\r\n    }\r\n  }\r\n\r\n  public get isAnyDaySelected(): boolean {\r\n    return (\r\n      this.fourthFormGroup.get('openMonday').value ||\r\n      this.fourthFormGroup.get('openTuesday').value ||\r\n      this.fourthFormGroup.get('openWednesday').value ||\r\n      this.fourthFormGroup.get('openThursday').value ||\r\n      this.fourthFormGroup.get('openFriday').value ||\r\n      this.fourthFormGroup.get('openSaturday').value ||\r\n      this.fourthFormGroup.get('openSunday').value\r\n    );\r\n  }\r\n\r\n  private mondayTimesValidator(form: FormGroup) {\r\n    const opening = form.get('openingMonday').value;\r\n    const closing = form.get('closingMonday').value;\r\n    if (\r\n      (opening && closing) && ((opening < closing) || (opening > closing)) ||\r\n      form.get('typeOfSchedule').value === 'sameSchedule' ||\r\n      form.get('closingMonday').status === 'DISABLED'\r\n    ) {\r\n      return null;\r\n    } else {\r\n      return { mondayClosingTimeIsNotLater: true };\r\n    }\r\n  }\r\n\r\n  private tuesdayTimesValidator(form: FormGroup) {\r\n    const opening = form.get('openingTuesday').value;\r\n    const closing = form.get('closingTuesday').value;\r\n    if (\r\n      (opening && closing) && ((opening < closing) || (opening > closing)) ||\r\n      form.get('typeOfSchedule').value === 'sameSchedule' ||\r\n      form.get('closingTuesday').status === 'DISABLED'\r\n    ) {\r\n      return null;\r\n    } else {\r\n      return { tuesdayClosingTimeIsNotLater: true };\r\n    }\r\n  }\r\n\r\n  private wednesdayTimesValidator(form: FormGroup) {\r\n    const opening = form.get('openingWednesday').value;\r\n    const closing = form.get('closingWednesday').value;\r\n    if (\r\n      (opening && closing) && ((opening < closing) || (opening > closing)) ||\r\n      form.get('typeOfSchedule').value === 'sameSchedule' ||\r\n      form.get('closingWednesday').status === 'DISABLED'\r\n    ) {\r\n      return null;\r\n    } else {\r\n      return { wednesdayClosingTimeIsNotLater: true };\r\n    }\r\n  }\r\n\r\n  private thursdayTimesValidator(form: FormGroup) {\r\n    const opening = form.get('openingThursday').value;\r\n    const closing = form.get('closingThursday').value;\r\n    if (\r\n      (opening && closing) && ((opening < closing) || (opening > closing)) ||\r\n      form.get('typeOfSchedule').value === 'sameSchedule' ||\r\n      form.get('closingThursday').status === 'DISABLED'\r\n    ) {\r\n      return null;\r\n    } else {\r\n      return { thursdayClosingTimeIsNotLater: true };\r\n    }\r\n  }\r\n\r\n  private fridayTimesValidator(form: FormGroup) {\r\n    const opening = form.get('openingFriday').value;\r\n    const closing = form.get('closingFriday').value;\r\n    if (\r\n      (opening && closing) && ((opening < closing) || (opening > closing)) ||\r\n      form.get('typeOfSchedule').value === 'sameSchedule' ||\r\n      form.get('closingFriday').status === 'DISABLED'\r\n    ) {\r\n      return null;\r\n    } else {\r\n      return { fridayClosingTimeIsNotLater: true };\r\n    }\r\n  }\r\n\r\n  private saturdayTimesValidator(form: FormGroup) {\r\n    const opening = form.get('openingSaturday').value;\r\n    const closing = form.get('closingSaturday').value;\r\n    if (\r\n      (opening && closing) && ((opening < closing) || (opening > closing)) ||\r\n      form.get('typeOfSchedule').value === 'sameSchedule' ||\r\n      form.get('closingSaturday').status === 'DISABLED'\r\n    ) {\r\n      return null;\r\n    } else {\r\n      return { saturdayClosingTimeIsNotLater: true };\r\n    }\r\n  }\r\n\r\n  private sundayTimesValidator(form: FormGroup) {\r\n    const opening = form.get('openingSunday').value;\r\n    const closing = form.get('closingSunday').value;\r\n    if (\r\n      (opening && closing) && ((opening < closing) || (opening > closing)) ||\r\n      form.get('typeOfSchedule').value === 'sameSchedule' ||\r\n      form.get('closingSunday').status === 'DISABLED'\r\n    ) {\r\n      return null;\r\n    } else {\r\n      return { sundayClosingTimeIsNotLater: true };\r\n    }\r\n  }\r\n\r\n  private allTimesValidator(form: FormGroup) {\r\n    const opening = form.get('openingAll').value;\r\n    const closing = form.get('closingAll').value;\r\n    if (\r\n      (opening && closing) && ((opening < closing) || (opening > closing)) ||\r\n      form.get('typeOfSchedule').value === 'schedulePerDay' ||\r\n      form.get('closingMonday').status === 'DISABLED'\r\n    ) {\r\n      return null;\r\n    } else {\r\n      return { allClosingTimeIsNotLater: true };\r\n    }\r\n  }\r\n\r\n  private setRestaurantSchedules() {\r\n    const schedules: WorkingHoursResponse = this.getWorkingHours();\r\n    this.restaurantService\r\n      .setRestaurantSchedules(schedules, this.onboardingService.restaurantId)\r\n      .subscribe((response) => {\r\n        this.continueToNextStep();\r\n      });\r\n  }\r\n\r\n  public submit(): void {\r\n    if (this.fourthFormGroup.invalid) {\r\n      this.onboardingService.sendFieldsAlert(this.fourthFormGroup);\r\n    } else {\r\n      this.setRestaurantSchedules();\r\n    }\r\n  }\r\n\r\n  public continueToNextStep(): void {\r\n    this.zone.run(() => {\r\n      this.step.selected.completed = true;\r\n      this.step.next();\r\n      this.onboardingService.setStep(this.status, {\r\n        isFourthStepCompleted: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  public changeSchedule(type: any): void {\r\n    if (type === 'sameSchedule') {\r\n      this.isSameSchedule = !this.isSameSchedule;\r\n      this.isPerDay = false;\r\n      this.changeTimeValidations('sameSchedule');\r\n    } else if (type === 'schedulePerDay') {\r\n      this.isPerDay = !this.isPerDay;\r\n      this.isSameSchedule = false;\r\n      this.changeTimeValidations('schedulePerDay');\r\n    }\r\n    this.fourthForm.typeOfSchedule.setValue(type);\r\n  }\r\n\r\n  get fourthForm(): { [key: string]: AbstractControl } {\r\n    return this.fourthFormGroup.controls;\r\n  }\r\n\r\n  public goBack(): void {\r\n    this.onboardingService.setStep(this.status, {\r\n      isThirdStepCompleted: false,\r\n    });\r\n    this.step.previous();\r\n  }\r\n}\r\nclass ClosingTimeErrorMatcher implements ErrorStateMatcher {\r\n  constructor(private errorName: string) {}\r\n  isErrorState(\r\n    control: FormControl | null,\r\n    form: FormGroupDirective | NgForm | null\r\n  ): boolean {\r\n    return (\r\n      ((form.submitted || control.touched) &&\r\n        control.status !== 'DISABLED' &&\r\n        form.hasError(this.errorName)) ||\r\n      ((form.submitted || control.touched) &&\r\n        control.status !== 'DISABLED' &&\r\n        control.invalid)\r\n    );\r\n  }\r\n}\r\n","<div class=\"container\" id=\"fourthForm\">\r\n  <p class=\"h5 txtC clr-gray\">Horarios</p>\r\n  <p class=\"txtC\">Â¿A quÃ© hora podrÃ¡n hacer reservaciones tus clientes?</p>\r\n  <form (keydown.enter)=\"$event.preventDefault()\" id=\"fourthForm\" [formGroup]=\"fourthFormGroup\" novalidate>\r\n    <p class=\"nm text-center\">Horarios de la sucursal matriz</p>\r\n\r\n    <div class=\"schedule-toggles\">\r\n      <mat-slide-toggle\r\n        (change)=\"changeSchedule('sameSchedule')\"\r\n        [checked]=\"isSameSchedule\"\r\n      >\r\n        Tengo el mismo horario todos los dÃ­as\r\n      </mat-slide-toggle>\r\n\r\n      <mat-slide-toggle\r\n        [checked]=\"isPerDay\"\r\n        (change)=\"changeSchedule('schedulePerDay')\"\r\n      >\r\n        Quiero seleccionar un horario por dÃ­a\r\n      </mat-slide-toggle>\r\n    </div>\r\n\r\n    <p\r\n      class=\"format center\"\r\n      *ngIf=\"fourthFormGroup.get('typeOfSchedule').value === 'schedulePerDay'\"\r\n    >\r\n      *Formato de 24 hrs.\r\n    </p>\r\n\r\n    <div class=\"schedule\">\r\n      <div\r\n        class=\"label inl\"\r\n        *ngIf=\"fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\"\r\n      >\r\n        <div></div>\r\n        <p>Apertura</p>\r\n        <p>Cierre</p>\r\n      </div>\r\n      <div class=\"inl\">\r\n        <div\r\n          class=\"wht\"\r\n          [class.oneTime]=\"\r\n            fourthFormGroup.get('typeOfSchedule').value === 'sameSchedule'\r\n          \"\r\n        >\r\n          <div class=\"day inl\">\r\n            <mat-checkbox\r\n              formControlName=\"openMonday\"\r\n              (change)=\"\r\n                switchDayScheduleStatus(\r\n                  $event,\r\n                  'openingMonday',\r\n                  'closingMonday'\r\n                )\r\n              \"\r\n              >Lunes</mat-checkbox\r\n            >\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"openingMonday\"\r\n                name=\"openingMonday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingMonday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"fourthFormGroup.get('openingMonday').hasError('pattern')\"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"closingMonday\"\r\n                name=\"closingMonday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [errorStateMatcher]=\"mondayTimesMatcher\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingMonday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"fourthFormGroup.get('closingMonday').hasError('pattern')\"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  !fourthFormGroup.get('closingMonday').hasError('pattern')\r\n                \"\r\n              >\r\n                Debe ser despuÃ©s\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"day inl\">\r\n            <mat-checkbox\r\n              formControlName=\"openTuesday\"\r\n              (change)=\"\r\n                switchDayScheduleStatus(\r\n                  $event,\r\n                  'openingTuesday',\r\n                  'closingTuesday'\r\n                )\r\n              \"\r\n              >Martes</mat-checkbox\r\n            >\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"openingTuesday\"\r\n                name=\"openingTuesday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingTuesday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingTuesday').hasError('pattern')\r\n                \"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"closingTuesday\"\r\n                name=\"closingTuesday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [errorStateMatcher]=\"tuesdayTimesMatcher\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingTuesday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingTuesday').hasError('pattern')\r\n                \"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  !fourthFormGroup.get('closingTuesday').hasError('pattern')\r\n                \"\r\n              >\r\n                Debe ser despuÃ©s\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"day inl\">\r\n            <mat-checkbox\r\n              formControlName=\"openWednesday\"\r\n              (change)=\"\r\n                switchDayScheduleStatus(\r\n                  $event,\r\n                  'openingWednesday',\r\n                  'closingWednesday'\r\n                )\r\n              \"\r\n              >MiÃ©rcoles</mat-checkbox\r\n            >\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"openingWednesday\"\r\n                name=\"openingWednesday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingWednesday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingWednesday').hasError('pattern')\r\n                \"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"closingWednesday\"\r\n                name=\"closingWednesday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [errorStateMatcher]=\"wednesdayTimesMatcher\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingWednesday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingWednesday').hasError('pattern')\r\n                \"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  !fourthFormGroup.get('closingWednesday').hasError('pattern')\r\n                \"\r\n              >\r\n                Debe ser despuÃ©s\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"day inl\">\r\n            <mat-checkbox\r\n              formControlName=\"openThursday\"\r\n              (change)=\"\r\n                switchDayScheduleStatus(\r\n                  $event,\r\n                  'openingThursday',\r\n                  'closingThursday'\r\n                )\r\n              \"\r\n              >Jueves</mat-checkbox\r\n            >\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"openingThursday\"\r\n                name=\"openingThursday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingThursday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingThursday').hasError('pattern')\r\n                \"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"closingThursday\"\r\n                name=\"closingThursday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [errorStateMatcher]=\"thursdayTimesMatcher\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingThursday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingThursday').hasError('pattern')\r\n                \"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  !fourthFormGroup.get('closingThursday').hasError('pattern')\r\n                \"\r\n              >\r\n                Debe ser despuÃ©s\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"day inl\">\r\n            <mat-checkbox\r\n              formControlName=\"openFriday\"\r\n              (change)=\"\r\n                switchDayScheduleStatus(\r\n                  $event,\r\n                  'openingFriday',\r\n                  'closingFriday'\r\n                )\r\n              \"\r\n              >Viernes</mat-checkbox\r\n            >\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"openingFriday\"\r\n                name=\"openingFriday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingFriday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"fourthFormGroup.get('openingFriday').hasError('pattern')\"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"closingFriday\"\r\n                name=\"closingFriday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [errorStateMatcher]=\"fridayTimesMatcher\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingFriday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"fourthFormGroup.get('closingFriday').hasError('pattern')\"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  !fourthFormGroup.get('closingFriday').hasError('pattern')\r\n                \"\r\n              >\r\n                Debe ser despuÃ©s\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"day inl\">\r\n            <mat-checkbox\r\n              formControlName=\"openSaturday\"\r\n              (change)=\"\r\n                switchDayScheduleStatus(\r\n                  $event,\r\n                  'openingSaturday',\r\n                  'closingSaturday'\r\n                )\r\n              \"\r\n              >SÃ¡bado</mat-checkbox\r\n            >\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"openingSaturday\"\r\n                name=\"openingSaturday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingSaturday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingSaturday').hasError('pattern')\r\n                \"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"closingSaturday\"\r\n                name=\"closingSaturday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [errorStateMatcher]=\"saturdayTimesMatcher\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingSaturday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingSaturday').hasError('pattern')\r\n                \"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  !fourthFormGroup.get('closingSaturday').hasError('pattern')\r\n                \"\r\n              >\r\n                Debe ser despuÃ©s\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"day inl\">\r\n            <mat-checkbox\r\n              formControlName=\"openSunday\"\r\n              (change)=\"\r\n                switchDayScheduleStatus(\r\n                  $event,\r\n                  'openingSunday',\r\n                  'closingSunday'\r\n                )\r\n              \"\r\n              >Domingo</mat-checkbox\r\n            >\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"openingSunday\"\r\n                name=\"openingSunday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('openingSunday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"fourthFormGroup.get('openingSunday').hasError('pattern')\"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field\r\n              *ngIf=\"\r\n                fourthFormGroup.get('typeOfSchedule').value !== 'sameSchedule'\r\n              \"\r\n            >\r\n              <input\r\n                matInput\r\n                formControlName=\"closingSunday\"\r\n                name=\"closingSunday\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [errorStateMatcher]=\"sundayTimesMatcher\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  fourthFormGroup.get('closingSunday').hasError('required')\r\n                \"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"fourthFormGroup.get('closingSunday').hasError('pattern')\"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  !fourthFormGroup.get('closingSunday').hasError('pattern')\r\n                \"\r\n              >\r\n                Debe ser despuÃ©s\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n        <div\r\n          class=\"sameSchedule\"\r\n          *ngIf=\"fourthFormGroup.get('typeOfSchedule').value === 'sameSchedule'\"\r\n        >\r\n          <p class=\"format\">*Formato de 24 hrs.</p>\r\n\r\n          <div class=\"label inl\">\r\n            <p>Apertura</p>\r\n            <p>Cierre</p>\r\n          </div>\r\n          <div class=\"inl\">\r\n            <mat-form-field>\r\n              <input\r\n                matInput\r\n                formControlName=\"openingAll\"\r\n                name=\"openingAll\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"fourthFormGroup.get('openingAll').hasError('required')\"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"fourthFormGroup.get('openingAll').hasError('pattern')\"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n              <input\r\n                matInput\r\n                formControlName=\"closingAll\"\r\n                name=\"closingAll\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [errorStateMatcher]=\"allTimesMatcher\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"fourthFormGroup.get('closingAll').hasError('required')\"\r\n              >\r\n                Esta informaciÃ³n es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"fourthFormGroup.get('closingAll').hasError('pattern')\"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"!fourthFormGroup.get('closingAll').hasError('pattern')\"\r\n              >\r\n                Debe ser despuÃ©s\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"inl column buttons\">\r\n      <div class=\"txtR\">\r\n        <button mat-button (click)=\"goBack()\" class=\"link\">\r\n          <img src=\"assets/images/icons/arrow.svg\" alt=\"Regresar\" />\r\n          <span>Regresar</span>\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <button class=\"btns\" (click)=\"submit()\" [disabled]=\"!isAnyDaySelected\">\r\n          <span>Continuar</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { MatStepper } from '@angular/material/stepper';\r\nimport { ISteps } from '@interfaces';\r\nimport { Router } from '@angular/router';\r\nimport { RestaurantService, OnboardingService } from '@services';\r\nimport { GalleryImage } from '@models';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { RegexUrl } from '@constants';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  FormControl,\r\n  Validators,\r\n  FormArray,\r\n} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-fifth-step',\r\n  templateUrl: './fifth-step.component.html',\r\n  styleUrls: ['./fifth-step.component.scss'],\r\n})\r\nexport class FifthStepComponent implements OnInit {\r\n  @Input() status: ISteps;\r\n  @Input() step: MatStepper;\r\n  public coverImage = '';\r\n  public galleryImages: FormArray;\r\n  public brandImages: Array<any> = [];\r\n  public fifthFormGroup: FormGroup;\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private snackBar: MatSnackBar,\r\n    private onboardingService: OnboardingService,\r\n    private restaurantService: RestaurantService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  public initForm() {\r\n    this.fifthFormGroup = this.fb.group({\r\n      coverImage: new FormControl(null, Validators.required),\r\n      imageLink: new FormControl('', Validators.pattern(RegexUrl)),\r\n      galleryImages: this.fb.array([]),\r\n      galleryImageInput: new FormControl(),\r\n    });\r\n  }\r\n\r\n  public setImageValueToGallery(e: any, controlName: string) {\r\n    const file = e.dataTransfer ? e.dataTransfer.files[0] : e.target.files[0];\r\n    const fileSize = file.size;\r\n    const fileType = file.type;\r\n    if (fileSize > 1048576) {\r\n      this.snackBar.open('La imagen excede 1MB', 'Entendido', {\r\n        duration: 15000,\r\n      });\r\n      this.fifthFormGroup.get('galleryImageInput').setValue(null);\r\n      return;\r\n    }\r\n    if (\r\n      fileType !== 'image/png' &&\r\n      fileType !== 'image/jpeg' &&\r\n      fileType !== 'image/jpg'\r\n    ) {\r\n      this.snackBar.open('El archivo no es de un tipo permitido', 'Entendido', {\r\n        duration: 15000,\r\n      });\r\n      return;\r\n    }\r\n    const reader = new FileReader();\r\n    reader.onload = (eImage: any) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        if (controlName === 'coverImage') {\r\n          this.fifthFormGroup.get(controlName).setValue(file);\r\n          this.coverImage = img.src;\r\n        } else if (controlName === 'gallery') {\r\n          if (this.galleryImagesAsFormArray.length < 10) {\r\n            const imageAux: GalleryImage = {\r\n              src: img.src,\r\n              fileValue: file,\r\n              id: null,\r\n              position: this.galleryImagesAsFormArray.length + 1,\r\n            };\r\n            this.addGalleryImage(imageAux);\r\n            if (this.galleryImagesAsFormArray.length === 10) {\r\n              this.fifthFormGroup.get('galleryImageInput').disable();\r\n            }\r\n          } else {\r\n            this.snackBar.open(\r\n              'Has alcanzado el limite de 10 imÃ¡genes',\r\n              'Entendido',\r\n              {\r\n                duration: 15000,\r\n              }\r\n            );\r\n          }\r\n          this.fifthFormGroup.get('galleryImageInput').setValue(null);\r\n        }\r\n      };\r\n      img.src = eImage.target.result;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  private createGalleryImage(galleryImage: GalleryImage): FormGroup {\r\n    return this.fb.group({\r\n      fileValue: [galleryImage.fileValue, []],\r\n      src: [galleryImage.src, []],\r\n    });\r\n  }\r\n\r\n  public removeGalleryImage(imageIndex: number) {\r\n    this.galleryImages = this.galleryImagesAsFormArray;\r\n    this.galleryImages.removeAt(imageIndex);\r\n    this.fifthFormGroup.get('galleryImageInput').enable();\r\n  }\r\n\r\n  public get galleryImagesAsFormArray() {\r\n    return this.fifthFormGroup.get('galleryImages') as FormArray;\r\n  }\r\n\r\n  private addGalleryImage(galleryImage: GalleryImage): void {\r\n    this.galleryImagesAsFormArray.push(this.createGalleryImage(galleryImage));\r\n  }\r\n\r\n  private submitFifthtStep() {\r\n    const galleryToSave: FormData = this.getGallerytoSave();\r\n    this.restaurantService\r\n      .setRestaurantGallery(galleryToSave, this.onboardingService.restaurantId)\r\n      .subscribe(() => {\r\n        this.router.navigate(['/admin/menu']);\r\n      });\r\n  }\r\n\r\n  public declineToStoreImages(): void {\r\n    this.router.navigate(['/admin/menu']);\r\n  }\r\n\r\n  private getGallerytoSave(): FormData {\r\n    const galleryToSave = new FormData();\r\n    galleryToSave.append('cover', this.fifthFormGroup.get('coverImage').value);\r\n    for (let i = 0; i < this.galleryImagesAsFormArray.controls.length; i++) {\r\n      galleryToSave.append(\r\n        'gallery[' + i + ']',\r\n        this.galleryImagesAsFormArray.controls[i].get('fileValue').value\r\n      );\r\n    }\r\n    if (this.fifthFormGroup.get('imageLink').value) {\r\n      galleryToSave.append(\r\n        'matterport',\r\n        this.fifthFormGroup.get('imageLink').value\r\n      );\r\n    }\r\n    return galleryToSave;\r\n  }\r\n\r\n  public submit(): void {\r\n    if (this.fifthFormGroup.invalid) {\r\n      this.onboardingService.sendFieldsAlert(this.fifthFormGroup);\r\n    } else {\r\n      this.submitFifthtStep();\r\n    }\r\n  }\r\n\r\n  public goBack(): void {\r\n    this.onboardingService.setStep(this.status, {\r\n      isFourthStepCompleted: false,\r\n    });\r\n    this.step.previous();\r\n  }\r\n}\r\n","<div class=\"container\" id=\"fifthForm\">\r\n  <p class=\"h5 txtC clr-gray\">ImÃ¡genes para tu sucursal</p>\r\n  <p class=\"txtC\">SerÃ¡ tu carta de presentaciÃ³n en la aplicaciÃ³n</p>\r\n\r\n  <form\r\n    (keydown.enter)=\"$event.preventDefault()\"\r\n    id=\"fifthForm\"\r\n    [formGroup]=\"fifthFormGroup\"\r\n    novalidate\r\n  >\r\n    <p class=\"nm\">Imagen de portada de sucursal</p>\r\n    <p class=\"clr-gray\">Esta serÃ¡ la primera imagen que verÃ¡n tus clientes</p>\r\n    <div class=\"new-image\">\r\n      <div class=\"new-image-containt\">\r\n        <div class=\"preview\">\r\n          <div\r\n            class=\"backImg full cnt\"\r\n            *ngIf=\"coverImage !== ''\"\r\n            [ngStyle]=\"{ backgroundImage: 'url(' + coverImage + ')' }\"\r\n          ></div>\r\n        </div>\r\n        <div class=\"onboarding-file\">\r\n          <div class=\"file-button\">\r\n            <input\r\n              type=\"file\"\r\n              (change)=\"setImageValueToGallery($event, 'coverImage')\"\r\n              accept=\".png, .jpeg, .jpg\"\r\n            />\r\n            <p class=\"title\">Subir foto</p>\r\n          </div>\r\n          <small class=\"clr-nm\"\r\n            >JPG, JPEG, PNG <br />\r\n            Dimensiones 600 x 400px <br />\r\n            Peso mÃ¡ximo 1 MB</small\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <p class=\"nm\">GalerÃ­a de imÃ¡genes</p>\r\n    <p class=\"clr-gray\">\r\n      Tus clientes podrÃ¡n ver mÃ¡s sobre tu negocio y los platillos que ofreces\r\n      (hasta 10 imÃ¡genes)\r\n    </p>\r\n    <div class=\"new-image gallery\">\r\n      <div class=\"new-image-containt\">\r\n        <div\r\n          class=\"preview-img\"\r\n          [sortablejs]=\"galleryImagesAsFormArray.controls\"\r\n        >\r\n          <div\r\n            class=\"preview\"\r\n            *ngFor=\"\r\n              let galleryImage of galleryImagesAsFormArray.controls;\r\n              let i = index\r\n            \"\r\n          >\r\n            <div\r\n              class=\"backImg full cnt\"\r\n              [ngStyle]=\"{\r\n                backgroundImage: 'url(' + galleryImage.get('src').value + ')'\r\n              }\"\r\n            >\r\n              <div class=\"background-shadow\">\r\n                <img\r\n                  src=\"/assets/images/icons/btn-delete.svg\"\r\n                  (click)=\"removeGalleryImage(i)\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            class=\"preview\"\r\n            *ngIf=\"galleryImagesAsFormArray.controls.length === 0\"\r\n          ></div>\r\n        </div>\r\n        <div class=\"onboarding-file\">\r\n          <div class=\"file-button\">\r\n            <input\r\n              type=\"file\"\r\n              (change)=\"setImageValueToGallery($event, 'gallery')\"\r\n              accept=\".png, .jpeg, .jpg\"\r\n              placeholder=\"Subir archivo\"\r\n              formControlName=\"galleryImageInput\"\r\n            />\r\n            <p class=\"title\">Agregar foto</p>\r\n          </div>\r\n          <small class=\"clr-nm\"\r\n            >JPG, JPEG, PNG <br />\r\n            Dimensiones 600 x 400px <br />Peso mÃ¡ximo 1 MB</small\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <p class=\"nm\">Imagen 360Âº</p>\r\n    <p class=\"clr-gray\">Ingresa el link para tu imagen 360Âº</p>\r\n    <mat-form-field>\r\n      <mat-label>Enlace</mat-label>\r\n      <input matInput formControlName=\"imageLink\" name=\"imageLink\" />\r\n      <mat-error>El formato es incorrecto</mat-error>\r\n    </mat-form-field>\r\n  </form>\r\n\r\n  <div class=\"inl column buttons\">\r\n    <div class=\"txtC\">\r\n      <button mat-button (click)=\"goBack()\" class=\"link\">\r\n        <img src=\"assets/images/icons/arrow.svg\" alt=\"Regresar\" />\r\n        <span>Regresar</span>\r\n      </button>\r\n    </div>\r\n    <div class=\"inl\">\r\n      <button class=\"later link\" (click)=\"declineToStoreImages()\">\r\n        <p>Lo harÃ© despuÃ©s</p>\r\n      </button>\r\n\r\n      <button class=\"btns\" (click)=\"submit()\">\r\n        <span>Continuar</span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { MatHorizontalStepper, MatStepper } from '@angular/material/stepper';\r\nimport { ISteps } from '@interfaces';\r\nimport { OnboardingService, FranchiseService } from '@services';\r\nimport { ResponseFranchises } from '@models';\r\nimport { Component, NgZone, OnInit, ViewChild } from '@angular/core';\r\nimport { STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';\r\n@Component({\r\n  selector: 'app-onboarding',\r\n  templateUrl: './onboarding.component.html',\r\n  styleUrls: ['./onboarding.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: STEPPER_GLOBAL_OPTIONS,\r\n      useValue: { displayDefaultIndicatorType: true },\r\n    },\r\n  ],\r\n})\r\nexport class OnboardingComponent implements OnInit {\r\n  @ViewChild('stepper') stp: MatStepper;\r\n  public status: ISteps;\r\n  public isFirstStepEditable: boolean;\r\n  public isSecondStepEditable: boolean;\r\n  public hasOnboardingToSkipFirstStep = false;\r\n  public isOnboardingGettingFranchisesInfo = true;\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private onboardingService: OnboardingService,\r\n    private franchiseService: FranchiseService\r\n  ) {}\r\n\r\n  public ngOnInit() {\r\n    this.onboardingService.onboardingStatus.subscribe((response) => {\r\n      this.status = response;\r\n    });\r\n    this.checkFranchiseStatus();\r\n  }\r\n\r\n  private checkFranchiseStatus(): void {\r\n    this.franchiseService\r\n      .getFranchises()\r\n      .subscribe((responseFranchises: ResponseFranchises) => {\r\n        if (responseFranchises.franchises.length > 0) {\r\n          this.hasOnboardingToSkipFirstStep = true;\r\n          this.onboardingService.setfranchiseId(\r\n            responseFranchises.franchises[0].id\r\n          );\r\n        }\r\n        this.isOnboardingGettingFranchisesInfo = false;\r\n      });\r\n  }\r\n\r\n  public loaded(stepper: MatHorizontalStepper) {\r\n    this.zone.run(() => {\r\n      if (stepper.selectedIndex !== 0 && this.status.isFirstStepCompleted) {\r\n        this.isFirstStepEditable = true;\r\n      }\r\n      if (stepper.selectedIndex !== 1 && this.status.isSecondStepCompleted) {\r\n        this.isSecondStepEditable = true;\r\n      }\r\n    });\r\n  }\r\n}\r\n","<section id=\"onboarding\" *ngIf=\"!isOnboardingGettingFranchisesInfo\">\r\n  <div class=\"content\">\r\n    <img src=\"assets/images/logos/logo.svg\" alt=\"Logo\" />\r\n    <mat-horizontal-stepper\r\n      [linear]=\"true\"\r\n      [disableRipple]=\"true\"\r\n      #stepper\r\n      (selectionChange)=\"loaded(stepper)\"\r\n    >\r\n      <mat-step\r\n        [completed]=\"status.isFirstStepCompleted\"\r\n        *ngIf=\"!hasOnboardingToSkipFirstStep\"\r\n      >\r\n        <app-first-step\r\n          [isEditing]=\"isFirstStepEditable\"\r\n          [step]=\"stepper\"\r\n          [status]=\"status\"\r\n        >\r\n        </app-first-step>\r\n      </mat-step>\r\n      <mat-step [completed]=\"status.isSecondStepCompleted\">\r\n        <app-second-step\r\n          [step]=\"stepper\"\r\n          [status]=\"status\"\r\n          [isEditing]=\"isSecondStepEditable\"\r\n          [hasReturnOptionToBeVisible]=\"!hasOnboardingToSkipFirstStep\"\r\n        >\r\n        </app-second-step>\r\n      </mat-step>\r\n      <mat-step [completed]=\"status.isThirdStepCompleted\">\r\n        <app-third-step [step]=\"stepper\" [status]=\"status\"> </app-third-step>\r\n      </mat-step>\r\n      <mat-step [completed]=\"status.isFourthStepCompleted\">\r\n        <app-fourth-step [step]=\"stepper\" [status]=\"status\"></app-fourth-step>\r\n      </mat-step>\r\n      <mat-step [completed]=\"status.isFifthStepCompleted\">\r\n        <app-fifth-step [step]=\"stepper\" [status]=\"status\"></app-fifth-step>\r\n      </mat-step>\r\n\r\n      <!-- Overwriting the icon that shows when the step has been filled -->\r\n      <ng-template matStepperIcon=\"edit\" let-index=\"index\">\r\n        {{ index + 1 }}\r\n      </ng-template>\r\n    </mat-horizontal-stepper>\r\n  </div>\r\n</section>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { OnboardingComponent } from './onboarding.component';\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: OnboardingComponent\r\n  }\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class OnboardingRoutingModule {}\r\n"]}