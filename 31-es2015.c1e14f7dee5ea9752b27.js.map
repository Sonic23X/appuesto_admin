{"version":3,"sources":["webpack:///node_modules/@angular/material/fesm2015/card.js","webpack:///node_modules/@angular/material/card/index.d.ts.MatCard.html","webpack:///src/app/pages/staff-layout/staff-menu/staff-menu.module.ts","webpack:///src/app/pages/staff-layout/staff-menu/staff-menu.component.ts","webpack:///src/app/pages/staff-layout/staff-menu/staff-menu.component.html","webpack:///src/app/pages/staff-layout/staff-menu/staff-menu-routing.module.ts"],"names":["MatCardContent","MatCard","_animationMode","this","MatCardHeader","MatCardTitleGroup","MatCardModule","StaffMenuModule","StaffMenuComponent","menuService","restaurantService","getRestaurantAndMenu","currentRestaurant","subscribe","restaurant","restauranteSelected","getMenu","id","response","menuData","menus","index","menuExpandedId","selected","menuId","category","getCategory","categorySelected","categories","categoryId","foodDishes","getDishes","dishesListSelected","dishes","dish","active","updateDishStatus","StaffMenuRoutingModule"],"mappings":"4FAAA,0KAaA,MAAMA,GAmKN,MAAMC,EAKF,YAAYC,GACRC,KAAKD,eAAiBA,GA8B9B,MAAME,GAgBN,MAAMC,GAiBN,MAAMC,K,mrFCrPN,aACA,cAAqC,a,yDC6B9B,MAAMC,G,4QCrBN,MAAMC,EAOX,YACUC,EACAC,GADA,KAAAD,cACA,KAAAC,oBAGV,WACEP,KAAKQ,uBAMA,uBACLR,KAAKO,kBAAkBE,kBAAkBC,UACtCC,IACCX,KAAKY,oBAAsBD,EAC3BX,KAAKM,YACFO,QAAQb,KAAKY,oBAAoBE,IACjCJ,UAAWK,IACVf,KAAKgB,SAAWD,EAASE,UAS5B,mBAAmBC,GACxBlB,KAAKmB,eAAiBD,EACtBlB,KAAKgB,SAASE,GAAOE,UAAYpB,KAAKgB,SAASE,GAAOE,SAIjD,YAAYC,GACZrB,KAAKgB,SAASK,GAAQC,UACzBtB,KAAKuB,YAAYF,GAOb,YAAYA,GAClBrB,KAAKwB,iBAAmBH,EACxBrB,KAAKM,YACFiB,YAAYvB,KAAKgB,SAASK,GAAQP,IAClCJ,UAAWK,IACVf,KAAKgB,SAASK,GAAQC,SAAWP,EAASU,WAC1CzB,KAAKwB,kBAAoB,IAOxB,eAAeE,GACpB1B,KAAKwB,iBAAmBE,EACnB1B,KAAKgB,SAAShB,KAAKmB,gBAAgBG,SAASI,GAAYC,YAC3D3B,KAAK4B,UAAUF,GAMX,UAAUA,GAChB1B,KAAK6B,mBAAqB,GAC1B7B,KAAKM,YACFsB,UAAU5B,KAAKgB,SAAShB,KAAKmB,gBAAgBG,SAASI,GAAYZ,IAClEJ,UAAWK,IACVf,KAAK6B,mBAAqBd,EAASe,SASlC,cAAcC,EAAkBb,GACrC,MAAM,OAAEc,EAAM,GAAElB,GAAOiB,EACvB/B,KAAKM,YAAY2B,iBAAiBnB,GAAIJ,UAAWK,IAC/Cf,KAAK6B,mBAAmBX,GAAOc,QAAUA,K,yzDChF/B,0PACG,+CAAa,KADhB,yI,8BAGA,0PACG,6CAAW,KADd,yI,8BAYF,wIAIE,c,OAJF,EAKC,U,oCALD,iBAME,8DAAG,6BAAmB,oBANxB,QAGE,kBAGsB,YAHoB,kBAGvC,qC,8BA/BX,iEACE,sSAMC,UAND,MAEE,c,0CACA,e,iDACA,e,iDAJF,oNAOE,2d,MAAA,c,uTACE,gKACE,qGAGA,qGAGA,4FAA6B,gCAE3B,sFAAuB,wCAM7B,+DACE,0HAKC,KA7BL,QAKE,IAII,UAAU,EAAsB,4BAGhC,SAAU,EAAqB,4BAYjC,SACE,EAAsD,6CAzB5D,gGAOE,4ZAQiC,mCAEJ,6D,8BAnBnC,iEACE,+GAAkD,2CAAlD,QAAkD,YAAD,kB,8BA0D3C,iEACE,mRAAmC,4CAAU,KAA7C,QAAuB,mBAAW,KAAlC,+G,8BAEF,iEACE,kRAA0B,gDAAc,KAAxC,QAAU,uBAAe,KAAzB,+G,8BAbN,oGAKE,kFAAoB,+BAGpB,oKAAwB,c,OAAxB,EAA6D,U,uDAA7D,qEACE,iGAGA,2GAAuC,KAHvC,QAAc,EAAuB,0BAGrC,SAAc,EAAwB,2CAZ1C,QAGE,EAAgC,0BAEZ,kCAGpB,iF,8BAjBJ,iEAQE,8DAAG,oCACH,+GAIC,2CAJD,QAIC,YAH2D,4B,8BA1DtE,4GACE,kNACA,4GACE,kEACE,uPACG,gFAAoB,+DAAG,mCAE1B,qGAuCF,kFACE,sKACE,4GAOC,uBAtDP,QAAoB,WAMhB,SAAc,iCAyCZ,cACE,+GAKC,KAlDL,2EA2CA,0D,6VCpCC,MAAME,I","file":"x","sourcesContent":["import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardContent {\n}\nMatCardContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            },] }\n];\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            },] }\n];\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            },] }\n];\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /**\n         * Position of the actions inside the card.\n         */\n        this.align = 'start';\n    }\n}\nMatCardActions.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n                }\n            },] }\n];\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Position of the actions inside the card.\n     * @type {?}\n     */\n    MatCardActions.prototype.align;\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            },] }\n];\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            },] }\n];\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            },] }\n];\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MatCard.prototype._animationMode;\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }] }\n];\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatCardModule {\n}\nMatCardModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n//# sourceMappingURL=card.js.map\n","<ng-content></ng-content>\n<ng-content select=\"mat-card-footer\"></ng-content>\n","import { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { SectionHeaderModule } from '@components/section-header/section-header.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { StaffMenuRoutingModule } from './staff-menu-routing.module';\r\nimport { StaffMenuComponent } from './staff-menu.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [StaffMenuComponent],\r\n  imports: [\r\n    CommonModule,\r\n    StaffMenuRoutingModule,\r\n    SectionHeaderModule,\r\n    MatExpansionModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    MatMenuModule,\r\n    DragDropModule,\r\n  ],\r\n})\r\nexport class StaffMenuModule {}\r\n","import { Restaurant, Menu, FoodDishes } from '@models';\r\nimport { MenuService, RestaurantService } from '@services';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-staff-menu',\r\n  templateUrl: './staff-menu.component.html',\r\n  styleUrls: ['./staff-menu.component.scss'],\r\n})\r\nexport class StaffMenuComponent implements OnInit {\r\n  public menuExpandedId: number;\r\n  public restauranteSelected: Restaurant;\r\n  public menuData: Array<Menu>;\r\n  public categorySelected: number;\r\n  public dishesListSelected: FoodDishes[];\r\n\r\n  constructor(\r\n    private menuService: MenuService,\r\n    private restaurantService: RestaurantService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getRestaurantAndMenu();\r\n  }\r\n\r\n  /*\r\n   * Fetch restaurant info and menu to render in the template\r\n   */\r\n  public getRestaurantAndMenu(): void {\r\n    this.restaurantService.currentRestaurant.subscribe(\r\n      (restaurant: Restaurant) => {\r\n        this.restauranteSelected = restaurant;\r\n        this.menuService\r\n          .getMenu(this.restauranteSelected.id)\r\n          .subscribe((response) => {\r\n            this.menuData = response.menus;\r\n          });\r\n      }\r\n    );\r\n  }\r\n  /*\r\n   * Will toggle a menu element in the list with a given index\r\n   * @param index: index number to toggle the selected element\r\n   */\r\n  public togglemenuExpanded(index: number): void {\r\n    this.menuExpandedId = index;\r\n    this.menuData[index].selected = !this.menuData[index].selected;\r\n  }\r\n\r\n  // Categoria\r\n  public selectMenus(menuId: number): void {\r\n    if (!this.menuData[menuId].category) {\r\n      this.getCategory(menuId);\r\n    }\r\n  }\r\n  /*\r\n   * Select a category in memory and fetch dishes once a category option is selected\r\n   * @param catgoryId: Category from a given menu\r\n   */\r\n  private getCategory(menuId: number): void {\r\n    this.categorySelected = menuId;\r\n    this.menuService\r\n      .getCategory(this.menuData[menuId].id)\r\n      .subscribe((response) => {\r\n        this.menuData[menuId].category = response.categories;\r\n        this.categorySelected = -1;\r\n      });\r\n  }\r\n  /*\r\n   * Select a category in memory and fetch dishes once a category option is selected\r\n   * @param catgoryId: Category from a given menu\r\n   */\r\n  public selectCategory(categoryId: number): void {\r\n    this.categorySelected = categoryId;\r\n    if (!this.menuData[this.menuExpandedId].category[categoryId].foodDishes) {\r\n      this.getDishes(categoryId);\r\n    }\r\n  }\r\n  /*\r\n   * Detch dishes list with a category given\r\n   */\r\n  private getDishes(categoryId: number): void {\r\n    this.dishesListSelected = [];\r\n    this.menuService\r\n      .getDishes(this.menuData[this.menuExpandedId].category[categoryId].id)\r\n      .subscribe((response) => {\r\n        this.dishesListSelected = response.dishes;\r\n      });\r\n  }\r\n\r\n  /*\r\n   * Will trigger status update from a given dish,  will use index to update de data in memory\r\n   * @param dish: Dish selected from the template\r\n   * @param index: index number to toggle status visibility\r\n   */\r\n  public setDishStatus(dish: FoodDishes, index: number): void {\r\n    const { active, id } = dish;\r\n    this.menuService.updateDishStatus(id).subscribe((response) => {\r\n      this.dishesListSelected[index].active = !active;\r\n    });\r\n  }\r\n}\r\n","<section class=\"dashboard-section-container\">\r\n  <app-section-header [sectionName]=\"'Menú'\"></app-section-header>\r\n  <div class=\"dashboard-content\" id=\"menu\">\r\n    <aside>\r\n      <mat-toolbar\r\n        ><p class=\"clr-gray\"><b>MENÚS</b></p></mat-toolbar\r\n      >\r\n      <ng-container *ngIf=\"menuData && menuData.length > 0\">\r\n        <div *ngFor=\"let item of menuData; let i = index\">\r\n          <mat-expansion-panel\r\n            class=\"menus\"\r\n            (click)=\"selectMenus(i)\"\r\n            (closed)=\"togglemenuExpanded(i)\"\r\n            (opened)=\"togglemenuExpanded(i)\"\r\n            hideToggle\r\n          >\r\n            <mat-expansion-panel-header>\r\n              <mat-panel-title class=\"inl\">\r\n                <mat-icon *ngIf=\"!item.selected\" class=\"clr-yellow\"\r\n                  >chevron_right</mat-icon\r\n                >\r\n                <mat-icon *ngIf=\"item.selected\" class=\"clr-yellow\"\r\n                  >expand_more</mat-icon\r\n                >\r\n                <p class=\"clr-gray inl item\">\r\n                  {{ item.name }}\r\n                  <span class=\"clr-gray\">\r\n                    ({{ item.from }} a {{ item.to }})\r\n                  </span>\r\n                </p>\r\n              </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n            <ng-container>\r\n              <div\r\n                *ngFor=\"let category of item.category; let iC = index\"\r\n                class=\"category-item inl\"\r\n                [class.selected]=\"iC === categorySelected\"\r\n                (click)=\"selectCategory(iC)\"\r\n              >\r\n                <p>{{ category.name }}</p>\r\n              </div>\r\n            </ng-container>\r\n          </mat-expansion-panel>\r\n        </div>\r\n      </ng-container>\r\n    </aside>\r\n    <main id=\"content\">\r\n      <mat-card>\r\n        <ng-container\r\n          *ngIf=\"\r\n            menuExpandedId !== undefined &&\r\n            menuExpandedId !== -1 &&\r\n            categorySelected !== undefined &&\r\n            categorySelected !== -1\r\n          \"\r\n        >\r\n          <p>PLATILLOS</p>\r\n          <div\r\n            *ngFor=\"let foodDish of dishesListSelected; let i = index\"\r\n            class=\"dish-item\"\r\n            [class.active]=\"foodDish.active\"\r\n          >\r\n            <p class=\"clr-gray\">\r\n              {{ foodDish.name }}\r\n            </p>\r\n            <button mat-icon-button (click)=\"setDishStatus(foodDish, i)\">\r\n              <ng-container *ngIf=\"foodDish.active\">\r\n                <mat-icon class=\"icon\" color=\"red\">visibility</mat-icon>\r\n              </ng-container>\r\n              <ng-container *ngIf=\"!foodDish.active\">\r\n                <mat-icon color=\"#7a7a7a\">visibility_off</mat-icon>\r\n              </ng-container>\r\n            </button>\r\n          </div>\r\n        </ng-container>\r\n      </mat-card>\r\n    </main>\r\n  </div>\r\n</section>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { StaffMenuComponent } from './staff-menu.component';\r\n\r\nconst routes: Routes = [{ path: '', component: StaffMenuComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class StaffMenuRoutingModule { }\r\n"]}