{"version":3,"sources":["webpack:///src/app/pages/layout/reports/reports.module.ts","webpack:///src/app/pages/layout/reports/reports.component.ts","webpack:///src/app/shared/services/reports.service.ts","webpack:///src/app/pages/layout/reports/reports.component.html","webpack:///src/app/pages/layout/reports/reports-routing.module.ts","webpack:///node_modules/@angular/material/fesm2015/card.js","webpack:///node_modules/@angular/material/card/index.d.ts.MatCard.html"],"names":["ReportsModule","display","dateInput","monthYearLabel","dateA11yLabel","monthYearA11yLabel","fb","restaurantService","reportsService","dateAdapter","currentRestaurantSubscription","Subscription","EMPTY","getNetIncomeSubscription","netIncome","emptyObject","fromToForm","this","group","from","to","setLocale","patchInitialDates","getRestaurantInfo","unsubscribe","get","today","Date","momentToday","moment","thisMonth","month","thisYear","year","initialStartDate","patchValue","format","currentRestaurant","subscribe","restaurant","getNetIncome","event","value","toControl","form","params","startOf","unix","endOf","getRestaurantNetIncome","id","pipe","map","response","tips","tips_fees","ReportsService","http","restaurantId","parameters","Object","keys","forEach","parameterKey","parameterValue","set","toString","url","environment","RESTAURANT_NET_INCOME","replace","ReportsRoutingModule","MatCardContent","MatCard","_animationMode","MatCardHeader","MatCardTitleGroup","MatCardModule"],"mappings":"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","file":"x","sourcesContent":["import { MatCardModule } from '@angular/material/card';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReportsComponent } from './reports.component';\r\nimport { ReportsRoutingModule } from './reports-routing.module';\r\nimport { SectionHeaderModule } from '@components/section-header/section-header.module';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMomentDateModule } from '@angular/material-moment-adapter';\r\n\r\nexport const MONTH_YEAR_FORMAT = {\r\n  display: {\r\n    dateInput: 'DD MMMM',\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY'\r\n  }\r\n};\r\n\r\n@NgModule({\r\n  declarations: [ReportsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReportsRoutingModule,\r\n    SectionHeaderModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatMomentDateModule\r\n  ],\r\n  providers: [MatDatepickerModule]\r\n})\r\nexport class ReportsModule {}\r\n","import { MONTH_YEAR_FORMAT } from './reports.module';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormControl } from '@angular/forms';\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_FORMATS,\r\n  MAT_DATE_LOCALE,\r\n} from '@angular/material/core';\r\nimport { MatDatepickerInputEvent } from '@angular/material/datepicker';\r\nimport { INetIncomeParams } from '@interfaces';\r\nimport { NetIncome, Restaurant } from '@models';\r\nimport { ReportsService, RestaurantService } from '@services';\r\nimport * as moment from 'moment';\r\nimport { Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { INetIncome } from 'src/app/shared/interfaces/net-income.interface';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\n\r\n@Component({\r\n  selector: 'app-reports',\r\n  templateUrl: './reports.component.html',\r\n  styleUrls: ['./reports.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: DateAdapter,\r\n      useClass: MomentDateAdapter,\r\n      deps: [MAT_DATE_LOCALE],\r\n    },\r\n\r\n    { provide: MAT_DATE_FORMATS, useValue: MONTH_YEAR_FORMAT },\r\n  ],\r\n})\r\nexport class ReportsComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Variable used to store the subscription that give us the current restaurant data.\r\n   * We save that subscription so that later we can unsubscribe it.\r\n   */\r\n  private currentRestaurantSubscription = Subscription.EMPTY;\r\n  /**\r\n   * Variable used to store the subscription that gives us the net income of a restaurant\r\n   * in a given date range.\r\n   * We save that subscription so that later we can unsubscribe from it.\r\n   */\r\n  private getNetIncomeSubscription = Subscription.EMPTY;\r\n  /**\r\n   * Variable where the selected restaurant data is saved.\r\n   */\r\n  private restaurant: Restaurant;\r\n  /**\r\n   * Variable containing an object with the parameters required to make a GET\r\n   * request for the restaurant net income in a given period of time\r\n   */\r\n  private params: INetIncomeParams;\r\n  /**\r\n   * Variable containing the net income information for a Restaurant.\r\n   */\r\n  public netIncome: NetIncome = NetIncome.emptyObject();\r\n  /**\r\n   * Variable containting today's date in ISO format\r\n   */\r\n  public today: Date;\r\n  /**\r\n   * Variable containing today's date in momentjs object format\r\n   */\r\n  private momentToday: moment.Moment;\r\n  /**\r\n   * Variable containing the current month in number format\r\n   */\r\n  private thisMonth: number;\r\n  /**\r\n   * Variable containing the current year in number format\r\n   */\r\n  private thisYear: number;\r\n  /**\r\n   * Variable to store a momentjs object containing the date period\r\n   * start date.\r\n   */\r\n  private initialStartDate: moment.Moment;\r\n\r\n  /**\r\n   * FormGroup for the date period inputs\r\n   */\r\n  public fromToForm = this.fb.group({\r\n    from: new FormControl(),\r\n    to: new FormControl(),\r\n  });\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private restaurantService: RestaurantService,\r\n    private reportsService: ReportsService,\r\n    private dateAdapter: DateAdapter<object>\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.dateAdapter.setLocale('es');\r\n    this.patchInitialDates();\r\n    this.getRestaurantInfo();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.currentRestaurantSubscription.unsubscribe();\r\n    this.getNetIncomeSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Getter method to acces the 'from' FormControl in the form\r\n   */\r\n  get fromControl(): FormControl {\r\n    return this.fromToForm.get('from') as FormControl;\r\n  }\r\n\r\n  /**\r\n   * Getter method to acces the 'to' FormControl in the form\r\n   */\r\n  get toControl(): FormControl {\r\n    return this.fromToForm.get('to') as FormControl;\r\n  }\r\n\r\n  /**\r\n   * Function to patch the form with current month's first day and today's date.\r\n   * These dates will be used to get the net income for that period of time\r\n   */\r\n  private patchInitialDates(): void {\r\n    this.today = new Date();\r\n    this.momentToday = moment(this.today);\r\n    this.thisMonth = this.momentToday.month() + 1;\r\n    this.thisYear = this.momentToday.year();\r\n    const concatStartDate = `${this.thisMonth}/01/${this.thisYear}`;\r\n\r\n    this.initialStartDate = moment(concatStartDate, 'MM/DD/YYYY');\r\n\r\n    this.fromToForm.patchValue({\r\n      to: this.momentToday.format(),\r\n      from: this.initialStartDate.format(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Function that looks for the current restaurant info and save it at the restauranteSelected global variable.\r\n   * After we get the restaurant info we look for its users\r\n   */\r\n  private getRestaurantInfo(): void {\r\n    this.currentRestaurantSubscription =\r\n      this.restaurantService.currentRestaurant.subscribe(\r\n        (restaurant: Restaurant) => {\r\n          if (restaurant) {\r\n            this.currentRestaurantSubscription.unsubscribe();\r\n            this.restaurant = restaurant;\r\n            if (this.restaurant) {\r\n              this.getNetIncome();\r\n            }\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Function to check if the selected \"from\" date happens after the selected \"to\" date.\r\n   * If it does, it changes the \"to\" date to the selected \"from\" date as well to avoid\r\n   * errors on the GET request.\r\n   *\r\n   * @param event change event from the mat-datepicker containing the selected date\r\n   */\r\n  public onFromDateSelect(event: MatDatepickerInputEvent<object>): void {\r\n    if (moment(event.value) > moment(this.toControl.value)) {\r\n      this.fromToForm.patchValue({ to: event.value });\r\n    }\r\n\r\n    this.getNetIncome();\r\n  }\r\n\r\n  /**\r\n   * Function to call the GET request function form the Reports service to\r\n   * get a Restaurant's net income in a given date range.\r\n   *\r\n   * Takes the values from the form to build the params object and then use it as\r\n   * in the GET request\r\n   */\r\n  public getNetIncome(): void {\r\n    const form = this.fromToForm;\r\n\r\n    this.params = {\r\n      from: moment(form.get('from').value).startOf('day').unix(),\r\n      to: moment(form.get('to').value).endOf('day').unix(),\r\n    };\r\n\r\n    this.getNetIncomeSubscription = this.reportsService\r\n      .getRestaurantNetIncome(this.restaurant.id, this.params)\r\n      .pipe(\r\n        map((response: INetIncome) => {\r\n          return new NetIncome(response);\r\n        })\r\n      )\r\n      .subscribe((netIncome: NetIncome) => {\r\n        this.netIncome = netIncome;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * The number to display at the Total tips section.\r\n   * @returns Difference between the tips and their fees translated to pesos.\r\n   */\r\n  public get totalTips(): number {\r\n    return (this.netIncome.tips - this.netIncome.tips_fees) / 100;\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '@environments/environment';\r\nimport { INetIncome, INetIncomeParams } from '@interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReportsService {\r\n  constructor(public http: HttpClient) {}\r\n\r\n  /**\r\n   * Function that gets the restaurant income from the server.\r\n   * @param restaurantId the id of the restaurant to look for its income.\r\n   * @returns an observable with the array of days.\r\n   */\r\n  public getRestaurantNetIncome(\r\n    restaurantId: number,\r\n    parameters: INetIncomeParams\r\n  ): Observable<INetIncome> {\r\n    let params = new HttpParams();\r\n    Object.keys(parameters).forEach((parameterKey) => {\r\n      const parameterValue: number =\r\n        parameters[parameterKey as keyof INetIncomeParams];\r\n\r\n      if (parameterValue) {\r\n        params = params.set(parameterKey, parameterValue.toString());\r\n      }\r\n    });\r\n\r\n    const url = environment.RESTAURANT_NET_INCOME.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n\r\n    return this.http.get<INetIncome>(url, { params });\r\n  }\r\n}\r\n","<section class=\"dashboard-section-container\">\r\n  <app-section-header [sectionName]=\"'Reportes'\"></app-section-header>\r\n  <div class=\"dashboard-content\">\r\n    <form class=\"grey-select\" [formGroup]=\"fromToForm\">\r\n      <mat-form-field class=\"datepicker\">\r\n        <mat-label>Reporte del</mat-label>\r\n        <input\r\n          matInput\r\n          readonly\r\n          [matDatepicker]=\"fromPicker\"\r\n          formControlName=\"from\"\r\n          (dateChange)=\"onFromDateSelect($event)\"\r\n          [max]=\"today\"\r\n        />\r\n        <mat-datepicker-toggle\r\n          matSuffix\r\n          [for]=\"fromPicker\"\r\n        ></mat-datepicker-toggle>\r\n        <mat-datepicker #fromPicker></mat-datepicker>\r\n      </mat-form-field>\r\n      <mat-form-field class=\"datepicker\">\r\n        <mat-label>al</mat-label>\r\n        <input\r\n          matInput\r\n          readonly\r\n          [matDatepicker]=\"toPicker\"\r\n          formControlName=\"to\"\r\n          (dateChange)=\"getNetIncome()\"\r\n          [max]=\"today\"\r\n          [min]=\"fromControl.value\"\r\n        />\r\n        <mat-datepicker-toggle\r\n          matSuffix\r\n          [for]=\"toPicker\"\r\n        ></mat-datepicker-toggle>\r\n        <mat-datepicker #toPicker></mat-datepicker>\r\n      </mat-form-field>\r\n    </form>\r\n\r\n    <mat-card>\r\n      <p>Ventas</p>\r\n      <div class=\"grid\">\r\n        <div class=\"inner-grid\">\r\n          <div>\r\n            <p>Ingresos</p>\r\n            <h4>\r\n              ${{ netIncome.income / 100 | number: '1.2' }} <span>MXN</span>\r\n            </h4>\r\n          </div>\r\n          <div>\r\n            <p>Impuestos</p>\r\n            <h4>\r\n              -${{ netIncome.taxes / 100 | number: '1.2' }} <span>MXN</span>\r\n            </h4>\r\n          </div>\r\n          <div>\r\n            <p>Comisiones</p>\r\n            <h4>\r\n              -${{ netIncome.fees / 100 | number: '1.2' }} <span>MXN</span>\r\n            </h4>\r\n          </div>\r\n        </div>\r\n        <div class=\"inner-grid\">\r\n          <div>\r\n            <p>Ingresos Netos</p>\r\n            <h4>\r\n              ${{ netIncome.total / 100 | number: '1.2' }} <span>MXN</span>\r\n            </h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n\r\n    <mat-card>\r\n      <p>Propinas</p>\r\n      <div class=\"grid\">\r\n        <div class=\"inner-grid\">\r\n          <div>\r\n            <p>Ingresos</p>\r\n            <h4>\r\n              ${{ netIncome.tips / 100 | number: '1.2' }} <span>MXN</span>\r\n            </h4>\r\n          </div>\r\n          <div>\r\n            <p>Comisiones</p>\r\n            <h4>\r\n              -${{ netIncome.tips_fees / 100 | number: '1.2' }} <span>MXN</span>\r\n            </h4>\r\n          </div>\r\n        </div>\r\n        <div class=\"inner-grid\">\r\n          <div>\r\n            <p>Total de propinas</p>\r\n            <h4>${{ totalTips | number: '1.2' }} <span>MXN</span></h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n</section>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ReportsComponent } from './reports.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ReportsComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ReportsRoutingModule {}\r\n","import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardContent {\n}\nMatCardContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            },] }\n];\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            },] }\n];\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            },] }\n];\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /**\n         * Position of the actions inside the card.\n         */\n        this.align = 'start';\n    }\n}\nMatCardActions.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n                }\n            },] }\n];\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Position of the actions inside the card.\n     * @type {?}\n     */\n    MatCardActions.prototype.align;\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            },] }\n];\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            },] }\n];\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            },] }\n];\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MatCard.prototype._animationMode;\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }] }\n];\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatCardModule {\n}\nMatCardModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n//# sourceMappingURL=card.js.map\n","<ng-content></ng-content>\n<ng-content select=\"mat-card-footer\"></ng-content>\n"]}