{"version":3,"sources":["webpack:///src/app/shared/constants/regular-expressions.ts","webpack:///src/app/shared/constants/enums.ts","webpack:///src/app/shared/constants/index.ts","webpack:///node_modules/ngx-mask/fesm2015/ngx-mask.js"],"names":["Regex24Hours","RegexUrl","RegexEmail","UserRoles","MANAGER","STAFF","config","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","validation","specialCharacters","patterns","pattern","RegExp","optional","X","symbol","A","S","d","m","M","H","h","s","timeMasks","withoutValidation","MaskApplierService","_config","this","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChar","precision","x","split","decimals","length","res","replace","slice","rgx","test","substr","percentage","Number","getPrecision","Infinity","checkInputPrecision","inputValue","precisionRegEx","_charToRegExpExpression","precisionMatch","match","substring","endsWith","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","maskAndPattern","mask","customPattern","applyMask","position","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","ipError","filter","i","startsWith","_stripToDecimal","indexOf","base","thousandSeperatorCharEscaped","decimalMarkerEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","daysCount","monthsCount","withoutDays","day1monthInput","includes","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","find","val","maskSymbol","idx","join","char","MaskService","document","_elementRef","_renderer","super","isNumberValue","maskIsShown","selStart","selEnd","onChange","_","_formElement","nativeElement","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","prefNmask","value","activeElement","clearIfNotMatchFn","map","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","inputVal","Error","_checkForIp","formElementProperty","name","setProperty","arr","push","Array","isArray","_removeMask","_removeSuffix","_removePrefix","_checkSymbols","specialCharactersForRemove","_regExpForRemove","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_retrieveSeparatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","MaskDirective","_maskService","_maskValue","_position","onTouch","changes","currentValue","_applyMask","_validateTime","counterOfOpt","key","lastIndexOf","checkSpecialCharAmount","e","el","_inputValue","selectionStart","caretShift","applyValueChanges","_backspaceShift","positionToApply","_code","setSelectionRange","selectionEnd","keyCode","focus","nextValue","code","preventDefault","suffixCheckOnPressDelete","cursorStart","readOnly","__awaiter","String","fn","isDisabled","maskExp","reduce","accum","currval","_start","_end","repeatNumber","_repeatPatternSymbols","rowMaskLen","NgxMaskModule","configValue","ngModule","providers","provide","useValue","useFactory","_configFactory","deps","_configValue","initConfig","Object","assign","Function","globalThis","window","global","self"],"mappings":"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","file":"x","sourcesContent":["export const Regex24Hours = /^([01]?\\d|2[0-3]|24(?=:00?$)):([0-5]\\d)$/m;\r\nexport const RegexUrl = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w.-]+)+[\\w\\-._~:/?#[\\]%@!$&‘()*+,;=.|]+$/;\r\nexport const RegexEmail = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n","export enum UserRoles {\r\n  MANAGER = 'manager',\r\n  STAFF = 'staff'\r\n}\r\n","export * from './regular-expressions';\r\nexport * from './enums';\r\n","import { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Directive, forwardRef, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction IConfig() { }\nif (false) {\n    /** @type {?} */\n    IConfig.prototype.suffix;\n    /** @type {?} */\n    IConfig.prototype.prefix;\n    /** @type {?} */\n    IConfig.prototype.thousandSeparator;\n    /** @type {?} */\n    IConfig.prototype.decimalMarker;\n    /** @type {?} */\n    IConfig.prototype.clearIfNotMatch;\n    /** @type {?} */\n    IConfig.prototype.showTemplate;\n    /** @type {?} */\n    IConfig.prototype.showMaskTyped;\n    /** @type {?} */\n    IConfig.prototype.placeHolderCharacter;\n    /** @type {?} */\n    IConfig.prototype.shownMaskExpression;\n    /** @type {?} */\n    IConfig.prototype.dropSpecialCharacters;\n    /** @type {?} */\n    IConfig.prototype.specialCharacters;\n    /** @type {?} */\n    IConfig.prototype.hiddenInput;\n    /** @type {?} */\n    IConfig.prototype.validation;\n    /** @type {?} */\n    IConfig.prototype.separatorLimit;\n    /** @type {?} */\n    IConfig.prototype.patterns;\n}\n/** @type {?} */\nconst config = new InjectionToken('config');\n/** @type {?} */\nconst NEW_CONFIG = new InjectionToken('NEW_CONFIG');\n/** @type {?} */\nconst INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\n/** @type {?} */\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: '.',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    validation: true,\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\n/** @type {?} */\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\n/** @type {?} */\nconst withoutValidation = [\n    'percent',\n    'Hh',\n    's0',\n    'm0',\n    'separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MaskApplierService {\n    /**\n     * @param {?} _config\n     */\n    constructor(_config) {\n        this._config = _config;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this._formatWithSeparators = (/**\n         * @param {?} str\n         * @param {?} thousandSeparatorChar\n         * @param {?} decimalChar\n         * @param {?} precision\n         * @return {?}\n         */\n        (str, thousandSeparatorChar, decimalChar, precision) => {\n            /** @type {?} */\n            const x = str.split(decimalChar);\n            /** @type {?} */\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n            /** @type {?} */\n            let res = x[0];\n            /** @type {?} */\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === '-') {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            /** @type {?} */\n            const rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substr(0, precision + 1);\n        });\n        this.percentage = (/**\n         * @param {?} str\n         * @return {?}\n         */\n        (str) => {\n            return Number(str) >= 0 && Number(str) <= 100;\n        });\n        this.getPrecision = (/**\n         * @param {?} maskExpression\n         * @return {?}\n         */\n        (maskExpression) => {\n            /** @type {?} */\n            const x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        });\n        this.checkInputPrecision = (/**\n         * @param {?} inputValue\n         * @param {?} precision\n         * @param {?} decimalMarker\n         * @return {?}\n         */\n        (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                /** @type {?} */\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                /** @type {?} */\n                const precisionMatch = inputValue.match(precisionRegEx);\n                if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        });\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n    }\n    /**\n     * @param {?} inputValue\n     * @param {?} maskAndPattern\n     * @return {?}\n     */\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    /**\n     * @param {?} inputValue\n     * @param {?} maskExpression\n     * @param {?=} position\n     * @param {?=} cb\n     * @return {?}\n     */\n    applyMask(inputValue, maskExpression, position = 0, cb = (/**\n     * @return {?}\n     */\n    () => { })) {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        /** @type {?} */\n        let cursor = 0;\n        /** @type {?} */\n        let result = '';\n        /** @type {?} */\n        let multi = false;\n        /** @type {?} */\n        let backspaceShift = false;\n        /** @type {?} */\n        let shift = 1;\n        /** @type {?} */\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && inputValue.endsWith(this.suffix)) {\n            inputValue = inputValue.slice(0, inputValue.length - this.suffix.length);\n        }\n        /** @type {?} */\n        const inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            this.ipError = !!(inputArray.filter((/**\n             * @param {?} i\n             * @return {?}\n             */\n            (i) => i === '.')).length < 3 && inputArray.length < 7);\n            maskExpression = '099.099.099.099';\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n                inputValue = this._stripToDecimal(inputValue);\n                /** @type {?} */\n                const precision = this.getPrecision(maskExpression);\n                inputValue = this.checkInputPrecision(inputValue, precision, '.');\n            }\n            if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                /** @type {?} */\n                const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith('separator')) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            inputValue =\n                inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker\n                    ? inputValue.slice(1, inputValue.length)\n                    : inputValue;\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            /** @type {?} */\n            const thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            /** @type {?} */\n            const decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);\n            /** @type {?} */\n            const invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\";<>?\\\\/'\n                .replace(thousandSeperatorCharEscaped, '')\n                .replace(decimalMarkerEscaped, '');\n            /** @type {?} */\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            /** @type {?} */\n            const precision = this.getPrecision(maskExpression);\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            /** @type {?} */\n            const strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            /** @type {?} */\n            const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            /** @type {?} */\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                /** @type {?} */\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // tslint:disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\n                    (this.hiddenInput &&\n                        this.maskAvailablePatterns[maskExpression[cursor]] &&\n                        this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            /** @type {?} */\n                            const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            /** @type {?} */\n                            const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            /** @type {?} */\n                            const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    /** @type {?} */\n                    const daysCount = 31;\n                    if (maskExpression[cursor] === 'd') {\n                        if (Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n                            cursor += 1;\n                            /** @type {?} */\n                            const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        /** @type {?} */\n                        const monthsCount = 12;\n                        // mask without day\n                        /** @type {?} */\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for input\n                        /** @type {?} */\n                        const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            ((inputValue[cursor - 2] === '/' &&\n                                (Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/')) ||\n                                inputValue[cursor] === '/' ||\n                                ((inputValue[cursor - 3] === '/' &&\n                                    (Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/')) ||\n                                    inputValue[cursor - 1] === '/'));\n                        // 10<day<31 && month<12 for input\n                        /** @type {?} */\n                        const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] === '/' &&\n                            (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for paste whole data\n                        /** @type {?} */\n                        const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            (!inputValue.slice(cursor - 2, cursor).includes('/') &&\n                                Number(inputValue.slice(cursor - 2, cursor)) > monthsCount);\n                        // 10<day<31 && month<12 for paste whole data\n                        /** @type {?} */\n                        const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] !== '/' &&\n                            Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n                        if (withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n                            cursor += 1;\n                            /** @type {?} */\n                            const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    /** @type {?} */\n                    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputArray.length : cursor;\n                    this._shift.add(shiftStep + this.prefix.length || 0);\n                    i--;\n                }\n                else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                    if (!!inputArray[cursor] && maskExpression !== '099.099.099.099') {\n                        result += inputArray[cursor];\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        /** @type {?} */\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        /** @type {?} */\n        let actualShift = this._shift.has(position) ? shift : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        /** @type {?} */\n        let res = `${this.prefix}${result}${this.suffix}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    /**\n     * @param {?} inputSymbol\n     * @return {?}\n     */\n    _findSpecialChar(inputSymbol) {\n        return this.maskSpecialCharacters.find((/**\n         * @param {?} val\n         * @return {?}\n         */\n        (val) => val === inputSymbol));\n    }\n    /**\n     * @protected\n     * @param {?} inputSymbol\n     * @param {?} maskSymbol\n     * @return {?}\n     */\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol));\n    }\n    /**\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    _stripToDecimal(str) {\n        return str\n            .split('')\n            .filter((/**\n         * @param {?} i\n         * @param {?} idx\n         * @return {?}\n         */\n        (i, idx) => {\n            return i.match('^-?\\\\d') || i === '.' || i === ',' || (i === '-' && idx === 0);\n        }))\n            .join('');\n    }\n    /**\n     * @private\n     * @param {?} char\n     * @return {?}\n     */\n    _charToRegExpExpression(char) {\n        /** @type {?} */\n        const charsToEscape = '[\\\\^$.|?*+()';\n        return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n    }\n}\nMaskApplierService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMaskApplierService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MaskApplierService.prototype.dropSpecialCharacters;\n    /** @type {?} */\n    MaskApplierService.prototype.hiddenInput;\n    /** @type {?} */\n    MaskApplierService.prototype.showTemplate;\n    /** @type {?} */\n    MaskApplierService.prototype.clearIfNotMatch;\n    /** @type {?} */\n    MaskApplierService.prototype.maskExpression;\n    /** @type {?} */\n    MaskApplierService.prototype.actualValue;\n    /** @type {?} */\n    MaskApplierService.prototype.shownMaskExpression;\n    /** @type {?} */\n    MaskApplierService.prototype.maskSpecialCharacters;\n    /** @type {?} */\n    MaskApplierService.prototype.maskAvailablePatterns;\n    /** @type {?} */\n    MaskApplierService.prototype.prefix;\n    /** @type {?} */\n    MaskApplierService.prototype.suffix;\n    /** @type {?} */\n    MaskApplierService.prototype.thousandSeparator;\n    /** @type {?} */\n    MaskApplierService.prototype.decimalMarker;\n    /** @type {?} */\n    MaskApplierService.prototype.customPattern;\n    /** @type {?} */\n    MaskApplierService.prototype.ipError;\n    /** @type {?} */\n    MaskApplierService.prototype.showMaskTyped;\n    /** @type {?} */\n    MaskApplierService.prototype.placeHolderCharacter;\n    /** @type {?} */\n    MaskApplierService.prototype.validation;\n    /** @type {?} */\n    MaskApplierService.prototype.separatorLimit;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskApplierService.prototype._shift;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskApplierService.prototype._formatWithSeparators;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskApplierService.prototype.percentage;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskApplierService.prototype.getPrecision;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskApplierService.prototype.checkInputPrecision;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MaskApplierService.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MaskService extends MaskApplierService {\n    /**\n     * @param {?} document\n     * @param {?} _config\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     */\n    constructor(document, _config, _elementRef, _renderer) {\n        super(_config);\n        this.document = document;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.maskExpression = '';\n        this.isNumberValue = false;\n        this.showMaskTyped = false;\n        this.placeHolderCharacter = '_';\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this._formElement = this._elementRef.nativeElement;\n    }\n    // tslint:disable-next-line:cyclomatic-complexity\n    /**\n     * @param {?} inputValue\n     * @param {?} maskExpression\n     * @param {?=} position\n     * @param {?=} cb\n     * @return {?}\n     */\n    applyMask(inputValue, maskExpression, position = 0, cb = (/**\n     * @return {?}\n     */\n    () => { })) {\n        if (!maskExpression) {\n            return inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        /** @type {?} */\n        const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        /** @type {?} */\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined) {\n            /** @type {?} */\n            let actualResult = this.actualValue.split('');\n            // tslint:disable no-unused-expression\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            // tslint:enable no-unused-expression\n            newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        /** @type {?} */\n        const result = super.applyMask(newInputValue, maskExpression, position, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n            this.decimalMarker = ',';\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((/**\n             * @param {?} item\n             * @return {?}\n             */\n            (item) => item !== this.decimalMarker));\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        /** @type {?} */\n        const resLen = result.length;\n        /** @type {?} */\n        const prefNmask = this.prefix + this.maskIsShown;\n        return result + (this.maskExpression === 'IP' ? prefNmask : prefNmask.slice(resLen));\n    }\n    /**\n     * @param {?=} position\n     * @param {?=} cb\n     * @return {?}\n     */\n    applyValueChanges(position = 0, cb = (/**\n     * @return {?}\n     */\n    () => { })) {\n        this._formElement.value = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n        if (this._formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    /**\n     * @param {?} inputValue\n     * @param {?} maskExpression\n     * @return {?}\n     */\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split('')\n            .map((/**\n         * @param {?} curr\n         * @param {?} index\n         * @return {?}\n         */\n        (curr, index) => {\n            if (this.maskAvailablePatterns &&\n                this.maskAvailablePatterns[maskExpression[index]] &&\n                this.maskAvailablePatterns[maskExpression[index]].symbol) {\n                return this.maskAvailablePatterns[maskExpression[index]].symbol;\n            }\n            return curr;\n        }))\n            .join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    getActualValue(res) {\n        /** @type {?} */\n        const compare = res\n            .split('')\n            .filter((/**\n         * @param {?} symbol\n         * @param {?} i\n         * @return {?}\n         */\n        (symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n            (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])));\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n    /**\n     * @param {?} inputValue\n     * @return {?}\n     */\n    shiftTypedSymbols(inputValue) {\n        /** @type {?} */\n        let symbolToReplace = '';\n        /** @type {?} */\n        const newInputValue = (inputValue &&\n            inputValue.split('').map((/**\n             * @param {?} currSymbol\n             * @param {?} index\n             * @return {?}\n             */\n            (currSymbol, index) => {\n                if (this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    /** @type {?} */\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            }))) ||\n            [];\n        return newInputValue.join('');\n    }\n    /**\n     * @param {?=} inputVal\n     * @return {?}\n     */\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                return this._checkForIp(inputVal);\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    /**\n     * @return {?}\n     */\n    clearIfNotMatchFn() {\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                this._formElement.value.replace(/_/g, '').length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(this._formElement.value, this.maskExpression);\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    set formElementProperty([name, value]) {\n        this._renderer.setProperty(this._formElement, name, value);\n    }\n    /**\n     * @param {?} mask\n     * @return {?}\n     */\n    checkSpecialCharAmount(mask) {\n        /** @type {?} */\n        const chars = mask.split('').filter((/**\n         * @param {?} item\n         * @return {?}\n         */\n        (item) => this._findSpecialChar(item)));\n        return chars.length;\n    }\n    /**\n     * @private\n     * @param {?} inputVal\n     * @return {?}\n     */\n    _checkForIp(inputVal) {\n        if (inputVal === '#') {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        /** @type {?} */\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    /**\n     * @private\n     * @param {?} inputValue\n     * @return {?}\n     */\n    formControlResult(inputValue) {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._checkSymbols(inputValue));\n        }\n        else {\n            this.onChange(this._removeSuffix(this._removePrefix(inputValue)));\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @param {?} specialCharactersForRemove\n     * @return {?}\n     */\n    _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n    /**\n     * @private\n     * @param {?} result\n     * @return {?}\n     */\n    _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n    /**\n     * @private\n     * @param {?} specialCharactersForRemove\n     * @return {?}\n     */\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        (item) => `\\\\${item}`)).join('|'), 'gi');\n    }\n    /**\n     * @private\n     * @param {?} result\n     * @return {?}\n     */\n    _checkSymbols(result) {\n        if (result === '') {\n            return result;\n        }\n        /** @type {?} */\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        /** @type {?} */\n        let separatorValue = this._retrieveSeparatorValue(result);\n        if (this.decimalMarker !== '.') {\n            separatorValue = separatorValue.replace(this.decimalMarker, '.');\n        }\n        if (this.isNumberValue) {\n            if (separatorPrecision) {\n                if (result === this.decimalMarker) {\n                    return null;\n                }\n                return this._checkPrecision(this.maskExpression, separatorValue);\n            }\n            else {\n                return Number(separatorValue);\n            }\n        }\n        else {\n            return separatorValue;\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    /**\n     * @private\n     * @param {?} maskExpretion\n     * @return {?}\n     */\n    _retrieveSeparatorPrecision(maskExpretion) {\n        /** @type {?} */\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    /**\n     * @private\n     * @param {?} separatorExpression\n     * @param {?} separatorValue\n     * @return {?}\n     */\n    _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\nMaskService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMaskService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nif (false) {\n    /** @type {?} */\n    MaskService.prototype.maskExpression;\n    /** @type {?} */\n    MaskService.prototype.isNumberValue;\n    /** @type {?} */\n    MaskService.prototype.showMaskTyped;\n    /** @type {?} */\n    MaskService.prototype.placeHolderCharacter;\n    /** @type {?} */\n    MaskService.prototype.maskIsShown;\n    /** @type {?} */\n    MaskService.prototype.selStart;\n    /** @type {?} */\n    MaskService.prototype.selEnd;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MaskService.prototype._formElement;\n    /** @type {?} */\n    MaskService.prototype.onChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskService.prototype.document;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MaskService.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskService.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskService.prototype._renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// tslint:disable deprecation\nclass MaskDirective {\n    /**\n     * @param {?} document\n     * @param {?} _maskService\n     * @param {?} _config\n     */\n    constructor(document, _maskService, _config) {\n        this.document = document;\n        this._maskService = _maskService;\n        this._config = _config;\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this._maskValue = '';\n        this._position = null;\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this.onTouch = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, } = changes;\n        if (maskExpression) {\n            this._maskValue = changes.maskExpression.currentValue || '';\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.maskSpecialCharacters = changes.specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        this._applyMask();\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    validate({ value }) {\n        if (!this._maskService.validation) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return { 'Mask error': true };\n        }\n        if (this._maskValue.startsWith('separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            /** @type {?} */\n            let counterOfOpt = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        /** @type {?} */\n                        const opt = this._maskValue\n                            .split('')\n                            .filter((/**\n                         * @param {?} i\n                         * @return {?}\n                         */\n                        (i) => i === key))\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('{') === 1 &&\n                value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n                return null;\n            }\n            if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?')) ||\n                this._maskValue.indexOf('{') === 1) {\n                return { 'Mask error': true };\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                /** @type {?} */\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return { 'Mask error': true };\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onInput(e) {\n        /** @type {?} */\n        const el = (/** @type {?} */ (e.target));\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        /** @type {?} */\n        const position = el.selectionStart === 1\n            ? ((/** @type {?} */ (el.selectionStart))) + this._maskService.prefix.length\n            : ((/** @type {?} */ (el.selectionStart)));\n        /** @type {?} */\n        let caretShift = 0;\n        /** @type {?} */\n        let backspaceShift = false;\n        this._maskService.applyValueChanges(position, (/**\n         * @param {?} shift\n         * @param {?} _backspaceShift\n         * @return {?}\n         */\n        (shift, _backspaceShift) => {\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        }));\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        /** @type {?} */\n        const positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        el.setSelectionRange(positionToApply, positionToApply);\n        if ((this.maskExpression.includes('H') || this.maskExpression.includes('M')) && caretShift === 0) {\n            el.setSelectionRange(((/** @type {?} */ (el.selectionStart))) + 1, ((/** @type {?} */ (el.selectionStart))) + 1);\n        }\n        this._position = null;\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onFocus(e) {\n        /** @type {?} */\n        const el = (/** @type {?} */ (e.target));\n        /** @type {?} */\n        const posStart = 0;\n        /** @type {?} */\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            ((/** @type {?} */ (e))).keyCode !== 38)\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        /** @type {?} */\n        const nextValue = !el.value || el.value === this._maskService.prefix\n            ? this._maskService.prefix + this._maskService.maskIsShown\n            : el.value;\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if ((((/** @type {?} */ (el.selectionStart))) || ((/** @type {?} */ (el.selectionEnd)))) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onKeyDown(e) {\n        this._code = e.code ? e.code : e.key;\n        /** @type {?} */\n        const el = (/** @type {?} */ (e.target));\n        this._inputValue = el.value;\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && ((/** @type {?} */ (el.selectionStart))) !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = this.specialCharacters || this._config.specialCharacters;\n                if (this.prefix.length > 1 && ((/** @type {?} */ (el.selectionStart))) <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, this.prefix.length);\n                }\n                else {\n                    if (this._inputValue.length !== ((/** @type {?} */ (el.selectionStart))) &&\n                        ((/** @type {?} */ (el.selectionStart))) !== 1) {\n                        while (this.specialCharacters.includes(this._inputValue[((/** @type {?} */ (el.selectionStart))) - 1].toString()) &&\n                            ((this.prefix.length >= 1 && ((/** @type {?} */ (el.selectionStart))) > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(((/** @type {?} */ (el.selectionStart))) - 1, ((/** @type {?} */ (el.selectionStart))) - 1);\n                        }\n                    }\n                    this.suffixCheckOnPressDelete(e.keyCode, el);\n                }\n            }\n            this.suffixCheckOnPressDelete(e.keyCode, el);\n            if (this._maskService.prefix.length &&\n                ((/** @type {?} */ (el.selectionStart))) <= this._maskService.prefix.length &&\n                ((/** @type {?} */ (el.selectionEnd))) <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            /** @type {?} */\n            const cursorStart = el.selectionStart;\n            // this.onFocus(e);\n            if (e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < ((/** @type {?} */ (el.selectionStart)))) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /**\n     * It writes the value in the input\n     * @param {?} inputValue\n     * @return {?}\n     */\n    writeValue(inputValue) {\n        return __awaiter(this, void 0, void 0, /** @this {!MaskDirective} */ function* () {\n            if (inputValue === undefined) {\n                inputValue = '';\n            }\n            if (typeof inputValue === 'number') {\n                inputValue = String(inputValue);\n                inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n                this._maskService.isNumberValue = true;\n            }\n            (inputValue && this._maskService.maskExpression) ||\n                (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n                ? (this._maskService.formElementProperty = [\n                    'value',\n                    this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                ])\n                : (this._maskService.formElementProperty = ['value', inputValue]);\n            this._inputValue = inputValue;\n        });\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    /**\n     * @param {?} keyCode\n     * @param {?} el\n     * @return {?}\n     */\n    suffixCheckOnPressDelete(keyCode, el) {\n        if (keyCode === 46 && this.suffix.length > 0) {\n            if (this._inputValue.length - this.suffix.length <= ((/** @type {?} */ (el.selectionStart)))) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n        }\n        if (keyCode === 8) {\n            if (this.suffix.length > 1 &&\n                this._inputValue.length - this.suffix.length < ((/** @type {?} */ (el.selectionStart)))) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n            if (this.suffix.length === 1 && this._inputValue.length === ((/** @type {?} */ (el.selectionStart)))) {\n                el.setSelectionRange(((/** @type {?} */ (el.selectionStart))) - 1, ((/** @type {?} */ (el.selectionStart))) - 1);\n            }\n        }\n    }\n    /**\n     * It disables the input element\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    onModelChange(e) {\n        if (!e) {\n            this._maskService.actualValue = '';\n        }\n    }\n    /**\n     * @private\n     * @param {?} maskExp\n     * @return {?}\n     */\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp.split('').reduce((/**\n             * @param {?} accum\n             * @param {?} currval\n             * @param {?} index\n             * @return {?}\n             */\n            (accum, currval, index) => {\n                this._start = currval === '{' ? index : this._start;\n                if (currval !== '}') {\n                    return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                }\n                this._end = index;\n                /** @type {?} */\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                /** @type {?} */\n                const repaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                return accum + repaceWith;\n            }), '')) ||\n            maskExp);\n    }\n    // tslint:disable-next-line:no-any\n    /**\n     * @private\n     * @return {?}\n     */\n    _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _validateTime(value) {\n        /** @type {?} */\n        const rowMaskLen = this._maskValue.split('').filter((/**\n         * @param {?} s\n         * @return {?}\n         */\n        (s) => s !== ':')).length;\n        if (+value[value.length - 1] === 0 && value.length < rowMaskLen) {\n            return { 'Mask error': true };\n        }\n        if (value.length <= rowMaskLen - 2) {\n            return { 'Mask error': true };\n        }\n        return null;\n    }\n}\nMaskDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mask]',\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef((/**\n                         * @return {?}\n                         */\n                        () => MaskDirective)),\n                        multi: true,\n                    },\n                    {\n                        provide: NG_VALIDATORS,\n                        useExisting: forwardRef((/**\n                         * @return {?}\n                         */\n                        () => MaskDirective)),\n                        multi: true,\n                    },\n                    MaskService,\n                ],\n            },] }\n];\n/** @nocollapse */\nMaskDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: MaskService },\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] }\n];\nMaskDirective.propDecorators = {\n    maskExpression: [{ type: Input, args: ['mask',] }],\n    specialCharacters: [{ type: Input }],\n    patterns: [{ type: Input }],\n    prefix: [{ type: Input }],\n    suffix: [{ type: Input }],\n    thousandSeparator: [{ type: Input }],\n    decimalMarker: [{ type: Input }],\n    dropSpecialCharacters: [{ type: Input }],\n    hiddenInput: [{ type: Input }],\n    showMaskTyped: [{ type: Input }],\n    placeHolderCharacter: [{ type: Input }],\n    shownMaskExpression: [{ type: Input }],\n    showTemplate: [{ type: Input }],\n    clearIfNotMatch: [{ type: Input }],\n    validation: [{ type: Input }],\n    separatorLimit: [{ type: Input }],\n    onInput: [{ type: HostListener, args: ['input', ['$event'],] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }],\n    onFocus: [{ type: HostListener, args: ['click', ['$event'],] }],\n    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n    onModelChange: [{ type: HostListener, args: ['ngModelChange', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    MaskDirective.prototype.maskExpression;\n    /** @type {?} */\n    MaskDirective.prototype.specialCharacters;\n    /** @type {?} */\n    MaskDirective.prototype.patterns;\n    /** @type {?} */\n    MaskDirective.prototype.prefix;\n    /** @type {?} */\n    MaskDirective.prototype.suffix;\n    /** @type {?} */\n    MaskDirective.prototype.thousandSeparator;\n    /** @type {?} */\n    MaskDirective.prototype.decimalMarker;\n    /** @type {?} */\n    MaskDirective.prototype.dropSpecialCharacters;\n    /** @type {?} */\n    MaskDirective.prototype.hiddenInput;\n    /** @type {?} */\n    MaskDirective.prototype.showMaskTyped;\n    /** @type {?} */\n    MaskDirective.prototype.placeHolderCharacter;\n    /** @type {?} */\n    MaskDirective.prototype.shownMaskExpression;\n    /** @type {?} */\n    MaskDirective.prototype.showTemplate;\n    /** @type {?} */\n    MaskDirective.prototype.clearIfNotMatch;\n    /** @type {?} */\n    MaskDirective.prototype.validation;\n    /** @type {?} */\n    MaskDirective.prototype.separatorLimit;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._maskValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._inputValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._position;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._start;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._end;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._code;\n    /** @type {?} */\n    MaskDirective.prototype.onChange;\n    /** @type {?} */\n    MaskDirective.prototype.onTouch;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype.document;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskDirective.prototype._maskService;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MaskDirective.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MaskPipe {\n    /**\n     * @param {?} _maskService\n     */\n    constructor(_maskService) {\n        this._maskService = _maskService;\n    }\n    /**\n     * @param {?} value\n     * @param {?} mask\n     * @param {?=} thousandSeparator\n     * @return {?}\n     */\n    transform(value, mask, thousandSeparator = null) {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator;\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\nMaskPipe.decorators = [\n    { type: Pipe, args: [{\n                name: 'mask',\n                pure: true,\n            },] }\n];\n/** @nocollapse */\nMaskPipe.ctorParameters = () => [\n    { type: MaskApplierService }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MaskPipe.prototype._maskService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxMaskModule {\n    /**\n     * @param {?=} configValue\n     * @return {?}\n     */\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    /**\n     * @param {?=} _configValue\n     * @return {?}\n     */\n    static forChild(_configValue) {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MaskDirective, MaskPipe],\n                declarations: [MaskDirective, MaskPipe],\n            },] }\n];\n/**\n * \\@internal\n * @param {?} initConfig\n * @param {?} configValue\n * @return {?}\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function ? Object.assign({}, initConfig, configValue()) : Object.assign({}, initConfig, configValue);\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction commonjsRequire () {\n\tthrow new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');\n}\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nfunction getCjsExportFromNamespace (n) {\n\treturn n && n['default'] || n;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n((/**\n * @return {?}\n */\nfunction () {\n    if (!commonjsGlobal.KeyboardEvent) {\n        commonjsGlobal.KeyboardEvent = (/**\n         * @param {?} _eventType\n         * @param {?} _init\n         * @return {?}\n         */\n        function (_eventType, _init) { });\n    }\n}))();\n\n\nvar customKeyboardEvent = {\n\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };\n//# sourceMappingURL=ngx-mask.js.map\n"]}