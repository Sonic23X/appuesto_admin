{"version":3,"sources":["webpack:///src/app/shared/payloads/amenities.payload.ts","webpack:///src/app/shared/payloads/franchise.payload.ts","webpack:///src/app/shared/payloads/restaurant.payload.ts","webpack:///src/app/shared/payloads/restaurant-app-data.payload.ts","webpack:///src/app/shared/payloads/restaurant-detail.payload.ts","webpack:///src/app/shared/payloads/restaurant-extra.payload.ts","webpack:///src/app/shared/payloads/restaurant-parking.payload.ts","webpack:///src/app/shared/payloads/restaurant-images.payload.ts","webpack:///src/app/shared/payloads/restaurant-payment-method.payload.ts","webpack:///src/app/shared/payloads/restaurant-working-hours.payload.ts","webpack:///src/app/shared/payloads/restaurant-reservation-zone.payload.ts","webpack:///src/app/shared/payloads/restaurant-service-type.payload.ts","webpack:///src/app/shared/payloads/index.ts","webpack:///src/app/pages/layout/preferences/branch-info/app-data/app-data.module.ts","webpack:///src/app/pages/layout/preferences/branch-info/app-data/app-data.component.ts","webpack:///src/app/pages/layout/preferences/branch-info/app-data/app-data.component.html","webpack:///src/app/pages/layout/preferences/branch-info/app-data/app-data-routing.module.ts"],"names":["AmenitiesPayload","pTypes","pZones","pExtras","pParkings","pPpaymentMethods","this","types","zones","extras","parkings","paymentMethods","getExtras","payment_methods","map","extra","id","active","name","BusinessPayload","pBusinessForm","businessForm","form","value","price_range","style","RestaurantPayload","pNewRestaurantForm","newRestaurantForm","avoidManagerUpdate","restaurantInfo","get","description","coordinates","concatCoordinates","address","phone","getPhone","email","invoice_email","invoice_url","manager","undefined","billingOption","emailBilling","websiteBilling","coordinatesArray","push","parseFloat","RestaurantAppDataPayload","pAppDataForm","appDataForm","max_offered_seats","max_people_per_order","max_cancel_limit_minutes","getTotalMinutes","reservation_time_minutes","RestaurantDetailPayload","pRestaurantDetailForm","restaurantDetailForm","getCoordinatesArray","address_extra","getParsedPhone","trim","RestuarantExtraPayload","pExtrasForm","extrasForm","getRawValue","RestuarantParkingPayload","pParkingForm","parkingForm","RestaurantImagesPayload","pImagesForm","imagesForm","galleryData","FormData","append","galleryImages","controls","forEach","control","i","RestuarantPaymentMethodPayload","pPaymentMethodsForm","paymentMethodsForm","RestaurantWorkingHoursPayload","pWorkingHoursForm","workingHoursForm","working_hours","getFixedHours","getMixedHours","currentWeekdays","activeDays","weekday","index","weekdayObject","week_day","opens_at","closes_at","hours","Object","keys","fixedHours","weekdays","day","object","parseInt","RestuarantReservationZonePayload","pReservationZonesFOrm","reservationZonesForm","RestuarantServiceTypePayload","pServiceTypeForm","serviceTypeForm","AppDataModule","fb","restaurantService","snackBar","restaurantId","localStorage","getItem","group","max_cancel_limit_hours","disabled","required","updatedRestaurantSubscription","Subscription","EMPTY","restaurantSubscription","getRestaurantDetails","unsubscribe","quantity","controlName","operation","actualValue","newValue","setValue","invalid","payload","updateRestaurantDetails","toJson","subscribe","openSnackBar","getRestaurantDetail","pipe","response","restaurant","setUpForm","message","action","open","duration","minutes","patchValue","Math","trunc","AppDataRoutingModule"],"mappings":"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","file":"x","sourcesContent":["import { AmenitiesToSave } from '@models';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class AmenitiesPayload {\r\n  types?: Array<number>;\r\n  zones?: Array<number>;\r\n  extras?: Array<IExtra>;\r\n  parkings?: Array<number>;\r\n  paymentMethods?: Array<number>;\r\n\r\n  constructor(\r\n    pTypes: Array<number>,\r\n    pZones: Array<number>,\r\n    pExtras: Array<IExtra>,\r\n    pParkings: Array<number>,\r\n    pPpaymentMethods: Array<number>\r\n  ) {\r\n    this.types = pTypes;\r\n    this.zones = pZones;\r\n    this.extras = pExtras;\r\n    this.parkings = pParkings;\r\n    this.paymentMethods = pPpaymentMethods;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.types,\r\n      zones: this.zones,\r\n      extras: this.getExtras(),\r\n      parkings: this.parkings,\r\n      payment_methods: this.paymentMethods\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extras.map((extra: IExtra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { IFranchise } from '@interfaces';\r\nimport { Franchise } from '@models';\r\n\r\nexport class BusinessPayload {\r\n  businessForm: FormGroup;\r\n\r\n  constructor(pBusinessForm: FormGroup) {\r\n    this.businessForm = pBusinessForm;\r\n  }\r\n\r\n  toJson(): Franchise {\r\n    const form = this.businessForm.value;\r\n\r\n    const body: IFranchise = {\r\n      id: form.id || null,\r\n      name: form.name || null,\r\n      price_range: form.price_range,\r\n      style: form.style,\r\n    };\r\n\r\n    return body;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { Restaurant } from '@models';\r\n\r\nexport class RestaurantPayload {\r\n  newRestaurantForm: FormGroup;\r\n\r\n  constructor(pNewRestaurantForm: FormGroup) {\r\n    this.newRestaurantForm = pNewRestaurantForm;\r\n  }\r\n\r\n  public toJson(avoidManagerUpdate?: boolean): Restaurant {\r\n    const form = this.newRestaurantForm;\r\n\r\n    const restaurantInfo = {\r\n      name: form.get('name').value,\r\n      description: form.get('description').value,\r\n      coordinates: this.concatCoordinates(),\r\n      address: form.get('address').value,\r\n      phone: this.getPhone(),\r\n      email: form.get('email').value,\r\n      invoice_email: '',\r\n      invoice_url: '',\r\n      manager:\r\n        (form.get('manager').value || form.get('manager').value === 0) &&\r\n        !avoidManagerUpdate\r\n          ? form.get('manager').value\r\n          : undefined,\r\n    };\r\n\r\n    if (form.value.billingOption === '0') {\r\n      restaurantInfo.invoice_email = form.value.emailBilling;\r\n      delete restaurantInfo.invoice_url;\r\n    } else {\r\n      restaurantInfo.invoice_url = form.value.websiteBilling;\r\n      delete restaurantInfo.invoice_email;\r\n    }\r\n\r\n    return restaurantInfo as Restaurant;\r\n  }\r\n\r\n  private getPhone(): string {\r\n    return `+${this.newRestaurantForm.get('dialCode').value}${\r\n      this.newRestaurantForm.get('phone').value\r\n    }`;\r\n  }\r\n\r\n  private concatCoordinates(): Array<number> {\r\n    const coordinatesArray: Array<number> = [];\r\n\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('latitude').value)\r\n    );\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('longitude').value)\r\n    );\r\n\r\n    return coordinatesArray;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nexport class RestaurantAppDataPayload {\r\n  appDataForm: FormGroup;\r\n\r\n  constructor(pAppDataForm: FormGroup) {\r\n    this.appDataForm = pAppDataForm;\r\n  }\r\n\r\n  toJson() {\r\n    return {\r\n      max_offered_seats: this.appDataForm.get('max_offered_seats').value,\r\n      max_people_per_order: this.appDataForm.get('max_people_per_order').value,\r\n      max_cancel_limit_minutes: this.getTotalMinutes(),\r\n      reservation_time_minutes: this.appDataForm.get('reservation_time_minutes').value,\r\n    };\r\n  }\r\n\r\n  private getTotalMinutes(): number {\r\n    const hoursToMinutes = this.appDataForm.get('max_cancel_limit_hours').value * 60;\r\n    const totalMinutes = +hoursToMinutes + +this.appDataForm.get('max_cancel_limit_minutes').value;\r\n\r\n    return totalMinutes;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { NewBranch } from '@models';\r\n\r\nexport class RestaurantDetailPayload {\r\n  restaurantDetailForm: FormGroup;\r\n\r\n  constructor(pRestaurantDetailForm: FormGroup) {\r\n    this.restaurantDetailForm = pRestaurantDetailForm;\r\n  }\r\n\r\n  toJson(): NewBranch {\r\n    return {\r\n      name: this.restaurantDetailForm.get('name').value,\r\n      description: this.restaurantDetailForm.get('description').value,\r\n      coordinates: this.getCoordinatesArray(),\r\n      address: this.restaurantDetailForm.get('address').value,\r\n      address_extra: this.restaurantDetailForm.get('address_extra').value,\r\n      phone: this.getParsedPhone(),\r\n      email: this.restaurantDetailForm.get('email').value\r\n    };\r\n  }\r\n\r\n  private getCoordinatesArray(): Array<number> {\r\n    const coordArray = [\r\n      parseFloat(this.restaurantDetailForm.get('lat').value),\r\n      parseFloat(this.restaurantDetailForm.get('long').value)\r\n    ];\r\n\r\n    return coordArray;\r\n  }\r\n\r\n  private getParsedPhone(): string {\r\n    const form = this.restaurantDetailForm;\r\n    const concatPhone = `+${form.get('countryCode').value} ${form\r\n      .get('phone')\r\n      .value.trim()}`;\r\n\r\n    return concatPhone;\r\n  }\r\n}\r\n","import { Extra, AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class RestuarantExtraPayload {\r\n  extrasForm: FormGroup;\r\n\r\n  constructor(pExtrasForm: FormGroup) {\r\n    this.extrasForm = pExtrasForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      extras: this.getExtras()\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extrasForm.getRawValue().extras.map((extra: Extra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nexport class RestuarantParkingPayload {\r\n  parkingForm: FormGroup;\r\n\r\n  constructor(pParkingForm: FormGroup) {\r\n    this.parkingForm = pParkingForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      parkings: this.parkingForm.get('parking').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantImagesPayload {\r\n  private imagesForm: FormGroup;\r\n\r\n  constructor(pImagesForm: FormGroup) {\r\n    this.imagesForm = pImagesForm;\r\n  }\r\n\r\n  public toFormData(): FormData {\r\n    const galleryData = new FormData();\r\n\r\n    galleryData.append('cover', this.imagesForm.get('coverImage').value);\r\n\r\n    const galleryImages = this.imagesForm.get('galleryImages') as FormArray;\r\n\r\n    galleryImages.controls.forEach((control, i) => {\r\n      if (!control.get('id')) {\r\n        galleryData.append(\r\n          'gallery[' + i + ']',\r\n          galleryImages.controls[i].get('fileValue').value\r\n        );\r\n      }\r\n    });\r\n\r\n    if (this.imagesForm.get('imageLink').value) {\r\n      galleryData.append('matterport', this.imagesForm.get('imageLink').value);\r\n    }\r\n    return galleryData;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantPaymentMethodPayload {\r\n  paymentMethodsForm: FormGroup;\r\n\r\n  constructor(pPaymentMethodsForm: FormGroup) {\r\n    this.paymentMethodsForm = pPaymentMethodsForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      payment_methods: this.paymentMethodsForm.get('paymentMethods').value || []\r\n    };\r\n  }\r\n}\r\n","import { IWorkingHour } from '@interfaces';\r\nimport { WorkingHoursResponse } from '@models';\r\nimport { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantWorkingHoursPayload {\r\n  private workingHoursForm: FormGroup;\r\n\r\n  constructor(pWorkingHoursForm: FormGroup) {\r\n    this.workingHoursForm = pWorkingHoursForm;\r\n  }\r\n\r\n  public fixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getFixedHours() };\r\n  }\r\n\r\n  public mixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getMixedHours() };\r\n  }\r\n\r\n  private getMixedHours() {\r\n    const currentWeekdays = this.workingHoursForm.get(\r\n      'mixedHours'\r\n    ) as FormArray;\r\n    const activeDays: Array<IWorkingHour> = [];\r\n\r\n    currentWeekdays.controls.forEach((weekday, index) => {\r\n      if (weekday.get('isSelected').value === true) {\r\n        const weekdayObject = {\r\n          week_day: index + 1,\r\n          opens_at: weekday.get('opening').value,\r\n          closes_at: weekday.get('closing').value\r\n        };\r\n\r\n        activeDays.push(weekdayObject);\r\n      }\r\n    });\r\n\r\n    return activeDays;\r\n  }\r\n\r\n  private getFixedHours(): Array<IWorkingHour> {\r\n    const hours: Array<IWorkingHour> = [];\r\n\r\n    Object.keys(this.workingHoursForm.value.fixedHours.weekdays).forEach(\r\n      day => {\r\n        const fixedHours = this.workingHoursForm.get('fixedHours');\r\n        if (fixedHours.get('weekdays').get(day).value) {\r\n          const object = {\r\n            week_day: parseInt(day, 10),\r\n            opens_at: fixedHours.get('opening').value,\r\n            closes_at: fixedHours.get('closing').value\r\n          };\r\n\r\n          hours.push(object);\r\n        }\r\n      }\r\n    );\r\n\r\n    return hours;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantReservationZonePayload {\r\n  reservationZonesForm: FormGroup;\r\n\r\n  constructor(pReservationZonesFOrm: FormGroup) {\r\n    this.reservationZonesForm = pReservationZonesFOrm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      zones: this.reservationZonesForm.get('zones').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantServiceTypePayload {\r\n  serviceTypeForm: FormGroup;\r\n\r\n  constructor(pServiceTypeForm: FormGroup) {\r\n    this.serviceTypeForm = pServiceTypeForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.serviceTypeForm.get('type').value || []\r\n    };\r\n  }\r\n}\r\n","export * from './amenities.payload';\r\nexport * from './franchise.payload';\r\nexport * from './restaurant.payload';\r\nexport * from './restaurant-app-data.payload';\r\nexport * from './restaurant-detail.payload';\r\nexport * from './restaurant-extra.payload';\r\nexport * from './restaurant-parking.payload';\r\nexport * from './restaurant-images.payload';\r\nexport * from './restaurant-payment-method.payload';\r\nexport * from './restaurant-working-hours.payload';\r\nexport * from './restaurant-reservation-zone.payload';\r\nexport * from './restaurant-service-type.payload';\r\n","import { CommonModule } from '@angular/common';\r\nimport { AppDataRoutingModule } from './app-data-routing.module';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { AppDataComponent } from './app-data.component';\r\n\r\n@NgModule({\r\n  declarations: [AppDataComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AppDataRoutingModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class AppDataModule { }\r\n","import { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Restaurant, ResponseDetail } from '@models';\r\nimport { RestaurantAppDataPayload } from '@payloads';\r\nimport { RestaurantService } from '@services';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n  FormControl,\r\n  Validators,\r\n  FormGroup,\r\n  FormBuilder,\r\n} from '@angular/forms';\r\nimport { map } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-app-data',\r\n  templateUrl: './app-data.component.html',\r\n  styleUrls: ['./app-data.component.scss'],\r\n})\r\nexport class AppDataComponent implements OnInit, OnDestroy {\r\n  restaurantId: string = localStorage.getItem('restaurantId');\r\n  restaurant: Restaurant;\r\n  appDataForm: FormGroup = this.fb.group({\r\n    max_cancel_limit_hours: new FormControl(\r\n      { value: 1, disabled: true },\r\n      Validators.required\r\n    ),\r\n    max_cancel_limit_minutes: new FormControl(\r\n      { value: 0, disabled: true },\r\n      Validators.required\r\n    ),\r\n    max_offered_seats: new FormControl(\r\n      { value: 1, disabled: true },\r\n      Validators.required\r\n    ),\r\n    max_people_per_order: new FormControl(\r\n      { value: 1, disabled: true },\r\n      Validators.required\r\n    ),\r\n    reservation_time_minutes: new FormControl(\r\n      { value: 0, disabled: true },\r\n      Validators.required\r\n    ),\r\n  });\r\n  private updatedRestaurantSubscription = Subscription.EMPTY;\r\n  private restaurantSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private restaurantService: RestaurantService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getRestaurantDetails(parseInt(this.restaurantId, 10));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.updatedRestaurantSubscription.unsubscribe();\r\n    this.restaurantSubscription.unsubscribe();\r\n  }\r\n\r\n  manageControlQuantity(\r\n    quantity: number = 1,\r\n    form: FormGroup,\r\n    controlName: string,\r\n    operation: string\r\n  ): void {\r\n    const actualValue = form.get(controlName).value;\r\n    let newValue = actualValue;\r\n    if (operation === 'subtract') {\r\n      if (\r\n        actualValue > quantity &&\r\n        controlName !== 'max_cancel_limit_minutes'\r\n      ) {\r\n        newValue = actualValue - quantity;\r\n      } else if (\r\n        (controlName === 'max_cancel_limit_minutes' ||\r\n          controlName === 'reservation_time_minutes') &&\r\n        actualValue > 0 &&\r\n        actualValue !== 60\r\n      ) {\r\n        newValue = actualValue - quantity;\r\n      } else if (\r\n        (controlName === 'max_cancel_limit_minutes' ||\r\n          controlName === 'reservation_time_minutes') &&\r\n        actualValue === 60\r\n      ) {\r\n        newValue = 60;\r\n        newValue = newValue - quantity;\r\n      }\r\n    } else if (operation === 'add') {\r\n      if (\r\n        (controlName === 'max_cancel_limit_minutes' ||\r\n          controlName === 'reservation_time_minutes') &&\r\n        (actualValue + quantity > 60 || actualValue + quantity === 60)\r\n      ) {\r\n        if (controlName === 'max_cancel_limit_minutes') {\r\n          this.appDataForm\r\n            .get('max_cancel_limit_hours')\r\n            .setValue(this.appDataForm.get('max_cancel_limit_hours').value + 1);\r\n          newValue = 0;\r\n        } else {\r\n          newValue = 60;\r\n        }\r\n      } else {\r\n        newValue = actualValue + quantity;\r\n      }\r\n    }\r\n    form.get(controlName).setValue(newValue);\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.appDataForm.invalid) {\r\n      return;\r\n    } else {\r\n      const payload = new RestaurantAppDataPayload(this.appDataForm);\r\n\r\n      this.updatedRestaurantSubscription = this.restaurantService\r\n        .updateRestaurantDetails(this.restaurantId, payload.toJson())\r\n        .subscribe(() => {\r\n          this.openSnackBar('Cambios guardados', 'Entendido');\r\n        });\r\n    }\r\n  }\r\n\r\n  private getRestaurantDetails(id: number) {\r\n    this.restaurantSubscription = this.restaurantService\r\n      .getRestaurantDetail(id)\r\n      .pipe(\r\n        map((response: ResponseDetail) => {\r\n          const restaurant = response.restaurant;\r\n          return new Restaurant(restaurant);\r\n        })\r\n      )\r\n      .subscribe((restaurant: Restaurant) => {\r\n        this.restaurant = restaurant;\r\n\r\n        if (this.restaurant) {\r\n          this.setUpForm();\r\n        }\r\n      });\r\n  }\r\n\r\n  private openSnackBar(message: string, action: string) {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000,\r\n    });\r\n  }\r\n\r\n  private setUpForm(): void {\r\n    let hours = 0;\r\n    hours = this.restaurant.max_cancel_limit_minutes / 60;\r\n    const minutes = this.restaurant.max_cancel_limit_minutes % 60;\r\n\r\n    this.appDataForm.patchValue({\r\n      max_offered_seats: this.restaurant.max_offered_seats,\r\n      max_people_per_order: this.restaurant.max_people_per_order,\r\n      max_cancel_limit_hours: Math.trunc(hours),\r\n      max_cancel_limit_minutes: minutes,\r\n      reservation_time_minutes: this.restaurant.reservation_time_minutes,\r\n    });\r\n  }\r\n}\r\n","<form [formGroup]=\"appDataForm\" (ngSubmit)=\"onSubmit()\" novalidate class=\"dark\">\r\n  <p class=\"nm\">Reservaciones asignadas a tu sucursal</p>\r\n  <p class=\"clr-gray\">\r\n    Total de asientos que ofertarás unicamente para las reservas por\r\n    medio de la aplicación\r\n  </p>\r\n  <small class=\"clr-nm\">No todos los lugares de tu establecimiento tienen que estar\r\n    asignados por medio de la aplicación.</small>\r\n  <mat-form-field class=\"number contains-arrows\">\r\n    <input matInput formControlName=\"max_offered_seats\" mask=\"0*\" />\r\n    <mat-error *ngIf=\"\r\n                  appDataForm.get('max_offered_seats').hasError('required')\r\n                \">\r\n      Esta información es necesaria\r\n    </mat-error>\r\n    <mat-error *ngIf=\"appDataForm.get('max_offered_seats').hasError('min')\">\r\n      El valor mínimo requerido es 1\r\n    </mat-error>\r\n    <span matSuffix>\r\n      Comensales*\r\n      <img src=\"assets/images/icons/btn-stepper-up.svg\" class=\"quantity-control up\" (click)=\"\r\n                    manageControlQuantity(\r\n                      1,\r\n                      appDataForm,\r\n                      'max_offered_seats',\r\n                      'add'\r\n                    )\r\n                  \" />\r\n      <img src=\"assets/images/icons/btn-stepper-down.svg\" class=\"quantity-control down\" (click)=\"\r\n                    manageControlQuantity(\r\n                      1,\r\n                      appDataForm,\r\n                      'max_offered_seats',\r\n                      'subtract'\r\n                    )\r\n                  \" />\r\n    </span>\r\n  </mat-form-field>\r\n  <p class=\"clr-gray\">Máximo de comensales por grupo</p>\r\n  <small class=\"clr-nm\">Elige el número de comensales que aceptaras por reservación</small>\r\n  <mat-form-field class=\"number contains-arrows\">\r\n    <input matInput formControlName=\"max_people_per_order\" mask=\"0*\" />\r\n    <mat-error *ngIf=\"\r\n                  appDataForm.get('max_people_per_order').hasError('required')\r\n                \">\r\n      Esta información es necesaria\r\n    </mat-error>\r\n    <mat-error *ngIf=\"\r\n                  appDataForm.get('max_people_per_order').hasError('min')\r\n                \">\r\n      El valor mínimo requerido es 1\r\n    </mat-error>\r\n    <span matSuffix>\r\n      Comensales por reservación*\r\n      <img src=\"assets/images/icons/btn-stepper-up.svg\" class=\"quantity-control up\" (click)=\"\r\n                    manageControlQuantity(\r\n                      1,\r\n                      appDataForm,\r\n                      'max_people_per_order',\r\n                      'add'\r\n                    )\r\n                  \" />\r\n      <img src=\"assets/images/icons/btn-stepper-down.svg\" class=\"quantity-control down\" (click)=\"\r\n                    manageControlQuantity(\r\n                      1,\r\n                      appDataForm,\r\n                      'max_people_per_order',\r\n                      'subtract'\r\n                    )\r\n                  \" />\r\n    </span>\r\n  </mat-form-field>\r\n  <p class=\"nm\">Tiempos de pedidos y cancelaciones</p>\r\n  <p class=\"clr-gray\">\r\n    Define el tiempo máximo en que los usuarios podrán cancelar\r\n  </p>\r\n  <div class=\"inl\">\r\n    <mat-form-field class=\"number contains-arrows\">\r\n      <input matInput formControlName=\"max_cancel_limit_hours\" mask=\"0*\" />\r\n      <mat-error *ngIf=\"\r\n                    appDataForm\r\n                      .get('max_cancel_limit_hours')\r\n                      .hasError('required')\r\n                  \">\r\n        Esta información es necesaria\r\n      </mat-error>\r\n      <mat-error *ngIf=\"\r\n                    appDataForm.get('max_cancel_limit_hours').hasError('min')\r\n                  \">\r\n        El valor mínimo requerido es 1\r\n      </mat-error>\r\n      <span matSuffix>\r\n        Horas*\r\n        <img src=\"assets/images/icons/btn-stepper-up.svg\" class=\"quantity-control up\" (click)=\"\r\n                      manageControlQuantity(\r\n                        1,\r\n                        appDataForm,\r\n                        'max_cancel_limit_hours',\r\n                        'add'\r\n                      )\r\n                    \" />\r\n        <img src=\"assets/images/icons/btn-stepper-down.svg\" class=\"quantity-control down\" (click)=\"\r\n                      manageControlQuantity(\r\n                        1,\r\n                        appDataForm,\r\n                        'max_cancel_limit_hours',\r\n                        'subtract'\r\n                      )\r\n                    \" />\r\n      </span>\r\n    </mat-form-field>\r\n    <mat-form-field class=\"number contains-arrows\">\r\n      <input matInput formControlName=\"max_cancel_limit_minutes\" mask=\"0*\" />\r\n      <mat-error *ngIf=\"\r\n                    appDataForm\r\n                      .get('max_cancel_limit_minutes')\r\n                      .hasError('required')\r\n                  \">\r\n        Esta información es necesaria\r\n      </mat-error>\r\n      <mat-error *ngIf=\"\r\n                    appDataForm\r\n                      .get('max_cancel_limit_minutes')\r\n                      .hasError('min')\r\n                  \">\r\n        El valor mínimo requerido es 0\r\n      </mat-error>\r\n      <span matSuffix>\r\n        Minutos*\r\n        <img src=\"assets/images/icons/btn-stepper-up.svg\" class=\"quantity-control up\" (click)=\"\r\n                      manageControlQuantity(\r\n                        30,\r\n                        appDataForm,\r\n                        'max_cancel_limit_minutes',\r\n                        'add'\r\n                      )\r\n                    \" />\r\n        <img src=\"assets/images/icons/btn-stepper-down.svg\" class=\"quantity-control down\" (click)=\"\r\n                      manageControlQuantity(\r\n                        30,\r\n                        appDataForm,\r\n                        'max_cancel_limit_minutes',\r\n                        'subtract'\r\n                      )\r\n                    \" />\r\n      </span>\r\n    </mat-form-field>\r\n    <small class=\"clr-nm ml\">Antes de la reservación</small>\r\n  </div>\r\n  <p class=\"clr-gray\">\r\n    Define cada cuánto se mostrará un espacio para reservaciones en la\r\n    aplicación\r\n  </p>\r\n  <div class=\"inl\">\r\n    <small class=\"clr-nm mr\">Tendré reservaciones cada</small>\r\n    <mat-form-field class=\"number contains-arrows\">\r\n      <input matInput formControlName=\"reservation_time_minutes\" mask=\"0*\" />\r\n      <mat-error *ngIf=\"\r\n                    appDataForm\r\n                      .get('reservation_time_minutes')\r\n                      .hasError('required')\r\n                  \">\r\n        Esta información es necesaria\r\n      </mat-error>\r\n      <mat-error *ngIf=\"\r\n                    appDataForm\r\n                      .get('reservation_time_minutes')\r\n                      .hasError('min')\r\n                  \">\r\n        El valor mínimo requerido es 1\r\n      </mat-error>\r\n      <span matSuffix>\r\n        Minutos*\r\n        <img src=\"assets/images/icons/btn-stepper-up.svg\" class=\"quantity-control up\" (click)=\"\r\n                      manageControlQuantity(\r\n                        15,\r\n                        appDataForm,\r\n                        'reservation_time_minutes',\r\n                        'add'\r\n                      )\r\n                    \" />\r\n        <img src=\"assets/images/icons/btn-stepper-down.svg\" class=\"quantity-control down\" (click)=\"\r\n                      manageControlQuantity(\r\n                        15,\r\n                        appDataForm,\r\n                        'reservation_time_minutes',\r\n                        'subtract'\r\n                      )\r\n                    \" />\r\n      </span>\r\n    </mat-form-field>\r\n  </div>\r\n  <button class=\"btns\" type=\"submit\">\r\n    <span>Guardar</span>\r\n  </button>\r\n</form>\r\n","import { AppDataComponent } from './app-data.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AppDataComponent,\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppDataRoutingModule { }\r\n"]}