{"version":3,"sources":["webpack:///node_modules/@angular/material/fesm2015/card.js","webpack:///node_modules/@angular/material/card/index.d.ts.MatCard.html","webpack:///src/app/pages/layout/branches/branches.module.ts","webpack:///src/app/pages/layout/branches/new-branch/new-branch.component.ts","webpack:///src/app/pages/layout/branches/new-branch/new-branch.component.html","webpack:///src/app/pages/layout/branches/branches.component.ts","webpack:///src/app/pages/layout/branches/branches.component.html","webpack:///src/app/pages/layout/branches/branches-routing.module.ts","webpack:///src/app/pages/layout/branches/new-branch/new-branch-module.ts"],"names":["MatCardContent","MatCard","_animationMode","this","MatCardHeader","MatCardTitleGroup","MatCardModule","BranchesModule","dialogRef","fb","franchiseService","mapsAPILoader","ngZone","restaurantService","snackBar","getExistingBranches","coordinatesMatcher","CoordinatesErrorMatcher","newRestaurantForm","group","name","required","minLength","maxLength","description","latitude","longitude","address","dialCode","phone","phoneNumberValidator","regionCode","email","validators","pattern","updateOn","billingOption","emailBilling","websiteBilling","manager","validator","coordinatesValidator","managers","initLocationInput","franchiseIdNumber","getManagers","getFranchise","onBillingOptionSelect","restaurant","patchRestaurantForm","changes","previousValue","currentValue","restaurantId","id","r","billingValue","invoice_email","patchValue","coordinates","getCountryCode","getNationalFormatNumber","getRegionCode","invoice_url","managerObject","phoneNumberUtil","PhoneNumberUtil","getInstance","parsedPhone","parse","format","PhoneNumberFormat","NATIONAL","replace","countryCode","toString","getRegionCodeForCountryCode","currentFranchise","subscribe","response","franchiseId","invalid","openSnackBar","payload","avoidManagerUpdate","get","value","editExistingRestaurant","toJson","createNewRestaurant","updateRestaurant","emit","createRestaurant","close","message","action","open","duration","iso","setValue","setValidators","toUpperCase","updateValueAndValidity","form","coordinatesDoNotSetted","load","then","autocomplete","google","maps","places","Autocomplete","searchElementRef","nativeElement","types","addListener","run","place","getPlace","geometry","location","lat","lng","control","validNumber","phoneNumber","parseAndKeepRawInput","isValidNumber","e","wrongNumber","updateFieldFormValidators","emailBillingFormControl","websiteBillingFormControl","clearValidations","clearValidators","getFranchiseManagers","submitted","touched","hasError","dialog","restaurantsService","restaurants","getFranchiseSubscription","Subscription","EMPTY","newBranchModalSubscription","getRestaurantsSubscription","deleteRestaurantSubscription","pipe","map","franchise","getFranchiseRestaurants","unsubscribe","openModal","width","afterClosed","shouldGetRestaurants","isEdit","getRestaurants","deleteRestaurant","find","BranchesRoutingModule","NewBranchModule"],"mappings":"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","file":"x","sourcesContent":["import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardContent {\n}\nMatCardContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            },] }\n];\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            },] }\n];\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            },] }\n];\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /**\n         * Position of the actions inside the card.\n         */\n        this.align = 'start';\n    }\n}\nMatCardActions.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n                }\n            },] }\n];\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Position of the actions inside the card.\n     * @type {?}\n     */\n    MatCardActions.prototype.align;\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            },] }\n];\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            },] }\n];\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            },] }\n];\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MatCard.prototype._animationMode;\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }] }\n];\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatCardModule {\n}\nMatCardModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n//# sourceMappingURL=card.js.map\n","<ng-content></ng-content>\n<ng-content select=\"mat-card-footer\"></ng-content>\n","import { MatDialogModule } from '@angular/material/dialog';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BranchesComponent } from './branches.component';\r\nimport { BranchesRoutingModule } from './branches-routing.module';\r\nimport { SectionHeaderModule } from '@components/section-header/section-header.module';\r\nimport { NewBranchComponent } from './new-branch/new-branch.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { NewBranchModule } from './new-branch/new-branch-module';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatSelectModule } from '@angular/material/select';\r\n@NgModule({\r\n  declarations: [BranchesComponent],\r\n  imports: [\r\n    CommonModule,\r\n    BranchesRoutingModule,\r\n    SectionHeaderModule,\r\n    MatDialogModule,\r\n    MatMenuModule,\r\n    NewBranchModule,\r\n    MatCardModule,\r\n    MatSelectModule,\r\n  ],\r\n  entryComponents: [NewBranchComponent],\r\n})\r\nexport class BranchesModule {}\r\n","import { ErrorStateMatcher } from '@angular/material/core';\r\nimport { MapsAPILoader } from '@agm/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RestaurantPayload } from '@payloads';\r\nimport {\r\n  AbstractControl,\r\n  ValidatorFn,\r\n  FormGroup,\r\n  FormControl,\r\n  Validators,\r\n  FormBuilder,\r\n  ValidationErrors,\r\n  FormGroupDirective,\r\n  NgForm,\r\n} from '@angular/forms';\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  NgZone,\r\n  Input,\r\n  SimpleChanges,\r\n  EventEmitter,\r\n  Output,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport { Franchise, Restaurant, ResponseManagers } from '@models';\r\nimport { IUser } from '@interfaces';\r\nimport { PhoneNumberUtil, PhoneNumberFormat } from 'google-libphonenumber';\r\nimport { RestaurantService, FranchiseService } from '@services';\r\nimport { RegexUrl, RegexEmail } from '@constants';\r\n\r\nexport interface DialogData {\r\n  restaurantId: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-new-branch',\r\n  templateUrl: './new-branch.component.html',\r\n  styleUrls: ['./new-branch.component.scss'],\r\n})\r\nexport class NewBranchComponent implements OnInit, OnChanges {\r\n  @Input() restaurant: Restaurant;\r\n  @Input() franchiseIdNumber: number;\r\n  @Output() getExistingBranches: EventEmitter<void> = new EventEmitter<void>();\r\n  @ViewChild('searchAddress') private searchElementRef: ElementRef;\r\n\r\n  public coordinatesMatcher = new CoordinatesErrorMatcher();\r\n  public countryCode: string;\r\n  public newRestaurantForm = this.fb.group(\r\n    {\r\n      name: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(150),\r\n      ]),\r\n      description: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(220),\r\n      ]),\r\n      latitude: new FormControl('', Validators.required),\r\n      longitude: new FormControl('', Validators.required),\r\n      address: new FormControl(''),\r\n      dialCode: new FormControl(52, Validators.required),\r\n      phone: new FormControl('', [\r\n        Validators.required,\r\n        Validators.minLength(10),\r\n        Validators.maxLength(10),\r\n        this.phoneNumberValidator('MX'),\r\n      ]),\r\n      regionCode: new FormControl('MX'),\r\n      email: new FormControl('', {\r\n        validators: [Validators.required, Validators.pattern(RegexEmail)],\r\n        updateOn: 'blur',\r\n      }),\r\n      billingOption: new FormControl('0', Validators.required),\r\n      emailBilling: new FormControl('', { updateOn: 'blur' }),\r\n      websiteBilling: new FormControl(''),\r\n      manager: new FormControl(''),\r\n    },\r\n    { validator: this.coordinatesValidator }\r\n  );\r\n  private franchiseId: number;\r\n  private restaurantId: number;\r\n  public managers: Array<IUser> = [];\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<NewBranchComponent>,\r\n    private fb: FormBuilder,\r\n    private franchiseService: FranchiseService,\r\n    private mapsAPILoader: MapsAPILoader,\r\n    private ngZone: NgZone,\r\n    private restaurantService: RestaurantService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initLocationInput();\r\n    if (this.franchiseIdNumber) {\r\n      this.getManagers();\r\n    } else {\r\n      this.getFranchise();\r\n    }\r\n    this.onBillingOptionSelect('0');\r\n    if (this.restaurant) {\r\n      this.patchRestaurantForm();\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.restaurant.previousValue) {\r\n      this.restaurant = changes.restaurant.currentValue;\r\n      this.restaurantId = this.restaurant.id;\r\n      this.patchRestaurantForm();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Getter method to obtain current value for region code. Used in\r\n   * ngTelInput\r\n   *\r\n   * @returns A string with the value for the region code Form Control\r\n   */\r\n  get regionCodeValue(): string {\r\n    return this.newRestaurantForm.get('regionCode').value;\r\n  }\r\n\r\n  /**\r\n   * Uses current selected restaurant information to patch the form\r\n   */\r\n  private patchRestaurantForm(): void {\r\n    const r = this.restaurant;\r\n    this.restaurantId = r.id;\r\n    const billingValue = r.invoice_email ? '0' : '1';\r\n\r\n    this.newRestaurantForm.patchValue({\r\n      name: r.name,\r\n      description: r.description,\r\n      latitude: r.coordinates[0],\r\n      longitude: r.coordinates[1],\r\n      address: r.address,\r\n      dialCode: this.getCountryCode(r.phone),\r\n      phone: this.getNationalFormatNumber(r.phone),\r\n      regionCode: this.getRegionCode(r.phone),\r\n      email: r.email,\r\n      emailBilling: r.invoice_email || '',\r\n      websiteBilling: r.invoice_url || '',\r\n      billingOption: billingValue,\r\n      manager: r.managerObject ? r.managerObject.id : '',\r\n    });\r\n  }\r\n  /**\r\n   * Parses the phone number into national format based on the region\r\n   * so it can be used to patch the form propertly\r\n   *\r\n   * @param phone A string containg the phone number in international format\r\n   * @returns A string cointaing the restaurant phone number in national format\r\n   */\r\n  private getNationalFormatNumber(phone: string): string {\r\n    const phoneNumberUtil = PhoneNumberUtil.getInstance();\r\n    const parsedPhone = phoneNumberUtil.parse(\r\n      phone[0] === '+' ? phone : `+${phone}`,\r\n      this.getRegionCode(phone)\r\n    );\r\n    const phoneFormat = PhoneNumberFormat.NATIONAL;\r\n    const formattedPhone = phoneNumberUtil.format(parsedPhone, phoneFormat);\r\n\r\n    return formattedPhone.replace(/\\D/g, '');\r\n  }\r\n\r\n  /**\r\n   * Takes an international phone number and generates its region code\r\n   * to be used by ngTelInput (eg. 'mx')\r\n   *\r\n   * @param phone A string containg the phone number in international format\r\n   * @returns A string containing the region code\r\n   */\r\n  private getRegionCode(phone: string): string {\r\n    const phoneNumberUtil = PhoneNumberUtil.getInstance();\r\n    const parsedPhone = phoneNumberUtil.parse(`+${phone}`);\r\n    const countryCode = parsedPhone.getCountryCode();\r\n    this.countryCode = `+${countryCode.toString()}`;\r\n    const regionCode = phoneNumberUtil.getRegionCodeForCountryCode(countryCode);\r\n\r\n    return regionCode;\r\n  }\r\n\r\n  /**\r\n   * Takes an international phone number and returns its country calling code\r\n   * (eg: '+52' for Mexico)\r\n   *\r\n   * @param phone A string containg the phone number in international format\r\n   * @returns A string containing the country calling code\r\n   */\r\n  private getCountryCode(phone: string): string {\r\n    const phoneNumberUtil = PhoneNumberUtil.getInstance();\r\n    const parsedPhone = phoneNumberUtil.parse(`+${phone}`);\r\n    const countryCode = parsedPhone.getCountryCode().toString();\r\n    return countryCode;\r\n  }\r\n\r\n  /**\r\n   * Gets Franchise information saved in localstorage to get its id\r\n   */\r\n  private getFranchise(): void {\r\n    this.franchiseService.currentFranchise.subscribe((response: Franchise) => {\r\n      this.franchiseId = response.id;\r\n      this.franchiseIdNumber = response.id;\r\n      this.getManagers();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Checks form validity.\r\n   * If it's valid, it generated the payload and then\r\n   * calls a mehthod to either create a new branch or edit an existing one.\r\n   *\r\n   * If it's invalid, opens a toast notification indicating it.\r\n   */\r\n  public onSubmit(): void {\r\n    if (this.newRestaurantForm.invalid) {\r\n      return this.openSnackBar(\r\n        'Por favor, revisa los campos que están marcados en rojo',\r\n        'Entendido'\r\n      );\r\n    }\r\n    const payload = new RestaurantPayload(this.newRestaurantForm);\r\n    let avoidManagerUpdate = false;\r\n    if (this.restaurant && this.restaurant.managerObject) {\r\n      avoidManagerUpdate =\r\n        payload.newRestaurantForm.get('manager').value ===\r\n        this.restaurant.managerObject.id;\r\n    }\r\n    if (this.restaurant) {\r\n      this.editExistingRestaurant(payload.toJson(avoidManagerUpdate));\r\n    } else {\r\n      this.createNewRestaurant(payload.toJson(avoidManagerUpdate));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a PUT request to update an existing restaurant information.\r\n   *\r\n   * Is the response is successful, displays a toast notification and\r\n   * emits and event to the parent component to get all restaurants\r\n   * again.\r\n   *\r\n   * @param payload Payload with the restaurant information\r\n   */\r\n  private editExistingRestaurant(payload: Restaurant): void {\r\n    this.restaurantService\r\n      .updateRestaurant(payload, this.restaurantId)\r\n      .subscribe(() => {\r\n        this.openSnackBar('Los cambios fueron guardados', 'Entendido');\r\n        this.getExistingBranches.emit();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Sends a POST request to create a new restaurant.\r\n   *\r\n   * If the response is successful, closes the modal and display a success\r\n   * toast notification.\r\n   *\r\n   * @param payload Payload with the restaurant information\r\n   */\r\n  private createNewRestaurant(payload: Restaurant): void {\r\n    this.restaurantService\r\n      .createRestaurant(payload, this.franchiseId)\r\n      .subscribe(() => {\r\n        this.dialogRef.close(true);\r\n        this.openSnackBar('La nueva sucursal fue creada', 'Entendido');\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Created a snackbar event to display a message for the user\r\n   *\r\n   *  @param message Text that will be displayed as the main message in the snackbar\r\n   *  @param action Text for the dismiss button on the snack bar\r\n   */\r\n  private openSnackBar(message: string, action: string): void {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates form validators for phone Form Control and sets\r\n   * country calling code.\r\n   *\r\n   * @param iso A string containg the region code for the selected country\r\n   * @param dialCode A string containing the dial code for the selected country\r\n   */\r\n  public setDialCode(iso: string, dialCode: number): void {\r\n    this.newRestaurantForm.get('dialCode').setValue(dialCode);\r\n    this.newRestaurantForm\r\n      .get('phone')\r\n      .setValidators([\r\n        Validators.required,\r\n        Validators.minLength(10),\r\n        Validators.maxLength(10),\r\n        this.phoneNumberValidator(iso.toUpperCase()),\r\n      ]);\r\n    this.newRestaurantForm.get('phone').updateValueAndValidity();\r\n  }\r\n\r\n  /**\r\n   * Takes the restaurant form and checks the coorindates validity\r\n   *\r\n   * @param form Restaurant Form Group\r\n   * @returns A Validation Error indicating form validity\r\n   */\r\n  private coordinatesValidator(form: FormGroup): ValidationErrors {\r\n    const condition =\r\n      !!form.get('latitude').value && !!form.get('longitude').value;\r\n    return condition ? null : { coordinatesDoNotSetted: true };\r\n  }\r\n\r\n  /**\r\n   * Sets maps API settings and adds a listener for when a new address\r\n   * is entered so it can update the coordinates value in the form\r\n   */\r\n  private initLocationInput(): void {\r\n    this.mapsAPILoader.load().then(() => {\r\n      const autocomplete = new google.maps.places.Autocomplete(\r\n        this.searchElementRef.nativeElement,\r\n        {\r\n          types: ['address'],\r\n        }\r\n      );\r\n      autocomplete.addListener('place_changed', () => {\r\n        this.ngZone.run(() => {\r\n          const place: google.maps.places.PlaceResult = autocomplete.getPlace();\r\n          if (place.geometry === undefined || place.geometry === null) {\r\n            return;\r\n          }\r\n          this.newRestaurantForm\r\n            .get('latitude')\r\n            .setValue(place.geometry.location.lat());\r\n          this.newRestaurantForm\r\n            .get('longitude')\r\n            .setValue(place.geometry.location.lng());\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Takes a phone number in international format and parses\r\n   * it to confirm its validity.\r\n   *\r\n   * @param regionCode A string containing the country region code\r\n   * @returns A Validtor Function with the phone validity\r\n   */\r\n  private phoneNumberValidator(regionCode: string): ValidatorFn {\r\n    const phoneNumberUtil = PhoneNumberUtil.getInstance();\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n      let validNumber = false;\r\n      try {\r\n        const phoneNumber = phoneNumberUtil.parseAndKeepRawInput(\r\n          control.value,\r\n          regionCode\r\n        );\r\n        validNumber = phoneNumberUtil.isValidNumber(phoneNumber);\r\n      } catch (e) {}\r\n\r\n      return validNumber ? null : { wrongNumber: { value: control.value } };\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @returns Billing option Form Control\r\n   */\r\n  get billingOptionFormControl(): FormControl {\r\n    return this.newRestaurantForm.get('billingOption') as FormControl;\r\n  }\r\n\r\n  /**\r\n   * @returns Billing email Form Control\r\n   */\r\n  get emailBillingFormControl(): FormControl {\r\n    return this.newRestaurantForm.get('emailBilling') as FormControl;\r\n  }\r\n\r\n  /**\r\n   * @returns Billing website Form Control\r\n   */\r\n  get websiteBillingFormControl(): FormControl {\r\n    return this.newRestaurantForm.get('websiteBilling') as FormControl;\r\n  }\r\n\r\n  /**\r\n   * Updates form validators based on the billing option selected\r\n   * @params Change from radio button group\r\n   */\r\n  public onBillingOptionSelect(value: string): void {\r\n    if (value === '0') {\r\n      this.updateFieldFormValidators(this.emailBillingFormControl, false, [\r\n        Validators.required,\r\n        Validators.pattern(RegexEmail),\r\n      ]);\r\n      this.updateFieldFormValidators(this.websiteBillingFormControl, true);\r\n    } else {\r\n      this.updateFieldFormValidators(this.websiteBillingFormControl, false, [\r\n        Validators.required,\r\n        Validators.pattern(RegexUrl),\r\n      ]);\r\n      this.updateFieldFormValidators(this.emailBillingFormControl, true);\r\n    }\r\n    this.websiteBillingFormControl.updateValueAndValidity();\r\n    this.emailBillingFormControl.updateValueAndValidity();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param control Field form to update\r\n   * @param validators Arrangement of validations\r\n   * @param clearValidations Indicates if we want to clear the validation field\r\n   */\r\n  public updateFieldFormValidators(\r\n    control: AbstractControl,\r\n    clearValidations: boolean,\r\n    validators?: any[]\r\n  ) {\r\n    if (clearValidations) {\r\n      control.clearValidators();\r\n    } else {\r\n      control.setValidators(validators);\r\n    }\r\n    control.updateValueAndValidity();\r\n  }\r\n\r\n  /**\r\n   * Function that manually closes the modal.\r\n   */\r\n  public closeModal(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  /**\r\n   * Function that searches for the managers at the server and then load them\r\n   * in the managers list.\r\n   */\r\n  private getManagers(): void {\r\n    this.franchiseService\r\n      .getFranchiseManagers(this.franchiseIdNumber)\r\n      .subscribe((response: ResponseManagers) => {\r\n        this.managers = response.managers;\r\n      });\r\n  }\r\n}\r\n\r\nclass CoordinatesErrorMatcher implements ErrorStateMatcher {\r\n  isErrorState(\r\n    control: FormControl | null,\r\n    form: FormGroupDirective | NgForm | null\r\n  ): boolean {\r\n    return (\r\n      (form.submitted || control.touched) &&\r\n      form.hasError('coordinatesDoNotSetted')\r\n    );\r\n  }\r\n}\r\n","<div class=\"new-branch-container\" [ngClass]=\"{ 'not-modal': restaurant }\">\r\n  <div class=\"modal-title\" *ngIf=\"!restaurant\">\r\n    <p class=\"title clr-gray\">\r\n      <b>CREAR NUEVA SUCURSAL</b>\r\n    </p>\r\n    <mat-icon aria-hidden=\"false\" aria-label=\"Cerrar modal\" class=\"clr-yellow close\" (click)=\"closeModal()\">close</mat-icon>\r\n  </div>\r\n\r\n  <form\r\n    [formGroup]=\"newRestaurantForm\"\r\n    id=\"newRestaurantForm\"\r\n    (ngSubmit)=\"onSubmit()\"\r\n    novalidate\r\n  >\r\n    <p class=\"settings-description\" *ngIf=\"!restaurant\">\r\n      Al crear una sucursal nueva, se duplicarán los datos de configuración de\r\n      la sucursal matriz, si deseas hacer algún cambio puedes hacerlo en la\r\n      sección de “Preferencias\" dentro de la sucursal.\r\n    </p>\r\n    <p class=\"nm\" *ngIf=\"restaurant\">Detalles</p>\r\n    <div class=\"inl column\">\r\n      <mat-form-field>\r\n        <mat-label>Nombre de la sucursal*</mat-label>\r\n        <input matInput formControlName=\"name\" maxlength=\"150\" />\r\n        <mat-error *ngIf=\"newRestaurantForm.get('name').hasError('required')\">\r\n          Esta información es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"newRestaurantForm.get('name').hasError('minlength')\">\r\n          El mínimo de caracteres es de 3 caracteres\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div>\r\n      <mat-form-field>\r\n        <mat-label>Descripción de la sucursal</mat-label>\r\n        <textarea\r\n          matInput\r\n          formControlName=\"description\"\r\n          maxlength=\"220\"\r\n          cdkTextareaAutosize\r\n          cdkAutosizeMinRows=\"1\"\r\n          cdkAutosizeMaxRows=\"5\"\r\n        ></textarea>\r\n        <mat-error\r\n          *ngIf=\"newRestaurantForm.get('description').hasError('required')\"\r\n        >\r\n          Esta información es necesaria\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"newRestaurantForm.get('description').hasError('minlength')\"\r\n        >\r\n          El mínimo de caracteres es de 3 caracteres\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <p class=\"nm\">Dirección</p>\r\n    <div class=\"inl column\">\r\n      <mat-form-field>\r\n        <mat-label>Ingresa la dirección*</mat-label>\r\n        <input\r\n          matInput\r\n          autocorrect=\"off\"\r\n          autocapitalize=\"off\"\r\n          spellcheck=\"off\"\r\n          type=\"text\"\r\n          #searchAddress\r\n          placeholder=\"\"\r\n          formControlName=\"address\"\r\n          [errorStateMatcher]=\"coordinatesMatcher\"\r\n        />\r\n        <mat-icon matSuffix color=\"primary\">location_on</mat-icon>\r\n        <mat-error>Elige una dirección</mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"inl column map\">\r\n      <agm-map\r\n        [latitude]=\"newRestaurantForm.get('latitude').value\"\r\n        [longitude]=\"newRestaurantForm.get('longitude').value\"\r\n        [zoom]=\"16\"\r\n      >\r\n        <agm-marker\r\n          [latitude]=\"newRestaurantForm.get('latitude').value\"\r\n          [longitude]=\"newRestaurantForm.get('longitude').value\"\r\n        ></agm-marker>\r\n      </agm-map>\r\n    </div>\r\n    <p class=\"nm\">Datos de contacto</p>\r\n    <div class=\"inl column\">\r\n      <mat-form-field class=\"phone\">\r\n        <mat-label>Teléfono*</mat-label>\r\n        <input\r\n          matInput\r\n          formControlName=\"phone\"\r\n          [ng2TelInputOptions]=\"{\r\n            initialCountry: regionCodeValue ? regionCodeValue : 'mx',\r\n            formatOnDisplay: false\r\n          }\"\r\n          mask=\"00 0000 0000\"\r\n          [validation]=\"false\"\r\n          ng2TelInput\r\n          (countryChange)=\"setDialCode($event.iso2, $event.dialCode)\"\r\n          placeholder=\"00 0000 0000\"\r\n        />\r\n        <mat-error *ngIf=\"newRestaurantForm.get('phone').hasError('required')\">\r\n          Esta información es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"newRestaurantForm.get('phone').hasError('minlength')\">\r\n          El teléfono deberá ser de 10 dígitos. Ej. 55 5555 5555\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"\r\n            newRestaurantForm.get('phone').invalid &&\r\n            !newRestaurantForm.get('phone').hasError('minlength') &&\r\n            !newRestaurantForm.get('phone').hasError('required')\r\n          \"\r\n        >\r\n          El número no corresponde al país seleccionado\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <mat-label>Correo*</mat-label>\r\n        <input matInput formControlName=\"email\" />\r\n        <mat-error *ngIf=\"newRestaurantForm.get('email').hasError('required')\">\r\n          Esta información es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"newRestaurantForm.get('email').hasError('pattern')\">\r\n          El formato correcto deberá ser: ejemplo@ejemplo.com\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <p class=\"nm\">Gerente de la sucursal</p>\r\n    <div>\r\n      <mat-form-field>\r\n        <mat-label>Gerente</mat-label>\r\n        <mat-select formControlName=\"manager\">\r\n          <mat-option *ngFor=\"let manager of managers\" [value]=\"manager.id\">\r\n            {{ manager.name }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <p class=\"nm clr-gray\">Facturación</p>\r\n    <p class=\"nm subtitle-field clr-gray\">\r\n      Ingresa el lugar en donde tus clientes podrán solicitar su factura\r\n    </p>\r\n    <mat-radio-group\r\n      (change)=\"onBillingOptionSelect($event.value)\"\r\n      formControlName=\"billingOption\"\r\n      class=\"inl\"\r\n    >\r\n      <mat-radio-button value=\"0\">Correo electrónico</mat-radio-button>\r\n      <mat-radio-button value=\"1\">Sitio web</mat-radio-button>\r\n      <mat-error\r\n        *ngIf=\"\r\n        newRestaurantForm.get('billingOption').touched &&\r\n        newRestaurantForm.get('billingOption').hasError('required')\r\n        \"\r\n      >\r\n        Esta información es necesaria\r\n      </mat-error>\r\n    </mat-radio-group>\r\n\r\n    <div class=\"input-group\" *ngIf=\"billingOptionFormControl.value === '0'\">\r\n      <mat-form-field>\r\n        <mat-label>Correo electrónico </mat-label>\r\n        <input matInput formControlName=\"emailBilling\" />\r\n        <mat-error\r\n          *ngIf=\"newRestaurantForm.get('emailBilling').hasError('required')\"\r\n        >\r\n          Esta información es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"newRestaurantForm.get('emailBilling').hasError('pattern')\">\r\n          El formato correcto deberá ser: ejemplo@ejemplo.com\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div *ngIf=\"billingOptionFormControl.value === '1'\">\r\n      <mat-form-field>\r\n        <mat-label>Sitio web</mat-label>\r\n        <input matInput formControlName=\"websiteBilling\" />\r\n        <mat-error\r\n          *ngIf=\"newRestaurantForm.get('websiteBilling').hasError('pattern')\"\r\n        >\r\n          El formato no es válido\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"newRestaurantForm.get('websiteBilling').hasError('required')\"\r\n        >\r\n          Esta información es necesaria\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"inl buttons\">\r\n      <button\r\n        mat-button\r\n        type=\"button\"\r\n        class=\"btns-transparent\"\r\n        [mat-dialog-close]\r\n        *ngIf=\"!restaurant\"\r\n      >\r\n        <span>Cancelar</span>\r\n      </button>\r\n      <button mat-button type=\"submit\" class=\"btns\">\r\n        <span>{{ restaurant ? 'Guardar' : 'Crear' }}</span>\r\n      </button>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { IRestaurant } from '@interfaces';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { map } from 'rxjs/operators';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Franchise, Restaurant, ResponseRestaurant } from '@models';\r\nimport { FranchiseService, RestaurantService } from '@services';\r\nimport { NewBranchComponent } from './new-branch/new-branch.component';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-branches',\r\n  templateUrl: './branches.component.html',\r\n  styleUrls: ['./branches.component.scss']\r\n})\r\nexport class BranchesComponent implements OnInit, OnDestroy {\r\n  franchiseId: number;\r\n  restaurants: Array<Restaurant> = [];\r\n  restaurant: Restaurant;\r\n  private getFranchiseSubscription = Subscription.EMPTY;\r\n  private newBranchModalSubscription = Subscription.EMPTY;\r\n  private getRestaurantsSubscription = Subscription.EMPTY;\r\n  private deleteRestaurantSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private franchiseService: FranchiseService,\r\n    private restaurantsService: RestaurantService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getFranchiseSubscription = this.getFranchise()\r\n      .pipe(\r\n        map((franchise: Franchise) => {\r\n          this.franchiseId = franchise.id;\r\n        })\r\n      )\r\n      .subscribe(() => {\r\n        this.getFranchiseRestaurants();\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.getFranchiseSubscription.unsubscribe();\r\n    this.newBranchModalSubscription.unsubscribe();\r\n    this.getRestaurantsSubscription.unsubscribe();\r\n    this.deleteRestaurantSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Opens a modal to create a new branch\r\n   */\r\n  public openNewBranchModal() {\r\n    const openModal = this.dialog.open(NewBranchComponent, {\r\n      width: '770px'\r\n    });\r\n    this.newBranchModalSubscription = openModal\r\n      .afterClosed()\r\n      .subscribe((shouldGetRestaurants: boolean) => {\r\n        if (shouldGetRestaurants) {\r\n          this.getFranchiseRestaurants();\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Sends a GET request to obtain all restaurants in a franchise\r\n   *\r\n   * @param isEdit boolean to indicate if a branch was just edited.\r\n   * If it was, then the \"active\" branch on the view is not updated\r\n   */\r\n  public getFranchiseRestaurants(isEdit?: boolean): void {\r\n    this.getRestaurantsSubscription = this.restaurantsService\r\n      .getRestaurants(this.franchiseId)\r\n      .pipe(\r\n        map((response: ResponseRestaurant) => {\r\n          const restaurants = response.restaurants.map(\r\n            (restaurant: IRestaurant) => {\r\n              return new Restaurant(restaurant);\r\n            }\r\n          );\r\n\r\n          return restaurants;\r\n        })\r\n      )\r\n      .subscribe((restaurants: Array<Restaurant>) => {\r\n        this.restaurants = restaurants;\r\n        if (!isEdit) {\r\n          this.restaurant = this.restaurants[0];\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Sends DELETE request to delete restaurant from database.\r\n   *\r\n   * @param restaurantId Id of the restaurant to delete\r\n   */\r\n  public onBranchDelete(restaurantId: number): void {\r\n    this.deleteRestaurantSubscription = this.restaurantsService\r\n      .deleteRestaurant(restaurantId)\r\n      .subscribe(() => {\r\n        const activeBranchWasDeleted = restaurantId === this.restaurant.id;\r\n        this.getFranchiseRestaurants(activeBranchWasDeleted ? false : true);\r\n        this.openSnackBar('La sucursal fue eliminada', 'Entendido');\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Updates selected restaurant on click\r\n   *\r\n   * @params Clicked restaurant id\r\n   */\r\n  public onRestaurantSelect(id: number): void {\r\n    this.restaurant = this.restaurants.find((restaurant: Restaurant) => {\r\n      return restaurant.id === id;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets Franchise information saved in localstorage\r\n   *\r\n   * @returns An Observable of a Franchise\r\n   */\r\n  private getFranchise(): Observable<Franchise> {\r\n    return this.franchiseService.currentFranchise;\r\n  }\r\n\r\n  /**\r\n   * Created a snackbar event to display a message for the user\r\n   *\r\n   *  @param message Text that will be displayed as the main message in the snackbar\r\n   *  @param action Text for the dismiss button on the snack bar\r\n   */\r\n  private openSnackBar(message: string, action: string): void {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000\r\n    });\r\n  }\r\n}\r\n","<section class=\"dashboard-section-container\">\r\n  <app-section-header\r\n    [sectionName]=\"'Sucursales'\"\r\n    [actionName]=\"'Nueva Sucursal'\"\r\n    (actionClicked)=\"openNewBranchModal()\"\r\n  >\r\n  </app-section-header>\r\n  <div class=\"dashboard-content\" id=\"branches\">\r\n    <div class=\"empty inl\" *ngIf=\"restaurants.length === 0\">\r\n      <div>\r\n        <img src=\"assets/images/icons/icon-menu01.png\" alt=\"Menu\" />\r\n        <p class=\"h2 txtC clr-nm\">Aún no cuentas con sucursales</p>\r\n        <p>\r\n          En esta sección podrás configurar la información básica de tu\r\n          sucursal, para completar la configuración, tendrás que ir a las\r\n          preferencias dentro de esa sucursal\r\n        </p>\r\n        <a class=\"btns-small\" (click)=\"openNewBranchModal()\">\r\n          <span>Crear nueva sucursal</span>\r\n        </a>\r\n      </div>\r\n    </div>\r\n    <ng-container *ngIf=\"restaurants.length > 0\">\r\n      <aside>\r\n        <ul class=\"branches-list\">\r\n          <li\r\n            class=\"branch-container\"\r\n            *ngFor=\"let restaurant of restaurants\"\r\n            (click)=\"onRestaurantSelect(restaurant.id)\"\r\n          >\r\n            <div class=\"branch-header\">\r\n              <p>\r\n                <b> {{ restaurant.name }} </b>\r\n              </p>\r\n              <div\r\n                *ngIf=\"!restaurant.is_head_office\"\r\n                class=\"cta\"\r\n                [matMenuTriggerFor]=\"menu\"\r\n                (click)=\"$event.stopPropagation()\"\r\n              >\r\n                <img src=\"assets/images/icons/icon-dots.svg\" alt=\"\" />\r\n              </div>\r\n            </div>\r\n            <p>{{ restaurant.restaurantManager }}</p>\r\n            <mat-menu #menu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"onBranchDelete(restaurant.id)\">\r\n                Eliminar\r\n              </button>\r\n            </mat-menu>\r\n          </li>\r\n        </ul>\r\n      </aside>\r\n      <main id=\"content\">\r\n        <mat-card>\r\n          <mat-card-content>\r\n            <app-new-branch\r\n              [restaurant]=\"restaurant\"\r\n              [franchiseIdNumber]=\"franchiseId\"\r\n              (getExistingBranches)=\"getFranchiseRestaurants(true)\"\r\n            ></app-new-branch>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </main>\r\n    </ng-container>\r\n  </div>\r\n</section>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { BranchesComponent } from './branches.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: BranchesComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class BranchesRoutingModule {}\r\n","import {\r\n  MatDialogModule,\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA,\r\n} from '@angular/material/dialog';\r\nimport { environment } from '@environments/environment';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AgmCoreModule } from '@agm/core';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgxMaskModule } from 'ngx-mask';\r\nimport { Ng2TelInputModule } from 'ng2-tel-input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NewBranchComponent } from './new-branch.component';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@NgModule({\r\n  declarations: [NewBranchComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AgmCoreModule.forRoot({\r\n      apiKey: environment.maps.apiKey,\r\n      libraries: ['places'],\r\n    }),\r\n    MatInputModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgxMaskModule.forRoot(),\r\n    Ng2TelInputModule,\r\n    MatDialogModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatRadioModule,\r\n  ],\r\n  exports: [NewBranchComponent],\r\n  providers: [\r\n    {\r\n      provide: MatDialogRef,\r\n      useValue: {},\r\n    },\r\n    {\r\n      provide: MAT_DIALOG_DATA,\r\n      useValue: {},\r\n    },\r\n  ],\r\n})\r\nexport class NewBranchModule {}\r\n"]}