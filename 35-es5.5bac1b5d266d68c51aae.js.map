{"version":3,"sources":["webpack:///src/app/shared/payloads/amenities.payload.ts","webpack:///src/app/shared/payloads/franchise.payload.ts","webpack:///src/app/shared/payloads/restaurant.payload.ts","webpack:///src/app/shared/payloads/restaurant-app-data.payload.ts","webpack:///src/app/shared/payloads/restaurant-detail.payload.ts","webpack:///src/app/shared/payloads/restaurant-extra.payload.ts","webpack:///src/app/shared/payloads/restaurant-parking.payload.ts","webpack:///src/app/shared/payloads/restaurant-images.payload.ts","webpack:///src/app/shared/payloads/restaurant-payment-method.payload.ts","webpack:///src/app/shared/payloads/restaurant-working-hours.payload.ts","webpack:///src/app/shared/payloads/restaurant-reservation-zone.payload.ts","webpack:///src/app/shared/payloads/restaurant-service-type.payload.ts","webpack:///src/app/shared/payloads/index.ts","webpack:///src/app/pages/layout/preferences/amenities/payment-methods/payment-methods.module.ts","webpack:///src/app/pages/layout/preferences/amenities/payment-methods/payment-methods.component.ts","webpack:///src/app/pages/layout/preferences/amenities/payment-methods/payment-methods.component.html","webpack:///src/app/pages/layout/preferences/amenities/payment-methods/payment-methods-routing.module.ts"],"names":["AmenitiesPayload","pTypes","pZones","pExtras","pParkings","pPpaymentMethods","this","types","zones","extras","parkings","paymentMethods","getExtras","payment_methods","map","extra","id","active","name","BusinessPayload","pBusinessForm","businessForm","form","value","price_range","style","RestaurantPayload","pNewRestaurantForm","newRestaurantForm","avoidManagerUpdate","restaurantInfo","get","description","coordinates","concatCoordinates","address","phone","getPhone","email","invoice_email","invoice_url","manager","billingOption","emailBilling","websiteBilling","coordinatesArray","push","parseFloat","RestaurantAppDataPayload","pAppDataForm","appDataForm","max_offered_seats","max_people_per_order","max_cancel_limit_minutes","getTotalMinutes","reservation_time_minutes","RestaurantDetailPayload","pRestaurantDetailForm","restaurantDetailForm","getCoordinatesArray","address_extra","getParsedPhone","trim","RestuarantExtraPayload","pExtrasForm","extrasForm","getRawValue","RestuarantParkingPayload","pParkingForm","parkingForm","RestaurantImagesPayload","pImagesForm","imagesForm","galleryData","FormData","append","galleryImages","controls","forEach","control","i","RestuarantPaymentMethodPayload","pPaymentMethodsForm","paymentMethodsForm","RestaurantWorkingHoursPayload","pWorkingHoursForm","workingHoursForm","working_hours","getFixedHours","getMixedHours","currentWeekdays","activeDays","weekday","index","weekdayObject","week_day","opens_at","closes_at","hours","Object","keys","fixedHours","weekdays","day","object","parseInt","RestuarantReservationZonePayload","pReservationZonesFOrm","reservationZonesForm","RestuarantServiceTypePayload","pServiceTypeForm","serviceTypeForm","PaymentMethodsModule","fb","restaurantService","snackBar","group","restaurantId","localStorage","getItem","restaurantSubscription","Subscription","EMPTY","paymentMethodsSubscription","getRestaurantDetails","pipe","mergeMap","response","currentPaymentMethods","restaurant","filter","pPaymentMethod","patchValue","getPaymentMethods","subscribe","createPaymentMethodsObjects","unsubscribe","paymentMethod","currentSelectedPaymentMethods","onPaymentMethodSelection","paymentMethodsPayload","setRestaurantAmenities","toJson","openSnackBar","paymentMethodObject","find","getAmenities","getRestaurantDetail","includes","indexOf","splice","message","action","open","duration","PaymentMethodsRoutingModule"],"mappings":"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","file":"x","sourcesContent":["import { AmenitiesToSave } from '@models';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class AmenitiesPayload {\r\n  types?: Array<number>;\r\n  zones?: Array<number>;\r\n  extras?: Array<IExtra>;\r\n  parkings?: Array<number>;\r\n  paymentMethods?: Array<number>;\r\n\r\n  constructor(\r\n    pTypes: Array<number>,\r\n    pZones: Array<number>,\r\n    pExtras: Array<IExtra>,\r\n    pParkings: Array<number>,\r\n    pPpaymentMethods: Array<number>\r\n  ) {\r\n    this.types = pTypes;\r\n    this.zones = pZones;\r\n    this.extras = pExtras;\r\n    this.parkings = pParkings;\r\n    this.paymentMethods = pPpaymentMethods;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.types,\r\n      zones: this.zones,\r\n      extras: this.getExtras(),\r\n      parkings: this.parkings,\r\n      payment_methods: this.paymentMethods\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extras.map((extra: IExtra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { IFranchise } from '@interfaces';\r\nimport { Franchise } from '@models';\r\n\r\nexport class BusinessPayload {\r\n  businessForm: FormGroup;\r\n\r\n  constructor(pBusinessForm: FormGroup) {\r\n    this.businessForm = pBusinessForm;\r\n  }\r\n\r\n  toJson(): Franchise {\r\n    const form = this.businessForm.value;\r\n\r\n    const body: IFranchise = {\r\n      id: form.id || null,\r\n      name: form.name || null,\r\n      price_range: form.price_range,\r\n      style: form.style,\r\n    };\r\n\r\n    return body;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { Restaurant } from '@models';\r\n\r\nexport class RestaurantPayload {\r\n  newRestaurantForm: FormGroup;\r\n\r\n  constructor(pNewRestaurantForm: FormGroup) {\r\n    this.newRestaurantForm = pNewRestaurantForm;\r\n  }\r\n\r\n  public toJson(avoidManagerUpdate?: boolean): Restaurant {\r\n    const form = this.newRestaurantForm;\r\n\r\n    const restaurantInfo = {\r\n      name: form.get('name').value,\r\n      description: form.get('description').value,\r\n      coordinates: this.concatCoordinates(),\r\n      address: form.get('address').value,\r\n      phone: this.getPhone(),\r\n      email: form.get('email').value,\r\n      invoice_email: '',\r\n      invoice_url: '',\r\n      manager:\r\n        (form.get('manager').value || form.get('manager').value === 0) &&\r\n        !avoidManagerUpdate\r\n          ? form.get('manager').value\r\n          : undefined,\r\n    };\r\n\r\n    if (form.value.billingOption === '0') {\r\n      restaurantInfo.invoice_email = form.value.emailBilling;\r\n      delete restaurantInfo.invoice_url;\r\n    } else {\r\n      restaurantInfo.invoice_url = form.value.websiteBilling;\r\n      delete restaurantInfo.invoice_email;\r\n    }\r\n\r\n    return restaurantInfo as Restaurant;\r\n  }\r\n\r\n  private getPhone(): string {\r\n    return `+${this.newRestaurantForm.get('dialCode').value}${\r\n      this.newRestaurantForm.get('phone').value\r\n    }`;\r\n  }\r\n\r\n  private concatCoordinates(): Array<number> {\r\n    const coordinatesArray: Array<number> = [];\r\n\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('latitude').value)\r\n    );\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('longitude').value)\r\n    );\r\n\r\n    return coordinatesArray;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nexport class RestaurantAppDataPayload {\r\n  appDataForm: FormGroup;\r\n\r\n  constructor(pAppDataForm: FormGroup) {\r\n    this.appDataForm = pAppDataForm;\r\n  }\r\n\r\n  toJson() {\r\n    return {\r\n      max_offered_seats: this.appDataForm.get('max_offered_seats').value,\r\n      max_people_per_order: this.appDataForm.get('max_people_per_order').value,\r\n      max_cancel_limit_minutes: this.getTotalMinutes(),\r\n      reservation_time_minutes: this.appDataForm.get('reservation_time_minutes').value,\r\n    };\r\n  }\r\n\r\n  private getTotalMinutes(): number {\r\n    const hoursToMinutes = this.appDataForm.get('max_cancel_limit_hours').value * 60;\r\n    const totalMinutes = +hoursToMinutes + +this.appDataForm.get('max_cancel_limit_minutes').value;\r\n\r\n    return totalMinutes;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { NewBranch } from '@models';\r\n\r\nexport class RestaurantDetailPayload {\r\n  restaurantDetailForm: FormGroup;\r\n\r\n  constructor(pRestaurantDetailForm: FormGroup) {\r\n    this.restaurantDetailForm = pRestaurantDetailForm;\r\n  }\r\n\r\n  toJson(): NewBranch {\r\n    return {\r\n      name: this.restaurantDetailForm.get('name').value,\r\n      description: this.restaurantDetailForm.get('description').value,\r\n      coordinates: this.getCoordinatesArray(),\r\n      address: this.restaurantDetailForm.get('address').value,\r\n      address_extra: this.restaurantDetailForm.get('address_extra').value,\r\n      phone: this.getParsedPhone(),\r\n      email: this.restaurantDetailForm.get('email').value\r\n    };\r\n  }\r\n\r\n  private getCoordinatesArray(): Array<number> {\r\n    const coordArray = [\r\n      parseFloat(this.restaurantDetailForm.get('lat').value),\r\n      parseFloat(this.restaurantDetailForm.get('long').value)\r\n    ];\r\n\r\n    return coordArray;\r\n  }\r\n\r\n  private getParsedPhone(): string {\r\n    const form = this.restaurantDetailForm;\r\n    const concatPhone = `+${form.get('countryCode').value} ${form\r\n      .get('phone')\r\n      .value.trim()}`;\r\n\r\n    return concatPhone;\r\n  }\r\n}\r\n","import { Extra, AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class RestuarantExtraPayload {\r\n  extrasForm: FormGroup;\r\n\r\n  constructor(pExtrasForm: FormGroup) {\r\n    this.extrasForm = pExtrasForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      extras: this.getExtras()\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extrasForm.getRawValue().extras.map((extra: Extra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nexport class RestuarantParkingPayload {\r\n  parkingForm: FormGroup;\r\n\r\n  constructor(pParkingForm: FormGroup) {\r\n    this.parkingForm = pParkingForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      parkings: this.parkingForm.get('parking').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantImagesPayload {\r\n  private imagesForm: FormGroup;\r\n\r\n  constructor(pImagesForm: FormGroup) {\r\n    this.imagesForm = pImagesForm;\r\n  }\r\n\r\n  public toFormData(): FormData {\r\n    const galleryData = new FormData();\r\n\r\n    galleryData.append('cover', this.imagesForm.get('coverImage').value);\r\n\r\n    const galleryImages = this.imagesForm.get('galleryImages') as FormArray;\r\n\r\n    galleryImages.controls.forEach((control, i) => {\r\n      if (!control.get('id')) {\r\n        galleryData.append(\r\n          'gallery[' + i + ']',\r\n          galleryImages.controls[i].get('fileValue').value\r\n        );\r\n      }\r\n    });\r\n\r\n    if (this.imagesForm.get('imageLink').value) {\r\n      galleryData.append('matterport', this.imagesForm.get('imageLink').value);\r\n    }\r\n    return galleryData;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantPaymentMethodPayload {\r\n  paymentMethodsForm: FormGroup;\r\n\r\n  constructor(pPaymentMethodsForm: FormGroup) {\r\n    this.paymentMethodsForm = pPaymentMethodsForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      payment_methods: this.paymentMethodsForm.get('paymentMethods').value || []\r\n    };\r\n  }\r\n}\r\n","import { IWorkingHour } from '@interfaces';\r\nimport { WorkingHoursResponse } from '@models';\r\nimport { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantWorkingHoursPayload {\r\n  private workingHoursForm: FormGroup;\r\n\r\n  constructor(pWorkingHoursForm: FormGroup) {\r\n    this.workingHoursForm = pWorkingHoursForm;\r\n  }\r\n\r\n  public fixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getFixedHours() };\r\n  }\r\n\r\n  public mixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getMixedHours() };\r\n  }\r\n\r\n  private getMixedHours() {\r\n    const currentWeekdays = this.workingHoursForm.get(\r\n      'mixedHours'\r\n    ) as FormArray;\r\n    const activeDays: Array<IWorkingHour> = [];\r\n\r\n    currentWeekdays.controls.forEach((weekday, index) => {\r\n      if (weekday.get('isSelected').value === true) {\r\n        const weekdayObject = {\r\n          week_day: index + 1,\r\n          opens_at: weekday.get('opening').value,\r\n          closes_at: weekday.get('closing').value\r\n        };\r\n\r\n        activeDays.push(weekdayObject);\r\n      }\r\n    });\r\n\r\n    return activeDays;\r\n  }\r\n\r\n  private getFixedHours(): Array<IWorkingHour> {\r\n    const hours: Array<IWorkingHour> = [];\r\n\r\n    Object.keys(this.workingHoursForm.value.fixedHours.weekdays).forEach(\r\n      day => {\r\n        const fixedHours = this.workingHoursForm.get('fixedHours');\r\n        if (fixedHours.get('weekdays').get(day).value) {\r\n          const object = {\r\n            week_day: parseInt(day, 10),\r\n            opens_at: fixedHours.get('opening').value,\r\n            closes_at: fixedHours.get('closing').value\r\n          };\r\n\r\n          hours.push(object);\r\n        }\r\n      }\r\n    );\r\n\r\n    return hours;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantReservationZonePayload {\r\n  reservationZonesForm: FormGroup;\r\n\r\n  constructor(pReservationZonesFOrm: FormGroup) {\r\n    this.reservationZonesForm = pReservationZonesFOrm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      zones: this.reservationZonesForm.get('zones').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantServiceTypePayload {\r\n  serviceTypeForm: FormGroup;\r\n\r\n  constructor(pServiceTypeForm: FormGroup) {\r\n    this.serviceTypeForm = pServiceTypeForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.serviceTypeForm.get('type').value || []\r\n    };\r\n  }\r\n}\r\n","export * from './amenities.payload';\r\nexport * from './franchise.payload';\r\nexport * from './restaurant.payload';\r\nexport * from './restaurant-app-data.payload';\r\nexport * from './restaurant-detail.payload';\r\nexport * from './restaurant-extra.payload';\r\nexport * from './restaurant-parking.payload';\r\nexport * from './restaurant-images.payload';\r\nexport * from './restaurant-payment-method.payload';\r\nexport * from './restaurant-working-hours.payload';\r\nexport * from './restaurant-reservation-zone.payload';\r\nexport * from './restaurant-service-type.payload';\r\n","import { CommonModule } from '@angular/common';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { NgModule } from '@angular/core';\r\nimport { PaymentMethodsComponent } from './payment-methods.component';\r\nimport { PaymentMethodsRoutingModule } from './payment-methods-routing.module';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [PaymentMethodsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatCheckboxModule,\r\n    PaymentMethodsRoutingModule,\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class PaymentMethodsModule { }\r\n","import { IPaymentMethod } from '@interfaces';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { RestaurantService } from '@services';\r\nimport { RestuarantPaymentMethodPayload } from '@payloads';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { FormGroup, FormControl, FormBuilder } from '@angular/forms';\r\nimport { PaymentMethod, Amenities, ResponseDetail } from '@models';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-payment-methods',\r\n  templateUrl: './payment-methods.component.html',\r\n  styleUrls: ['./payment-methods.component.scss']\r\n})\r\nexport class PaymentMethodsComponent implements OnInit, OnDestroy {\r\n  paymentMethodsForm: FormGroup = this.fb.group({\r\n    paymentMethods: new FormControl([])\r\n  });\r\n  paymentMethods: Array<PaymentMethod> = [];\r\n  currentPaymentMethods: Array<number>;\r\n  restaurantId: number = parseInt(localStorage.getItem('restaurantId'), 10);\r\n  restaurantSubscription = Subscription.EMPTY;\r\n  paymentMethodsSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private restaurantService: RestaurantService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.restaurantSubscription = this.getRestaurantDetails(this.restaurantId)\r\n      .pipe(\r\n        mergeMap((response: ResponseDetail): any => {\r\n          this.currentPaymentMethods = response.restaurant.payment_methods\r\n            .filter(\r\n              (pPaymentMethod: IPaymentMethod) => pPaymentMethod.active === true\r\n            )\r\n            .map((pPaymentMethod: IPaymentMethod) => pPaymentMethod.id);\r\n\r\n          this.paymentMethodsForm.patchValue({\r\n            paymentMethods: this.currentPaymentMethods\r\n          });\r\n\r\n          return this.getPaymentMethods();\r\n        })\r\n      )\r\n      .subscribe((response: any) => {\r\n        this.createPaymentMethodsObjects(response as Array<PaymentMethod>);\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.restaurantSubscription.unsubscribe();\r\n    this.paymentMethodsSubscription.unsubscribe();\r\n  }\r\n\r\n  onPaymentMethodCheck(paymentMethod: IPaymentMethod): void {\r\n    paymentMethod.active = !paymentMethod.active;\r\n\r\n    let currentSelectedPaymentMethods = this.paymentMethodsForm.get(\r\n      'paymentMethods'\r\n    ).value;\r\n\r\n    currentSelectedPaymentMethods = this.onPaymentMethodSelection(\r\n      paymentMethod,\r\n      currentSelectedPaymentMethods\r\n    );\r\n\r\n    this.paymentMethodsForm.patchValue({\r\n      paymentMethods: currentSelectedPaymentMethods\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    const paymentMethodsPayload = new RestuarantPaymentMethodPayload(\r\n      this.paymentMethodsForm\r\n    );\r\n\r\n    this.paymentMethodsSubscription = this.restaurantService\r\n      .setRestaurantAmenities(paymentMethodsPayload.toJson(), this.restaurantId)\r\n      .subscribe(() => this.openSnackBar('Cambios guardados', 'Entendido'));\r\n  }\r\n\r\n  private createPaymentMethodsObjects(\r\n    paymentMethods: Array<PaymentMethod>\r\n  ): void {\r\n    const paymentMethodsOptions = paymentMethods;\r\n\r\n    paymentMethodsOptions.forEach(pPaymentMethod => {\r\n      const paymentMethodObject = {\r\n        name: pPaymentMethod.name,\r\n        id: pPaymentMethod.id,\r\n        active: false\r\n      };\r\n\r\n      const isActive = this.currentPaymentMethods.find(\r\n        id => id === pPaymentMethod.id\r\n      );\r\n\r\n      if (isActive) {\r\n        paymentMethodObject.active = true;\r\n      }\r\n\r\n      this.paymentMethods.push(paymentMethodObject);\r\n    });\r\n  }\r\n\r\n  private getPaymentMethods(): Observable<Array<PaymentMethod>> {\r\n    return this.restaurantService.getAmenities().pipe(\r\n      map((response: Amenities) => {\r\n        const paymentMethods: Array<PaymentMethod> = response.payment_methods.map(\r\n          (pPaymentMethod: IPaymentMethod) => {\r\n            return new PaymentMethod(pPaymentMethod);\r\n          }\r\n        );\r\n\r\n        return paymentMethods;\r\n      })\r\n    );\r\n  }\r\n\r\n  private getRestaurantDetails(id: number): Observable<ResponseDetail> {\r\n    return this.restaurantService.getRestaurantDetail(id);\r\n  }\r\n\r\n  private onPaymentMethodSelection(\r\n    paymentMethod: IPaymentMethod,\r\n    currentPaymentMethods: Array<number>\r\n  ): Array<number> {\r\n    const isPaymentMethodSelected = currentPaymentMethods.includes(\r\n      paymentMethod.id\r\n    );\r\n\r\n    if (isPaymentMethodSelected) {\r\n      const index = currentPaymentMethods.indexOf(paymentMethod.id);\r\n\r\n      currentPaymentMethods.splice(index, 1);\r\n    } else {\r\n      currentPaymentMethods.push(paymentMethod.id);\r\n    }\r\n\r\n    return currentPaymentMethods;\r\n  }\r\n\r\n  private openSnackBar(message: string, action: string) {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000\r\n    });\r\n  }\r\n}\r\n","<form\r\n  [formGroup]=\"paymentMethodsForm\"\r\n  (ngSubmit)=\"onSubmit()\" \r\n  class=\"dark\"\r\n  novalidate\r\n>\r\n  <div>\r\n    <mat-checkbox\r\n      *ngFor=\"let paymentMethod of paymentMethods\"\r\n      (change)=\"onPaymentMethodCheck(paymentMethod, $event)\"\r\n      [checked]=\"paymentMethod.active\"\r\n      >{{ paymentMethod.name }}</mat-checkbox\r\n    >\r\n  </div>\r\n  <button class=\"btns\" type=\"submit\">\r\n    <span>Guardar</span>\r\n  </button>\r\n</form>","import { NgModule } from '@angular/core';\r\nimport { PaymentMethodsComponent } from './payment-methods.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PaymentMethodsComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PaymentMethodsRoutingModule { }\r\n"]}