{"version":3,"sources":["webpack:///src/app/shared/payloads/amenities.payload.ts","webpack:///src/app/shared/payloads/franchise.payload.ts","webpack:///src/app/shared/payloads/restaurant.payload.ts","webpack:///src/app/shared/payloads/restaurant-app-data.payload.ts","webpack:///src/app/shared/payloads/restaurant-detail.payload.ts","webpack:///src/app/shared/payloads/restaurant-extra.payload.ts","webpack:///src/app/shared/payloads/restaurant-parking.payload.ts","webpack:///src/app/shared/payloads/restaurant-images.payload.ts","webpack:///src/app/shared/payloads/restaurant-payment-method.payload.ts","webpack:///src/app/shared/payloads/restaurant-working-hours.payload.ts","webpack:///src/app/shared/payloads/restaurant-reservation-zone.payload.ts","webpack:///src/app/shared/payloads/restaurant-service-type.payload.ts","webpack:///src/app/shared/payloads/index.ts","webpack:///src/app/pages/layout/preferences/images/images.module.ts","webpack:///src/app/pages/layout/preferences/images/images.component.ts","webpack:///src/app/pages/layout/preferences/images/images.component.html","webpack:///src/app/pages/layout/preferences/images/images-routing.module.ts","webpack:///node_modules/@angular/material/fesm2015/card.js","webpack:///node_modules/@angular/material/card/index.d.ts.MatCard.html"],"names":["AmenitiesPayload","pTypes","pZones","pExtras","pParkings","pPpaymentMethods","this","types","zones","extras","parkings","paymentMethods","getExtras","payment_methods","map","extra","id","active","name","BusinessPayload","pBusinessForm","businessForm","form","value","price_range","style","RestaurantPayload","pNewRestaurantForm","newRestaurantForm","avoidManagerUpdate","restaurantInfo","get","description","coordinates","concatCoordinates","address","phone","getPhone","email","invoice_email","invoice_url","manager","billingOption","emailBilling","websiteBilling","coordinatesArray","push","parseFloat","RestaurantAppDataPayload","pAppDataForm","appDataForm","max_offered_seats","max_people_per_order","max_cancel_limit_minutes","getTotalMinutes","reservation_time_minutes","RestaurantDetailPayload","pRestaurantDetailForm","restaurantDetailForm","getCoordinatesArray","address_extra","getParsedPhone","trim","RestuarantExtraPayload","pExtrasForm","extrasForm","getRawValue","RestuarantParkingPayload","pParkingForm","parkingForm","RestaurantImagesPayload","pImagesForm","imagesForm","galleryData","FormData","append","galleryImages","controls","forEach","control","i","RestuarantPaymentMethodPayload","pPaymentMethodsForm","paymentMethodsForm","RestaurantWorkingHoursPayload","pWorkingHoursForm","workingHoursForm","working_hours","getFixedHours","getMixedHours","currentWeekdays","activeDays","weekday","index","weekdayObject","week_day","opens_at","closes_at","hours","Object","keys","fixedHours","weekdays","day","object","parseInt","RestuarantReservationZonePayload","pReservationZonesFOrm","reservationZonesForm","RestuarantServiceTypePayload","pServiceTypeForm","serviceTypeForm","ImagesModule","fb","snackBar","restaurantService","group","coverImage","required","imageLink","pattern","array","galleryImageInput","restaurantId","localStorage","getItem","acceptedFileTypes","gallerySubscription","Subscription","EMPTY","restaurantSubscription","galleryImageSubscription","getRestaurantImages","unsubscribe","imageIndex","clickedImage","galleryImagesAsFormArray","onImageRemove","removeAt","enable","galleryToSave","setRestaurantGallery","toFormData","subscribe","response","length","e","controlName","file","dataTransfer","files","target","fileSize","size","includes","type","open","duration","setValue","reader","FileReader","onload","eImage","img","Image","coverImageUrl","src","addGalleryImage","fileValue","position","disable","result","readAsDataURL","galleryImage","createGalleryImage","getRestaurantDetail","getRestaurantDetails","restaurant","cover","url","patchValue","matterport","patchGalleryImageControls","gallery","removeRestaurantGalleryImage","galImg","imageAux","ImagesRoutingModule","MatCardContent","MatCard","_animationMode","MatCardHeader","MatCardTitleGroup","MatCardModule"],"mappings":"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","file":"x","sourcesContent":["import { AmenitiesToSave } from '@models';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class AmenitiesPayload {\r\n  types?: Array<number>;\r\n  zones?: Array<number>;\r\n  extras?: Array<IExtra>;\r\n  parkings?: Array<number>;\r\n  paymentMethods?: Array<number>;\r\n\r\n  constructor(\r\n    pTypes: Array<number>,\r\n    pZones: Array<number>,\r\n    pExtras: Array<IExtra>,\r\n    pParkings: Array<number>,\r\n    pPpaymentMethods: Array<number>\r\n  ) {\r\n    this.types = pTypes;\r\n    this.zones = pZones;\r\n    this.extras = pExtras;\r\n    this.parkings = pParkings;\r\n    this.paymentMethods = pPpaymentMethods;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.types,\r\n      zones: this.zones,\r\n      extras: this.getExtras(),\r\n      parkings: this.parkings,\r\n      payment_methods: this.paymentMethods\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extras.map((extra: IExtra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { IFranchise } from '@interfaces';\r\nimport { Franchise } from '@models';\r\n\r\nexport class BusinessPayload {\r\n  businessForm: FormGroup;\r\n\r\n  constructor(pBusinessForm: FormGroup) {\r\n    this.businessForm = pBusinessForm;\r\n  }\r\n\r\n  toJson(): Franchise {\r\n    const form = this.businessForm.value;\r\n\r\n    const body: IFranchise = {\r\n      id: form.id || null,\r\n      name: form.name || null,\r\n      price_range: form.price_range,\r\n      style: form.style,\r\n    };\r\n\r\n    return body;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { Restaurant } from '@models';\r\n\r\nexport class RestaurantPayload {\r\n  newRestaurantForm: FormGroup;\r\n\r\n  constructor(pNewRestaurantForm: FormGroup) {\r\n    this.newRestaurantForm = pNewRestaurantForm;\r\n  }\r\n\r\n  public toJson(avoidManagerUpdate?: boolean): Restaurant {\r\n    const form = this.newRestaurantForm;\r\n\r\n    const restaurantInfo = {\r\n      name: form.get('name').value,\r\n      description: form.get('description').value,\r\n      coordinates: this.concatCoordinates(),\r\n      address: form.get('address').value,\r\n      phone: this.getPhone(),\r\n      email: form.get('email').value,\r\n      invoice_email: '',\r\n      invoice_url: '',\r\n      manager:\r\n        (form.get('manager').value || form.get('manager').value === 0) &&\r\n        !avoidManagerUpdate\r\n          ? form.get('manager').value\r\n          : undefined,\r\n    };\r\n\r\n    if (form.value.billingOption === '0') {\r\n      restaurantInfo.invoice_email = form.value.emailBilling;\r\n      delete restaurantInfo.invoice_url;\r\n    } else {\r\n      restaurantInfo.invoice_url = form.value.websiteBilling;\r\n      delete restaurantInfo.invoice_email;\r\n    }\r\n\r\n    return restaurantInfo as Restaurant;\r\n  }\r\n\r\n  private getPhone(): string {\r\n    return `+${this.newRestaurantForm.get('dialCode').value}${\r\n      this.newRestaurantForm.get('phone').value\r\n    }`;\r\n  }\r\n\r\n  private concatCoordinates(): Array<number> {\r\n    const coordinatesArray: Array<number> = [];\r\n\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('latitude').value)\r\n    );\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('longitude').value)\r\n    );\r\n\r\n    return coordinatesArray;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nexport class RestaurantAppDataPayload {\r\n  appDataForm: FormGroup;\r\n\r\n  constructor(pAppDataForm: FormGroup) {\r\n    this.appDataForm = pAppDataForm;\r\n  }\r\n\r\n  toJson() {\r\n    return {\r\n      max_offered_seats: this.appDataForm.get('max_offered_seats').value,\r\n      max_people_per_order: this.appDataForm.get('max_people_per_order').value,\r\n      max_cancel_limit_minutes: this.getTotalMinutes(),\r\n      reservation_time_minutes: this.appDataForm.get('reservation_time_minutes').value,\r\n    };\r\n  }\r\n\r\n  private getTotalMinutes(): number {\r\n    const hoursToMinutes = this.appDataForm.get('max_cancel_limit_hours').value * 60;\r\n    const totalMinutes = +hoursToMinutes + +this.appDataForm.get('max_cancel_limit_minutes').value;\r\n\r\n    return totalMinutes;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { NewBranch } from '@models';\r\n\r\nexport class RestaurantDetailPayload {\r\n  restaurantDetailForm: FormGroup;\r\n\r\n  constructor(pRestaurantDetailForm: FormGroup) {\r\n    this.restaurantDetailForm = pRestaurantDetailForm;\r\n  }\r\n\r\n  toJson(): NewBranch {\r\n    return {\r\n      name: this.restaurantDetailForm.get('name').value,\r\n      description: this.restaurantDetailForm.get('description').value,\r\n      coordinates: this.getCoordinatesArray(),\r\n      address: this.restaurantDetailForm.get('address').value,\r\n      address_extra: this.restaurantDetailForm.get('address_extra').value,\r\n      phone: this.getParsedPhone(),\r\n      email: this.restaurantDetailForm.get('email').value\r\n    };\r\n  }\r\n\r\n  private getCoordinatesArray(): Array<number> {\r\n    const coordArray = [\r\n      parseFloat(this.restaurantDetailForm.get('lat').value),\r\n      parseFloat(this.restaurantDetailForm.get('long').value)\r\n    ];\r\n\r\n    return coordArray;\r\n  }\r\n\r\n  private getParsedPhone(): string {\r\n    const form = this.restaurantDetailForm;\r\n    const concatPhone = `+${form.get('countryCode').value} ${form\r\n      .get('phone')\r\n      .value.trim()}`;\r\n\r\n    return concatPhone;\r\n  }\r\n}\r\n","import { Extra, AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class RestuarantExtraPayload {\r\n  extrasForm: FormGroup;\r\n\r\n  constructor(pExtrasForm: FormGroup) {\r\n    this.extrasForm = pExtrasForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      extras: this.getExtras()\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extrasForm.getRawValue().extras.map((extra: Extra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nexport class RestuarantParkingPayload {\r\n  parkingForm: FormGroup;\r\n\r\n  constructor(pParkingForm: FormGroup) {\r\n    this.parkingForm = pParkingForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      parkings: this.parkingForm.get('parking').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantImagesPayload {\r\n  private imagesForm: FormGroup;\r\n\r\n  constructor(pImagesForm: FormGroup) {\r\n    this.imagesForm = pImagesForm;\r\n  }\r\n\r\n  public toFormData(): FormData {\r\n    const galleryData = new FormData();\r\n\r\n    galleryData.append('cover', this.imagesForm.get('coverImage').value);\r\n\r\n    const galleryImages = this.imagesForm.get('galleryImages') as FormArray;\r\n\r\n    galleryImages.controls.forEach((control, i) => {\r\n      if (!control.get('id')) {\r\n        galleryData.append(\r\n          'gallery[' + i + ']',\r\n          galleryImages.controls[i].get('fileValue').value\r\n        );\r\n      }\r\n    });\r\n\r\n    if (this.imagesForm.get('imageLink').value) {\r\n      galleryData.append('matterport', this.imagesForm.get('imageLink').value);\r\n    }\r\n    return galleryData;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantPaymentMethodPayload {\r\n  paymentMethodsForm: FormGroup;\r\n\r\n  constructor(pPaymentMethodsForm: FormGroup) {\r\n    this.paymentMethodsForm = pPaymentMethodsForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      payment_methods: this.paymentMethodsForm.get('paymentMethods').value || []\r\n    };\r\n  }\r\n}\r\n","import { IWorkingHour } from '@interfaces';\r\nimport { WorkingHoursResponse } from '@models';\r\nimport { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantWorkingHoursPayload {\r\n  private workingHoursForm: FormGroup;\r\n\r\n  constructor(pWorkingHoursForm: FormGroup) {\r\n    this.workingHoursForm = pWorkingHoursForm;\r\n  }\r\n\r\n  public fixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getFixedHours() };\r\n  }\r\n\r\n  public mixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getMixedHours() };\r\n  }\r\n\r\n  private getMixedHours() {\r\n    const currentWeekdays = this.workingHoursForm.get(\r\n      'mixedHours'\r\n    ) as FormArray;\r\n    const activeDays: Array<IWorkingHour> = [];\r\n\r\n    currentWeekdays.controls.forEach((weekday, index) => {\r\n      if (weekday.get('isSelected').value === true) {\r\n        const weekdayObject = {\r\n          week_day: index + 1,\r\n          opens_at: weekday.get('opening').value,\r\n          closes_at: weekday.get('closing').value\r\n        };\r\n\r\n        activeDays.push(weekdayObject);\r\n      }\r\n    });\r\n\r\n    return activeDays;\r\n  }\r\n\r\n  private getFixedHours(): Array<IWorkingHour> {\r\n    const hours: Array<IWorkingHour> = [];\r\n\r\n    Object.keys(this.workingHoursForm.value.fixedHours.weekdays).forEach(\r\n      day => {\r\n        const fixedHours = this.workingHoursForm.get('fixedHours');\r\n        if (fixedHours.get('weekdays').get(day).value) {\r\n          const object = {\r\n            week_day: parseInt(day, 10),\r\n            opens_at: fixedHours.get('opening').value,\r\n            closes_at: fixedHours.get('closing').value\r\n          };\r\n\r\n          hours.push(object);\r\n        }\r\n      }\r\n    );\r\n\r\n    return hours;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantReservationZonePayload {\r\n  reservationZonesForm: FormGroup;\r\n\r\n  constructor(pReservationZonesFOrm: FormGroup) {\r\n    this.reservationZonesForm = pReservationZonesFOrm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      zones: this.reservationZonesForm.get('zones').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantServiceTypePayload {\r\n  serviceTypeForm: FormGroup;\r\n\r\n  constructor(pServiceTypeForm: FormGroup) {\r\n    this.serviceTypeForm = pServiceTypeForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.serviceTypeForm.get('type').value || []\r\n    };\r\n  }\r\n}\r\n","export * from './amenities.payload';\r\nexport * from './franchise.payload';\r\nexport * from './restaurant.payload';\r\nexport * from './restaurant-app-data.payload';\r\nexport * from './restaurant-detail.payload';\r\nexport * from './restaurant-extra.payload';\r\nexport * from './restaurant-parking.payload';\r\nexport * from './restaurant-images.payload';\r\nexport * from './restaurant-payment-method.payload';\r\nexport * from './restaurant-working-hours.payload';\r\nexport * from './restaurant-reservation-zone.payload';\r\nexport * from './restaurant-service-type.payload';\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ImagesComponent } from './images.component';\r\nimport { ImagesRoutingModule } from './images-routing.module';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { SortablejsModule } from 'ngx-sortablejs';\r\n\r\n@NgModule({\r\n  declarations: [ImagesComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ImagesRoutingModule,\r\n    MatCardModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    SortablejsModule.forRoot({ animation: 150 }),\r\n  ],\r\n})\r\nexport class ImagesModule {}\r\n","import { IGalleryImage } from '@interfaces';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { RegexUrl } from '@constants';\r\nimport { RestaurantImagesPayload } from '@payloads';\r\nimport { RestaurantService } from '@services';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n  FormControl,\r\n  FormBuilder,\r\n  Validators,\r\n  FormArray,\r\n  FormGroup,\r\n} from '@angular/forms';\r\nimport { GalleryImage, ResponseDetail } from '@models';\r\n\r\n@Component({\r\n  selector: 'app-images',\r\n  templateUrl: './images.component.html',\r\n  styleUrls: ['./images.component.scss'],\r\n})\r\nexport class ImagesComponent implements OnInit, OnDestroy {\r\n  public imagesForm = this.fb.group({\r\n    coverImage: new FormControl(null, Validators.required),\r\n    imageLink: new FormControl('', Validators.pattern(RegexUrl)),\r\n    galleryImages: this.fb.array([]),\r\n    galleryImageInput: new FormControl(),\r\n  });\r\n  public coverImageUrl: string;\r\n  public galleryImages: FormArray;\r\n  private restaurantId: number = parseInt(\r\n    localStorage.getItem('restaurantId'),\r\n    10\r\n  );\r\n  private acceptedFileTypes = ['image/jpeg', 'image/png', 'image/jpg'];\r\n  private gallerySubscription = Subscription.EMPTY;\r\n  private restaurantSubscription = Subscription.EMPTY;\r\n  private galleryImageSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private snackBar: MatSnackBar,\r\n    private restaurantService: RestaurantService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.getRestaurantImages();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.gallerySubscription.unsubscribe();\r\n    this.restaurantSubscription.unsubscribe();\r\n    this.galleryImageSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * @returns Existing gallery images FormArray\r\n   */\r\n  public get galleryImagesAsFormArray(): FormArray {\r\n    return this.imagesForm.get('galleryImages') as FormArray;\r\n  }\r\n\r\n  /**\r\n   *  Checks if image is saved already and removes unsaved images from FormArray\r\n   *  or deleted saved images on database\r\n   *\r\n   * @param imageIndex The image index FormArray\r\n   */\r\n  public removeGalleryImage(imageIndex: number): void {\r\n    const clickedImage = this.galleryImagesAsFormArray.controls[imageIndex];\r\n\r\n    if (clickedImage.get('id')) {\r\n      this.onImageRemove(clickedImage.get('id').value);\r\n    } else {\r\n      this.galleryImagesAsFormArray.removeAt(imageIndex);\r\n      this.imagesForm.get('galleryImageInput').enable();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Saves changes. Saves matterport URL and new images only as FormData\r\n   */\r\n  public onSubmit(): void {\r\n    const galleryToSave = new RestaurantImagesPayload(this.imagesForm);\r\n\r\n    this.gallerySubscription = this.restaurantService\r\n      .setRestaurantGallery(galleryToSave.toFormData(), this.restaurantId)\r\n      .subscribe((response) => {\r\n        while (this.galleryImagesAsFormArray.length > 0) {\r\n          this.galleryImagesAsFormArray.removeAt(0);\r\n        }\r\n        this.getRestaurantImages();\r\n      });\r\n  }\r\n\r\n  /**\r\n   *  Checks if image is saved already and removes unsaved images from FormArray\r\n   *  or deleted saved images on database\r\n   *\r\n   * @param e File Input change event\r\n   * @param controlName Indicates FormControl name to change\r\n   */\r\n  public setImageValueToGallery(e: DragEvent, controlName: string): void {\r\n    const file = e.dataTransfer\r\n      ? e.dataTransfer.files[0]\r\n      : (e.target as HTMLInputElement).files[0];\r\n    const fileSize = file.size;\r\n    const fileType = file.type;\r\n\r\n    if (!this.acceptedFileTypes.includes(fileType)) {\r\n      this.snackBar.open('El formato no es válido', 'Entendido', {\r\n        duration: 15000,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (fileSize > 1048576) {\r\n      this.snackBar.open('La imagen excede 1MB', 'Entendido', {\r\n        duration: 15000,\r\n      });\r\n      this.imagesForm.get('galleryImageInput').setValue(null);\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (eImage: any) => {\r\n      const img = new Image();\r\n\r\n      img.onload = () => {\r\n        if (controlName === 'coverImage') {\r\n          this.imagesForm.get(controlName).setValue(file);\r\n          this.coverImageUrl = img.src;\r\n        } else if (controlName === 'gallery') {\r\n          if (this.galleryImagesAsFormArray.length < 10) {\r\n            const imageAux: GalleryImage = {\r\n              src: img.src,\r\n              fileValue: file,\r\n              position: this.galleryImagesAsFormArray.length + 1,\r\n              id: null,\r\n            };\r\n\r\n            this.addGalleryImage(imageAux);\r\n            if (this.galleryImagesAsFormArray.length === 10) {\r\n              this.imagesForm.get('galleryImageInput').disable();\r\n            }\r\n          } else {\r\n            this.snackBar.open(\r\n              'Has alcanzado el limite de 10 imágenes',\r\n              'Entendido',\r\n              {\r\n                duration: 15000,\r\n              }\r\n            );\r\n          }\r\n          this.imagesForm.get('galleryImageInput').setValue(null);\r\n        }\r\n      };\r\n      img.src = eImage.target.result;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  /**\r\n   *  Adds an image to gallery images FormArray\r\n   *\r\n   * @param galleryImage GalleryImage object\r\n   */\r\n  private addGalleryImage(galleryImage: GalleryImage): void {\r\n    this.galleryImagesAsFormArray.push(this.createGalleryImage(galleryImage));\r\n  }\r\n\r\n  /**\r\n   *  Creates a FormGroup object to add the the gallery\r\n   *  images FormArray\r\n   *\r\n   * @param galleryImage GalleryImage object\r\n   * @returns FormControl object\r\n   */\r\n  private createGalleryImage(galleryImage: GalleryImage): FormGroup {\r\n    return this.fb.group({\r\n      fileValue: [galleryImage.fileValue, []],\r\n      src: [galleryImage.src, []],\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Makes an HTTP GET request for Restaurant details including\r\n   *  images URL's\r\n   *\r\n   * @param id Restaurant ID\r\n   * @returns Response detail observable\r\n   *  inlcluding images\r\n   */\r\n  private getRestaurantDetails(id: number): Observable<ResponseDetail> {\r\n    return this.restaurantService.getRestaurantDetail(id);\r\n  }\r\n\r\n  /**\r\n   *  Subscribes to Restaurant details observable, sets and patches images URL's\r\n   */\r\n  private getRestaurantImages(): void {\r\n    this.restaurantSubscription = this.getRestaurantDetails(\r\n      this.restaurantId\r\n    ).subscribe((response: ResponseDetail) => {\r\n      this.coverImageUrl = response.restaurant.cover.url;\r\n      this.imagesForm.patchValue({\r\n        imageLink: response.restaurant.matterport,\r\n      });\r\n      this.patchGalleryImageControls(response.restaurant.gallery);\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Makes an HTTP DELETE request to remove an image saved in the database\r\n   *\r\n   * @param id The ID of the image to remove\r\n   */\r\n  private onImageRemove(id: number): void {\r\n    this.galleryImageSubscription = this.restaurantService\r\n      .removeRestaurantGalleryImage(this.restaurantId, id)\r\n      .subscribe(() => {\r\n        while (this.galleryImagesAsFormArray.length > 0) {\r\n          this.galleryImagesAsFormArray.removeAt(0);\r\n        }\r\n        this.getRestaurantImages();\r\n      });\r\n  }\r\n\r\n  /**\r\n   *  Patches gallery images FormControls with existing image URLS\r\n   *\r\n   * @param galleryImages Array of gallery image\r\n   * objects coming from the server\r\n   */\r\n  private patchGalleryImageControls(galleryImages: Array<IGalleryImage>): void {\r\n    galleryImages.forEach((galImg) => {\r\n      const imageAux = this.fb.group({\r\n        src: galImg.url,\r\n        fileValue: null,\r\n        id: galImg.id,\r\n      });\r\n\r\n      this.galleryImagesAsFormArray.push(imageAux);\r\n    });\r\n  }\r\n}\r\n","<mat-card>\r\n  <div class=\"container\">\r\n    <form\r\n      id=\"imagesForm\"\r\n      [formGroup]=\"imagesForm\"\r\n      (ngSubmit)=\"onSubmit()\"\r\n      novalidate\r\n    >\r\n      <p class=\"nm\">Imagen de portada de sucursal</p>\r\n      <p class=\"clr-gray\">Esta será la primera imagen que verán tus clientes</p>\r\n      <div class=\"new-image\">\r\n        <div class=\"new-image-containt\">\r\n          <div class=\"preview\">\r\n            <div\r\n              class=\"backImg full cnt\"\r\n              *ngIf=\"coverImageUrl\"\r\n              [ngStyle]=\"{ backgroundImage: 'url(' + coverImageUrl + ')' }\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"onboarding-file\">\r\n            <div class=\"file-button\">\r\n              <input\r\n                type=\"file\"\r\n                (change)=\"setImageValueToGallery($event, 'coverImage')\"\r\n                accept=\".png, .jpeg\"\r\n              />\r\n              <p class=\"title\">Subir foto</p>\r\n            </div>\r\n            <small class=\"clr-nm\"\r\n              >JPG, PNG <br />\r\n              Dimensiones 600 x 400px Peso máximo 1 MB</small\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <p class=\"nm\">Galería de imágenes</p>\r\n      <p class=\"clr-gray\">\r\n        Tus clientes podrán ver más sobre tu negocio y los platillos que ofreces\r\n        (hasta 10 imágenes)\r\n      </p>\r\n      <div class=\"new-image gallery\">\r\n        <div class=\"new-image-containt\">\r\n          <div\r\n            class=\"preview-img\"\r\n            [sortablejs]=\"galleryImagesAsFormArray.controls\"\r\n          >\r\n            <div\r\n              class=\"preview\"\r\n              *ngFor=\"\r\n                let galleryImage of galleryImagesAsFormArray.controls;\r\n                let i = index\r\n              \"\r\n            >\r\n              <div\r\n                class=\"backImg full cnt\"\r\n                [ngStyle]=\"{\r\n                  backgroundImage: 'url(' + galleryImage.get('src').value + ')'\r\n                }\"\r\n              >\r\n                <div class=\"background-shadow\">\r\n                  <img\r\n                    src=\"/assets/images/icons/btn-delete.svg\"\r\n                    (click)=\"removeGalleryImage(i)\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div\r\n              class=\"preview\"\r\n              *ngIf=\"galleryImagesAsFormArray.controls.length === 0\"\r\n            ></div>\r\n          </div>\r\n          <div class=\"onboarding-file\">\r\n            <div class=\"file-button\">\r\n              <input\r\n                type=\"file\"\r\n                (change)=\"setImageValueToGallery($event, 'gallery')\"\r\n                accept=\".png, .jpeg\"\r\n                placeholder=\"Subir archivo\"\r\n                formControlName=\"galleryImageInput\"\r\n              />\r\n              <p class=\"title\">Agregar foto</p>\r\n            </div>\r\n            <small class=\"clr-nm\"\r\n              >JPG, PNG <br />\r\n              Dimensiones 600 x 400px Peso máximo 1 MB</small\r\n            >\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <p class=\"nm\">Imagen 360º</p>\r\n      <p class=\"clr-gray\">Ingresa el link para tu imagen 360º</p>\r\n      <mat-form-field>\r\n        <mat-label>Enlace</mat-label>\r\n        <input matInput formControlName=\"imageLink\" name=\"imageLink\" />\r\n        <mat-error>El formato es incorrecto</mat-error>\r\n      </mat-form-field>\r\n      <div class=\"inl column buttons\">\r\n        <div class=\"inl controls\">\r\n          <button class=\"btns\" mat-button type=\"submit\">\r\n            <span>Guardar</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</mat-card>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ImagesComponent } from './images.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ImagesComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ImagesRoutingModule {}\r\n","import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardContent {\n}\nMatCardContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            },] }\n];\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            },] }\n];\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            },] }\n];\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /**\n         * Position of the actions inside the card.\n         */\n        this.align = 'start';\n    }\n}\nMatCardActions.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n                }\n            },] }\n];\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Position of the actions inside the card.\n     * @type {?}\n     */\n    MatCardActions.prototype.align;\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            },] }\n];\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            },] }\n];\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            },] }\n];\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MatCard.prototype._animationMode;\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }] }\n];\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatCardModule {\n}\nMatCardModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n//# sourceMappingURL=card.js.map\n","<ng-content></ng-content>\n<ng-content select=\"mat-card-footer\"></ng-content>\n"]}