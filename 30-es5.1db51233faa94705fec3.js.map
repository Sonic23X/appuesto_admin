{"version":3,"sources":["webpack:///src/app/pages/layout/users/users.module.ts","webpack:///src/app/pages/layout/users/user-crud/user-crud.component.ts","webpack:///src/app/pages/layout/users/user-crud/user-crud.component.html","webpack:///src/app/pages/layout/users/users.component.ts","webpack:///src/app/pages/layout/users/users.component.html","webpack:///src/app/pages/layout/users/users-routing.module.ts","webpack:///node_modules/@angular/material/fesm2015/card.js","webpack:///node_modules/@angular/material/card/index.d.ts.MatCard.html"],"names":["UsersModule","fB","dialogRef","dialogData","usersService","restaurantService","franchiseService","snackBar","roles","name","value","MANAGER","STAFF","form","this","group","role","required","minLength","maxLength","lastName","email","validators","pattern","updateOn","picture","currentRestaurantSubscription","Subscription","EMPTY","currentFranchiseSubscription","createUserSubscription","editUserSubscription","userHasBeenUpdated","setFormMode","getRestaurantInfo","getFranchiseInfo","unsubscribe","setRoleValue","user","reset","patchValue","last_name","imgPreviewSrc","get","disable","setValue","hasTheUserListToBeReloaded","close","valid","isUserBeingEdited","editUser","userRole","createStaff","createManager","userDataToEdit","getUserToCreate","updateStaff","id","subscribe","open","duration","emit","staffToCreate","restauranteSelected","flowAfterUserHasBeenCreated","managerToCreate","franchiseSelected","FormData","append","closeModal","currentRestaurant","restaurant","currentFranchise","franchise","file","size","fileType","type","reader","FileReader","onload","eImage","img","Image","src","target","result","readAsDataURL","dialog","users","afterModalClosesSubscription","getUsersSubscription","deleteUserSubscription","getUsers","userToSetAsSelectedId","response","length","setSelectedUser","userId","selectedUser","find","roleToCreate","userCRUDDialog","width","data","afterClosed","deleteUser","UsersRoutingModule","MatCardContent","MatCard","_animationMode","MatCardHeader","MatCardTitleGroup","MatCardModule"],"mappings":"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","file":"x","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UsersRoutingModule } from './users-routing.module';\r\nimport { UsersComponent } from './users.component';\r\nimport { SectionHeaderModule } from '@components/section-header/section-header.module';\r\nimport { UserCRUDComponent } from './user-crud/user-crud.component';\r\nimport {\r\n  MatDialogModule,\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA,\r\n} from '@angular/material/dialog';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { UserRoleModule } from '@pipes/user-role/user-role.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    UsersRoutingModule,\r\n    SectionHeaderModule,\r\n    MatDialogModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatCardModule,\r\n    UserRoleModule,\r\n  ],\r\n  declarations: [UsersComponent, UserCRUDComponent],\r\n  entryComponents: [UserCRUDComponent],\r\n  providers: [\r\n    {\r\n      provide: MatDialogRef,\r\n      useValue: null,\r\n    },\r\n    {\r\n      provide: MAT_DIALOG_DATA,\r\n      useValue: null,\r\n    },\r\n  ],\r\n})\r\nexport class UsersModule {}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Inject,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { RegexEmail, UserRoles } from '@constants';\r\nimport { UsersService } from '@services';\r\nimport { RestaurantService, FranchiseService } from '@services';\r\nimport { Subscription } from 'rxjs';\r\nimport { Restaurant, Franchise, User } from '@models';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-user-crud',\r\n  templateUrl: './user-crud.component.html',\r\n  styleUrls: ['./user-crud.component.scss']\r\n})\r\nexport class UserCRUDComponent implements OnInit, OnChanges, OnDestroy {\r\n  /**\r\n   * Options for the role select.\r\n   * The value of the option hast to be defined at the UserRoles enum.\r\n   */\r\n  public roles: Array<Role> = [\r\n    { name: 'Gerente', value: UserRoles.MANAGER },\r\n    { name: 'Staff', value: UserRoles.STAFF }\r\n  ];\r\n\r\n  /**\r\n   * The form that manage the fields behaviour.\r\n   * The email field is set up to validate on blur so the regular expression doesn't break the platform so easily\r\n   */\r\n  public form: FormGroup = this.fB.group({\r\n    role: ['', [Validators.required]],\r\n    name: [\r\n      '',\r\n      [Validators.required, Validators.minLength(3), Validators.maxLength(100)]\r\n    ],\r\n    lastName: [\r\n      '',\r\n      [Validators.required, Validators.minLength(3), Validators.maxLength(100)]\r\n    ],\r\n    email: [\r\n      '',\r\n      {\r\n        validators: [Validators.required, Validators.pattern(RegexEmail)],\r\n        updateOn: 'blur'\r\n      }\r\n    ],\r\n    picture: null\r\n  });\r\n\r\n  public imgPreviewSrc: string;\r\n\r\n  /**\r\n   * Variable used to storage the subscription that give us the actual restaurant data.\r\n   * We save that subscription so that later we can unsubscribe it.\r\n   */\r\n  private currentRestaurantSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable where we storage the selected restaurant data.\r\n   */\r\n  public restauranteSelected: Restaurant;\r\n\r\n  /**\r\n   * Variable used to storage the subscription that give us the actual franchise data.\r\n   * We save that subscription so that later we can unsubscribe it.\r\n   */\r\n  private currentFranchiseSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable where we storage the selected franchise data.\r\n   */\r\n  private franchiseSelected: Franchise;\r\n\r\n  /**\r\n   * Variable used to storage the subscription that tell us that a user has been created.\r\n   * We save that subscription so that later we can unsubscribe it\r\n   */\r\n  private createUserSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable used to store the subscription that tell us that a user has been edited.\r\n   * We save that subscription so that later we can unsubscribe it\r\n   */\r\n  private editUserSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * In case that the form is going to be used to edit the info of a user we receive that info using this input.\r\n   */\r\n  @Input() public user: User;\r\n\r\n  /**\r\n   * We tell the parent element that the user has been edited with this Output,\r\n   * the number we send is the id of the edited user.\r\n   */\r\n  @Output() private userHasBeenUpdated: EventEmitter<number> = new EventEmitter<\r\n    number\r\n  >();\r\n\r\n  constructor(\r\n    private fB: FormBuilder,\r\n    public dialogRef: MatDialogRef<UserCRUDComponent>,\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: { role: UserRoles },\r\n    private usersService: UsersService,\r\n    private restaurantService: RestaurantService,\r\n    private franchiseService: FranchiseService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  /**\r\n   * The first thing that the component does is check what kind of action is the form doing (create or edit a user),\r\n   * then we get the info of the selected restaurant,\r\n   * at the end we get the info of the franchise.\r\n   */\r\n  ngOnInit(): void {\r\n    this.setFormMode();\r\n    this.getRestaurantInfo();\r\n    this.getFranchiseInfo();\r\n  }\r\n\r\n  /**\r\n   * Every time the user changes we check what kind of action is the form doing (create or edit a user),\r\n   * then we get the info of the selected restaurant,\r\n   * at the end we get the info of the franchise.\r\n   */\r\n  ngOnChanges(): void {\r\n    this.setFormMode();\r\n    this.getRestaurantInfo();\r\n    this.getFranchiseInfo();\r\n  }\r\n\r\n  /**\r\n   * When the component is destroyed we unsubscribe all the observables.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.currentRestaurantSubscription.unsubscribe();\r\n    this.currentFranchiseSubscription.unsubscribe();\r\n    this.createUserSubscription.unsubscribe();\r\n    this.editUserSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Function that determinate what action is the form going to do.\r\n   * If the dialogData is diferent of null then it is going to create user,\r\n   * in that case we check if there is a role default option received.\r\n   * If the dialogData is null then it is goint to edit a user,\r\n   * in that case we set the form values with the user data received.\r\n   */\r\n  private setFormMode(): void {\r\n    if (this.dialogData !== null) {\r\n      this.setRoleValue(this.dialogData.role);\r\n    } else {\r\n      if (this.user) {\r\n        this.form.reset();\r\n        this.form.patchValue({\r\n          role: this.user.role,\r\n          name: this.user.name,\r\n          lastName: this.user.last_name,\r\n          email: this.user.email\r\n        });\r\n        this.imgPreviewSrc = this.user.picture;\r\n        this.form.get('role').disable();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function that set the value of the role field.\r\n   * @param value the new value of the role field, it has to be a value declared at the UserRoles enum.\r\n   */\r\n  private setRoleValue(value: UserRoles): void {\r\n    this.form.get('role').setValue(value);\r\n  }\r\n\r\n  /**\r\n   * Function that closes the modal.\r\n   * @param hasTheUserListToBeReloaded boolean that tells to the parent element if it hast to reload the users list.\r\n   */\r\n  public closeModal(hasTheUserListToBeReloaded: boolean): void {\r\n    this.dialogRef.close(hasTheUserListToBeReloaded);\r\n  }\r\n\r\n  /**\r\n   * Function that tries to create a user.\r\n   * It first check that the form is valid,\r\n   * then call the action depending on the user type.\r\n   */\r\n  public userCRUDSubmit(): void {\r\n    if (this.form.valid) {\r\n      if (this.isUserBeingEdited) {\r\n        this.editUser();\r\n      } else {\r\n        const userRole: UserRoles = this.form.get('role').value;\r\n        if (userRole === UserRoles.STAFF) {\r\n          this.createStaff();\r\n        } else if (userRole === UserRoles.MANAGER) {\r\n          this.createManager();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Funtion that takes the form values and edit a user using those values.\r\n   * It takes the received user id to know wich user to edit at the serve\r\n   */\r\n  private editUser(): void {\r\n    const userDataToEdit = this.getUserToCreate();\r\n    this.editUserSubscription = this.usersService\r\n      .updateStaff(this.user.id, userDataToEdit)\r\n      .subscribe(() => {\r\n        this.editUserSubscription.unsubscribe();\r\n        this.snackBar.open('El usuario fue editado exitosamente', 'Entendido', {\r\n          duration: 15000\r\n        });\r\n        this.userHasBeenUpdated.emit(this.user.id);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Function that creates a staff\r\n   * It first get the user data to send to back-end,\r\n   * then send the data,\r\n   * if the petition went successful then call to make the after creation flow.\r\n   */\r\n  private createStaff(): void {\r\n    const staffToCreate = this.getUserToCreate();\r\n    this.createUserSubscription = this.usersService\r\n      .createStaff(this.restauranteSelected.id, staffToCreate)\r\n      .subscribe(() => {\r\n        this.flowAfterUserHasBeenCreated();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Function that creates a manager\r\n   * It first get the user data to send to back-end,\r\n   * then send the data,\r\n   * if the petition went successful then call to make the after creation flow.\r\n   */\r\n  private createManager(): void {\r\n    const managerToCreate = this.getUserToCreate();\r\n    this.createUserSubscription = this.usersService\r\n      .createManager(this.franchiseSelected.id, managerToCreate)\r\n      .subscribe(() => {\r\n        this.flowAfterUserHasBeenCreated();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Funtion that validate the form and if it is valid then return a form data with the user info.\r\n   * If the user to be created is a manager the role is not specificated because it has its special endpoint.\r\n   * @returns in case that the form is valid the function returns a form data with the user info, otherwise it returns null.\r\n   */\r\n  private getUserToCreate(): FormData {\r\n    if (this.form.valid) {\r\n      const user = new FormData();\r\n      user.append('name', this.form.get('name').value);\r\n      user.append('last_name', this.form.get('lastName').value);\r\n      user.append('email', this.form.get('email').value);\r\n      if (this.form.get('role').value !== UserRoles.MANAGER) {\r\n        user.append('role', this.form.get('role').value);\r\n      }\r\n      if (this.form.get('picture').value !== null) {\r\n        user.append('picture', this.form.get('picture').value);\r\n      }\r\n      return user;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If the user creation went successful then this function must be called.\r\n   * This funcion unsubscribe the creation petition,\r\n   * then it notifies it to the user,\r\n   * at the end it closes the modal.\r\n   */\r\n  private flowAfterUserHasBeenCreated(): void {\r\n    this.createUserSubscription.unsubscribe();\r\n    this.snackBar.open('El usuario fue creado exitosamente', 'Entendido', {\r\n      duration: 15000\r\n    });\r\n    this.closeModal(true);\r\n  }\r\n\r\n  /**\r\n   * Function that looks for the actual restaurant info and save it at the restauranteSelected global variable.\r\n   * When the info is obtained the observable is unsubscribed.\r\n   */\r\n  private getRestaurantInfo(): void {\r\n    this.currentRestaurantSubscription = this.restaurantService.currentRestaurant.subscribe(\r\n      (restaurant: Restaurant) => {\r\n        if (restaurant) {\r\n          this.currentRestaurantSubscription.unsubscribe();\r\n          this.restauranteSelected = restaurant;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Function that looks for the actual franchise info and save it at the franchiseSelected global variable.\r\n   * When the info is obtained the observable is unsubscribed.\r\n   */\r\n  private getFranchiseInfo(): void {\r\n    this.currentFranchiseSubscription = this.franchiseService.currentFranchise.subscribe(\r\n      (franchise: Franchise) => {\r\n        if (franchise) {\r\n          this.currentFranchiseSubscription.unsubscribe();\r\n          this.franchiseSelected = franchise;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Function of type get that tells if the current user info is for a user being edited.\r\n   * @returns boolean that tells if the form is in edit mode.\r\n   */\r\n  public get isUserBeingEdited(): boolean {\r\n    return !!this.user;\r\n  }\r\n\r\n  /**\r\n   * Function that handle the input file change event to manage the image data.\r\n   * @param file the file loaded\r\n   */\r\n  public setProfileImage(file: File): void {\r\n    const fileSize = file.size / 1024000;\r\n    if (fileSize > 1) {\r\n      this.snackBar.open('La imagen excede 1MB', 'Entendido', {\r\n        duration: 15000\r\n      });\r\n      return;\r\n    }\r\n    const fileType = file.type;\r\n    if (\r\n      fileType !== 'image/png' &&\r\n      fileType !== 'image/jpeg' &&\r\n      fileType !== 'image/jpg'\r\n    ) {\r\n      this.snackBar.open('La imagen es de un tipo incorrecto', 'Entendido', {\r\n        duration: 15000\r\n      });\r\n      return;\r\n    }\r\n    const reader = new FileReader();\r\n    reader.onload = (eImage: any) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        this.form.get('picture').setValue(file);\r\n        this.imgPreviewSrc = img.src;\r\n      };\r\n      img.src = eImage.target.result;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n\r\n  /**\r\n   * Funtion of type get that tells if the user is assigned to the actual restaurant.\r\n   * @returns boolean that indicates if the user is assigned to the restaurant.\r\n   */\r\n  public get isUserAssignedToTheRestaurant(): boolean {\r\n    return (\r\n      this.isUserBeingEdited &&\r\n      this.user &&\r\n      this.user.role === UserRoles.MANAGER\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Class used to define the attributes of the options of the role select.\r\n */\r\nclass Role {\r\n  name: string;\r\n  value: UserRoles;\r\n}\r\n","<section>\r\n  <p *ngIf=\"!isUserBeingEdited\">NUEVO PERFIL</p>\r\n  <mat-icon\r\n    *ngIf=\"!isUserBeingEdited\"\r\n    aria-hidden=\"false\"\r\n    aria-label=\"Cerrar modal\"\r\n    class=\"clr-yellow close\"\r\n    (click)=\"closeModal(false)\"\r\n    >close</mat-icon\r\n  >\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"userCRUDSubmit()\" novalidate>\r\n    <div class=\"new-image\" *ngIf=\"isUserBeingEdited\">\r\n      <div class=\"new-image-containt\">\r\n        <div class=\"preview\">\r\n          <div\r\n            class=\"backImg full cnt\"\r\n            *ngIf=\"imgPreviewSrc\"\r\n            [ngStyle]=\"{ backgroundImage: 'url(' + imgPreviewSrc + ')' }\"\r\n          ></div>\r\n        </div>\r\n        <div class=\"onboarding-file\">\r\n          <div class=\"file-button\">\r\n            <input\r\n              type=\"file\"\r\n              accept=\".png, .jpeg\"\r\n              (change)=\"setProfileImage($event.target.files[0])\"\r\n            />\r\n            <p class=\"title\">Subir foto</p>\r\n          </div>\r\n          <small class=\"clr-nm\"\r\n            >JPG, PNG <br />\r\n            Peso máximo 1 MB</small\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <p *ngIf=\"isUserAssignedToTheRestaurant\" class=\"assigned\">\r\n      {{ user.name + ' está asignado a la sucursal:' }}\r\n      <span>{{ restauranteSelected.name }}</span>\r\n    </p>\r\n    <mat-form-field>\r\n      <mat-label>{{\r\n        isUserBeingEdited ? 'Pefil' : '¿Qué tipo de perfil deseas crear?'\r\n      }}</mat-label>\r\n      <mat-select formControlName=\"role\">\r\n        <mat-option *ngFor=\"let role of roles\" [value]=\"role.value\">{{\r\n          role.name\r\n        }}</mat-option>\r\n      </mat-select>\r\n      <mat-error *ngIf=\"form.get('role').hasError('required')\">\r\n        Esta información es necesaria\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <div class=\"names-container\">\r\n      <mat-form-field>\r\n        <mat-label>Nombre</mat-label>\r\n        <input matInput formControlName=\"name\" maxlength=\"100\" />\r\n        <mat-error *ngIf=\"form.get('name').hasError('required')\">\r\n          Esta información es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"form.get('name').hasError('minlength')\">\r\n          El mínimo de caracteres es de 3 caracteres\r\n        </mat-error>\r\n        <mat-error *ngIf=\"form.get('name').hasError('maxlenght')\">\r\n          El máximo de caracteres es de 100 caracteres\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <mat-label>Apellido</mat-label>\r\n        <input matInput formControlName=\"lastName\" />\r\n        <mat-error *ngIf=\"form.get('lastName').hasError('required')\">\r\n          Esta información es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"form.get('lastName').hasError('minlength')\">\r\n          El mínimo de caracteres es de 3 caracteres\r\n        </mat-error>\r\n        <mat-error *ngIf=\"form.get('lastName').hasError('maxlenght')\">\r\n          El máximo de caracteres es de 100 caracteres\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <mat-form-field>\r\n      <mat-label>Correo</mat-label>\r\n      <input matInput formControlName=\"email\" />\r\n      <mat-error *ngIf=\"form.get('email').hasError('required')\">\r\n        Esta información es necesaria\r\n      </mat-error>\r\n      <mat-error *ngIf=\"form.get('email').hasError('pattern')\">\r\n        El formato correcto deberá ser: ejemplo@ejemplo.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <div class=\"controls\">\r\n      <p *ngIf=\"!isUserBeingEdited\" (click)=\"closeModal(false)\">Cancelar</p>\r\n      <button class=\"btns\" type=\"submit\">\r\n        <span>{{ isUserBeingEdited ? 'Guardar' : 'Crear perfil' }}</span>\r\n      </button>\r\n    </div>\r\n  </form>\r\n</section>\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { UserCRUDComponent } from './user-crud/user-crud.component';\r\nimport { UsersService } from '@services';\r\nimport { RestaurantService } from '@services';\r\nimport { Subscription } from 'rxjs';\r\nimport { Restaurant, User } from '@models';\r\nimport { UserRoles } from '@constants';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss']\r\n})\r\nexport class UsersComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Variable used to store the subscription that give us the current restaurant data.\r\n   * We save that subscription so that later we can unsubscribe it.\r\n   */\r\n  private currentRestaurantSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable where the selected restaurant data is saved.\r\n   */\r\n  private restauranteSelected: Restaurant;\r\n\r\n  /**\r\n   * Array where the list of users is stored.\r\n   */\r\n  public users: Array<User> = [];\r\n\r\n  /**\r\n   * Variable where the selected user is stored,\r\n   * this is the user for which data will be shown in the form\r\n   */\r\n  public selectedUser: User;\r\n\r\n  /**\r\n   * Variable used to store the subscription that tells us when the crud user modal is closed.\r\n   */\r\n  private afterModalClosesSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable used to store the subscription that tells us when users has been obtained from the server.\r\n   */\r\n  private getUsersSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable used to store the subscription that tells us when a user has been deleted from the server.\r\n   */\r\n  private deleteUserSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private usersService: UsersService,\r\n    private restaurantService: RestaurantService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  /**\r\n   * At first we should look for the restaurant info so we can obtain its users.\r\n   */\r\n  ngOnInit(): void {\r\n    this.getRestaurantInfo();\r\n  }\r\n\r\n  /**\r\n   * When the component is destroyed we unsibscribe all the observables.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.currentRestaurantSubscription.unsubscribe();\r\n    this.afterModalClosesSubscription.unsubscribe();\r\n    this.getUsersSubscription.unsubscribe();\r\n    this.deleteUserSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Function that looks for the current restaurant info and save it at the restauranteSelected global variable.\r\n   * After we get the restaurant info we look for its users\r\n   */\r\n  private getRestaurantInfo(): void {\r\n    this.currentRestaurantSubscription = this.restaurantService.currentRestaurant.subscribe(\r\n      (restaurant: Restaurant) => {\r\n        if (restaurant) {\r\n          this.currentRestaurantSubscription.unsubscribe();\r\n          this.restauranteSelected = restaurant;\r\n          this.getUsers();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Funtion that check for the selected restaurant's users at the server,\r\n   * When the users are obtained we save them locally on the users variable.\r\n   * If there is at least one user we set the first of the list as the selected one.\r\n   * @param userToSetAsSelectedId the id of a user to set as selected after the users are obtained.\r\n   */\r\n  public getUsers(userToSetAsSelectedId?: number): void {\r\n    this.getUsersSubscription = this.usersService\r\n      .getUsers(this.restauranteSelected.id)\r\n      .subscribe((response: { users: Array<User> }) => {\r\n        this.getUsersSubscription.unsubscribe();\r\n        this.users = response.users;\r\n        if (this.users.length > 0) {\r\n          if (userToSetAsSelectedId !== undefined) {\r\n            this.setSelectedUser(userToSetAsSelectedId);\r\n          } else {\r\n            this.setSelectedUser(this.users[0].id);\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Function that set the selected user, this is the user data that is showed at the form.\r\n   * @param userId the user to set at the selected user variable.\r\n   */\r\n  public setSelectedUser(userId: number): void {\r\n    this.selectedUser = this.users.find((user: User) => {\r\n      return user.id === userId;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Function that open the modal where a user is created.\r\n   * This funcion also handle the close modal event with the option to reload the users list.\r\n   * @param [roleToCreate] optional parameter that indicates to the modal the default value of the role select.\r\n   */\r\n  public showUserCRUDModal(roleToCreate?: UserRoles): void {\r\n    const userCRUDDialog = this.dialog.open(UserCRUDComponent, {\r\n      width: '540px',\r\n      data: {\r\n        role: roleToCreate\r\n      }\r\n    });\r\n    this.afterModalClosesSubscription = userCRUDDialog\r\n      .afterClosed()\r\n      .subscribe((hasTheUserListToBeReloaded: boolean) => {\r\n        this.afterModalClosesSubscription.unsubscribe();\r\n        if (hasTheUserListToBeReloaded) {\r\n          this.getUsers();\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get method that indicates if the users list is empty.\r\n   * @returns the users list filled status.\r\n   */\r\n  get isUsersArrayEmpty(): boolean {\r\n    return this.users.length === 0;\r\n  }\r\n\r\n  /**\r\n   * Function that deletes a user.\r\n   * @param userId the id of the user to be deleted\r\n   */\r\n  public deleteUser(userId: number): void {\r\n    this.deleteUserSubscription = this.usersService\r\n      .deleteUser(userId)\r\n      .subscribe(() => {\r\n        this.deleteUserSubscription.unsubscribe();\r\n        this.snackBar.open(\r\n          'El usuario fue eliminado exitosamente',\r\n          'Entendido',\r\n          {\r\n            duration: 15000\r\n          }\r\n        );\r\n        this.selectedUser = undefined;\r\n        this.getUsers();\r\n      });\r\n  }\r\n}\r\n","<section class=\"dashboard-section-container\">\r\n  <app-section-header\r\n    [sectionName]=\"'Usuarios'\"\r\n    [actionName]=\"'Nuevo usuario'\"\r\n    (actionClicked)=\"showUserCRUDModal()\"\r\n  ></app-section-header>\r\n  <div class=\"dashboard-content\">\r\n    <div class=\"empty inl\" *ngIf=\"isUsersArrayEmpty\">\r\n      <div class=\"empty-content\">\r\n        <img src=\"assets/images/icons/general-empty.svg\" alt=\"Menu\" />\r\n        <p class=\"h2 txtC clr-nm\">Aún no has creado usuarios</p>\r\n        <p class=\"txtC description\">\r\n          Crea nuevos usuarios para poder administrar correctamente el sistema,\r\n          te mostramos los diferentes perfiles que puedes crear, como\r\n          administrador tienes acceso a los siguientes perfiles\r\n        </p>\r\n        <ol type=\"A\">\r\n          <li>\r\n            <p>\r\n              Un gerente te ayudará a manejar tus sucursales. Como administrador\r\n              puedes ingresar a todas las sucursales y administrarlas\r\n            </p>\r\n            <button class=\"btns-small\" (click)=\"showUserCRUDModal('manager')\">\r\n              <span>Nuevo gerente</span>\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <p>\r\n              El staff estará encargado de administrar las nuevas solicitudes de\r\n              reservaciones y órdenes\r\n            </p>\r\n            <button class=\"btns-small\" (click)=\"showUserCRUDModal('staff')\">\r\n              <span>Nuevo staff</span>\r\n            </button>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n    <ng-container *ngIf=\"!isUsersArrayEmpty\">\r\n      <aside>\r\n        <ul class=\"users-list\">\r\n          <li\r\n            class=\"user-container\"\r\n            [ngClass]=\"{'selected': selectedUser && selectedUser.id === user.id}\"\r\n            *ngFor=\"let user of users\"\r\n            (click)=\"setSelectedUser(user.id)\"\r\n          >\r\n            <div class=\"user-header\">\r\n              <p>{{ user.name }}</p>\r\n              <div\r\n                class=\"cta\"\r\n                [matMenuTriggerFor]=\"menu\"\r\n                (click)=\"$event.stopPropagation()\"\r\n              >\r\n                <img src=\"assets/images/icons/icon-dots.svg\" alt=\"\" />\r\n              </div>\r\n            </div>\r\n            <p>{{ user.role | userRole }}</p>\r\n            <mat-menu #menu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"deleteUser(user.id)\">\r\n                Eliminar\r\n              </button>\r\n            </mat-menu>\r\n          </li>\r\n        </ul>\r\n      </aside>\r\n      <main id=\"content\" *ngIf=\"selectedUser\">\r\n        <mat-card>\r\n          <mat-card-content>\r\n            <app-user-crud\r\n              [user]=\"selectedUser\"\r\n              (userHasBeenUpdated)=\"getUsers($event)\"\r\n            ></app-user-crud>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </main>\r\n    </ng-container>\r\n  </div>\r\n</section>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UsersComponent } from './users.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UsersComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class UsersRoutingModule {}\r\n","import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardContent {\n}\nMatCardContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            },] }\n];\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            },] }\n];\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            },] }\n];\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /**\n         * Position of the actions inside the card.\n         */\n        this.align = 'start';\n    }\n}\nMatCardActions.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n                }\n            },] }\n];\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Position of the actions inside the card.\n     * @type {?}\n     */\n    MatCardActions.prototype.align;\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            },] }\n];\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            },] }\n];\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            },] }\n];\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MatCard.prototype._animationMode;\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }] }\n];\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatCardModule {\n}\nMatCardModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n//# sourceMappingURL=card.js.map\n","<ng-content></ng-content>\n<ng-content select=\"mat-card-footer\"></ng-content>\n"]}