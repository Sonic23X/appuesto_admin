{"version":3,"sources":["webpack:///src/app/shared/payloads/amenities.payload.ts","webpack:///src/app/shared/payloads/franchise.payload.ts","webpack:///src/app/shared/payloads/restaurant.payload.ts","webpack:///src/app/shared/payloads/restaurant-app-data.payload.ts","webpack:///src/app/shared/payloads/restaurant-detail.payload.ts","webpack:///src/app/shared/payloads/restaurant-extra.payload.ts","webpack:///src/app/shared/payloads/restaurant-parking.payload.ts","webpack:///src/app/shared/payloads/restaurant-images.payload.ts","webpack:///src/app/shared/payloads/restaurant-payment-method.payload.ts","webpack:///src/app/shared/payloads/restaurant-working-hours.payload.ts","webpack:///src/app/shared/payloads/restaurant-reservation-zone.payload.ts","webpack:///src/app/shared/payloads/restaurant-service-type.payload.ts","webpack:///src/app/shared/payloads/index.ts","webpack:///src/app/pages/layout/preferences/schedules/schedules.module.ts","webpack:///src/app/pages/layout/preferences/schedules/enums/schedule-type.enum.ts","webpack:///src/app/pages/layout/preferences/schedules/schedules.component.ts","webpack:///src/app/pages/layout/preferences/schedules/schedules.component.html","webpack:///src/app/pages/layout/preferences/schedules/schedules-routing.module.ts"],"names":["AmenitiesPayload","pTypes","pZones","pExtras","pParkings","pPpaymentMethods","this","types","zones","extras","parkings","paymentMethods","getExtras","payment_methods","map","extra","id","active","name","BusinessPayload","pBusinessForm","businessForm","form","value","price_range","style","RestaurantPayload","pNewRestaurantForm","newRestaurantForm","avoidManagerUpdate","restaurantInfo","get","description","coordinates","concatCoordinates","address","phone","getPhone","email","invoice_email","invoice_url","manager","undefined","billingOption","emailBilling","websiteBilling","coordinatesArray","push","parseFloat","RestaurantAppDataPayload","pAppDataForm","appDataForm","max_offered_seats","max_people_per_order","max_cancel_limit_minutes","getTotalMinutes","reservation_time_minutes","RestaurantDetailPayload","pRestaurantDetailForm","restaurantDetailForm","getCoordinatesArray","address_extra","getParsedPhone","trim","RestuarantExtraPayload","pExtrasForm","extrasForm","getRawValue","RestuarantParkingPayload","pParkingForm","parkingForm","RestaurantImagesPayload","pImagesForm","imagesForm","galleryData","FormData","append","galleryImages","controls","forEach","control","i","RestuarantPaymentMethodPayload","pPaymentMethodsForm","paymentMethodsForm","RestaurantWorkingHoursPayload","pWorkingHoursForm","workingHoursForm","working_hours","getFixedHours","getMixedHours","currentWeekdays","activeDays","weekday","index","weekdayObject","week_day","opens_at","closes_at","hours","Object","keys","fixedHours","weekdays","day","object","parseInt","RestuarantReservationZonePayload","pReservationZonesFOrm","reservationZonesForm","RestuarantServiceTypePayload","pServiceTypeForm","serviceTypeForm","SchedulesModule","ScheduleTypeEnum","FixedHours","MixedHours","fb","restaurantService","snackBar","group","scheduleType","mixedHours","fixedHoursWeekdays","opening","required","pattern","closing","restaurantId","localStorage","getItem","workingHours","restaurantDetailSubscription","Subscription","EMPTY","setRestaurantSchedulesSubscription","scheduleTypeEnum","isLoading","setUpMixedHoursWeekdays","getRestaurantDetail","pipe","response","restaurant","subscribe","checkScheduleType","unsubscribe","event","checked","mixedHoursWeekdaysFormArray","setValidators","reset","clearValidators","updateValueAndValidity","validators","invalid","openSnackBar","payload","checkSelectedFixedDays","length","setRestaurantSchedules","fixedHoursJson","checkSelectedMixedDays","mixedHoursJson","workingHoursArrays","groupBy","hour","opensAt","closesAt","patchFormWithMixedHours","patchFormWithFixedHours","filter","formGroupObject","array","f","groups","JSON","stringify","message","action","open","duration","patchValue","hourGroup","weekDay","toString","isSelected","SchedulesRoutingModule"],"mappings":"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","file":"x","sourcesContent":["import { AmenitiesToSave } from '@models';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class AmenitiesPayload {\r\n  types?: Array<number>;\r\n  zones?: Array<number>;\r\n  extras?: Array<IExtra>;\r\n  parkings?: Array<number>;\r\n  paymentMethods?: Array<number>;\r\n\r\n  constructor(\r\n    pTypes: Array<number>,\r\n    pZones: Array<number>,\r\n    pExtras: Array<IExtra>,\r\n    pParkings: Array<number>,\r\n    pPpaymentMethods: Array<number>\r\n  ) {\r\n    this.types = pTypes;\r\n    this.zones = pZones;\r\n    this.extras = pExtras;\r\n    this.parkings = pParkings;\r\n    this.paymentMethods = pPpaymentMethods;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.types,\r\n      zones: this.zones,\r\n      extras: this.getExtras(),\r\n      parkings: this.parkings,\r\n      payment_methods: this.paymentMethods\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extras.map((extra: IExtra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { IFranchise } from '@interfaces';\r\nimport { Franchise } from '@models';\r\n\r\nexport class BusinessPayload {\r\n  businessForm: FormGroup;\r\n\r\n  constructor(pBusinessForm: FormGroup) {\r\n    this.businessForm = pBusinessForm;\r\n  }\r\n\r\n  toJson(): Franchise {\r\n    const form = this.businessForm.value;\r\n\r\n    const body: IFranchise = {\r\n      id: form.id || null,\r\n      name: form.name || null,\r\n      price_range: form.price_range,\r\n      style: form.style,\r\n    };\r\n\r\n    return body;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { Restaurant } from '@models';\r\n\r\nexport class RestaurantPayload {\r\n  newRestaurantForm: FormGroup;\r\n\r\n  constructor(pNewRestaurantForm: FormGroup) {\r\n    this.newRestaurantForm = pNewRestaurantForm;\r\n  }\r\n\r\n  public toJson(avoidManagerUpdate?: boolean): Restaurant {\r\n    const form = this.newRestaurantForm;\r\n\r\n    const restaurantInfo = {\r\n      name: form.get('name').value,\r\n      description: form.get('description').value,\r\n      coordinates: this.concatCoordinates(),\r\n      address: form.get('address').value,\r\n      phone: this.getPhone(),\r\n      email: form.get('email').value,\r\n      invoice_email: '',\r\n      invoice_url: '',\r\n      manager:\r\n        (form.get('manager').value || form.get('manager').value === 0) &&\r\n        !avoidManagerUpdate\r\n          ? form.get('manager').value\r\n          : undefined,\r\n    };\r\n\r\n    if (form.value.billingOption === '0') {\r\n      restaurantInfo.invoice_email = form.value.emailBilling;\r\n      delete restaurantInfo.invoice_url;\r\n    } else {\r\n      restaurantInfo.invoice_url = form.value.websiteBilling;\r\n      delete restaurantInfo.invoice_email;\r\n    }\r\n\r\n    return restaurantInfo as Restaurant;\r\n  }\r\n\r\n  private getPhone(): string {\r\n    return `+${this.newRestaurantForm.get('dialCode').value}${\r\n      this.newRestaurantForm.get('phone').value\r\n    }`;\r\n  }\r\n\r\n  private concatCoordinates(): Array<number> {\r\n    const coordinatesArray: Array<number> = [];\r\n\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('latitude').value)\r\n    );\r\n    coordinatesArray.push(\r\n      parseFloat(this.newRestaurantForm.get('longitude').value)\r\n    );\r\n\r\n    return coordinatesArray;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nexport class RestaurantAppDataPayload {\r\n  appDataForm: FormGroup;\r\n\r\n  constructor(pAppDataForm: FormGroup) {\r\n    this.appDataForm = pAppDataForm;\r\n  }\r\n\r\n  toJson() {\r\n    return {\r\n      max_offered_seats: this.appDataForm.get('max_offered_seats').value,\r\n      max_people_per_order: this.appDataForm.get('max_people_per_order').value,\r\n      max_cancel_limit_minutes: this.getTotalMinutes(),\r\n      reservation_time_minutes: this.appDataForm.get('reservation_time_minutes').value,\r\n    };\r\n  }\r\n\r\n  private getTotalMinutes(): number {\r\n    const hoursToMinutes = this.appDataForm.get('max_cancel_limit_hours').value * 60;\r\n    const totalMinutes = +hoursToMinutes + +this.appDataForm.get('max_cancel_limit_minutes').value;\r\n\r\n    return totalMinutes;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { NewBranch } from '@models';\r\n\r\nexport class RestaurantDetailPayload {\r\n  restaurantDetailForm: FormGroup;\r\n\r\n  constructor(pRestaurantDetailForm: FormGroup) {\r\n    this.restaurantDetailForm = pRestaurantDetailForm;\r\n  }\r\n\r\n  toJson(): NewBranch {\r\n    return {\r\n      name: this.restaurantDetailForm.get('name').value,\r\n      description: this.restaurantDetailForm.get('description').value,\r\n      coordinates: this.getCoordinatesArray(),\r\n      address: this.restaurantDetailForm.get('address').value,\r\n      address_extra: this.restaurantDetailForm.get('address_extra').value,\r\n      phone: this.getParsedPhone(),\r\n      email: this.restaurantDetailForm.get('email').value\r\n    };\r\n  }\r\n\r\n  private getCoordinatesArray(): Array<number> {\r\n    const coordArray = [\r\n      parseFloat(this.restaurantDetailForm.get('lat').value),\r\n      parseFloat(this.restaurantDetailForm.get('long').value)\r\n    ];\r\n\r\n    return coordArray;\r\n  }\r\n\r\n  private getParsedPhone(): string {\r\n    const form = this.restaurantDetailForm;\r\n    const concatPhone = `+${form.get('countryCode').value} ${form\r\n      .get('phone')\r\n      .value.trim()}`;\r\n\r\n    return concatPhone;\r\n  }\r\n}\r\n","import { Extra, AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IExtra } from '@interfaces';\r\n\r\nexport class RestuarantExtraPayload {\r\n  extrasForm: FormGroup;\r\n\r\n  constructor(pExtrasForm: FormGroup) {\r\n    this.extrasForm = pExtrasForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      extras: this.getExtras()\r\n    };\r\n  }\r\n\r\n  private getExtras(): Array<IExtra> {\r\n    const extras = this.extrasForm.getRawValue().extras.map((extra: Extra) => {\r\n      if (extra.id) {\r\n        return {\r\n          id: extra.id,\r\n          active: extra.active\r\n        };\r\n      } else {\r\n        return {\r\n          name: extra.name,\r\n          active: extra.active\r\n        };\r\n      }\r\n    });\r\n\r\n    return extras;\r\n  }\r\n}\r\n","import { AmenitiesToSave } from '@models';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\nexport class RestuarantParkingPayload {\r\n  parkingForm: FormGroup;\r\n\r\n  constructor(pParkingForm: FormGroup) {\r\n    this.parkingForm = pParkingForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      parkings: this.parkingForm.get('parking').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantImagesPayload {\r\n  private imagesForm: FormGroup;\r\n\r\n  constructor(pImagesForm: FormGroup) {\r\n    this.imagesForm = pImagesForm;\r\n  }\r\n\r\n  public toFormData(): FormData {\r\n    const galleryData = new FormData();\r\n\r\n    galleryData.append('cover', this.imagesForm.get('coverImage').value);\r\n\r\n    const galleryImages = this.imagesForm.get('galleryImages') as FormArray;\r\n\r\n    galleryImages.controls.forEach((control, i) => {\r\n      if (!control.get('id')) {\r\n        galleryData.append(\r\n          'gallery[' + i + ']',\r\n          galleryImages.controls[i].get('fileValue').value\r\n        );\r\n      }\r\n    });\r\n\r\n    if (this.imagesForm.get('imageLink').value) {\r\n      galleryData.append('matterport', this.imagesForm.get('imageLink').value);\r\n    }\r\n    return galleryData;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantPaymentMethodPayload {\r\n  paymentMethodsForm: FormGroup;\r\n\r\n  constructor(pPaymentMethodsForm: FormGroup) {\r\n    this.paymentMethodsForm = pPaymentMethodsForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      payment_methods: this.paymentMethodsForm.get('paymentMethods').value || []\r\n    };\r\n  }\r\n}\r\n","import { IWorkingHour } from '@interfaces';\r\nimport { WorkingHoursResponse } from '@models';\r\nimport { FormGroup, FormArray } from '@angular/forms';\r\n\r\nexport class RestaurantWorkingHoursPayload {\r\n  private workingHoursForm: FormGroup;\r\n\r\n  constructor(pWorkingHoursForm: FormGroup) {\r\n    this.workingHoursForm = pWorkingHoursForm;\r\n  }\r\n\r\n  public fixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getFixedHours() };\r\n  }\r\n\r\n  public mixedHoursJson(): WorkingHoursResponse {\r\n    return { working_hours: this.getMixedHours() };\r\n  }\r\n\r\n  private getMixedHours() {\r\n    const currentWeekdays = this.workingHoursForm.get(\r\n      'mixedHours'\r\n    ) as FormArray;\r\n    const activeDays: Array<IWorkingHour> = [];\r\n\r\n    currentWeekdays.controls.forEach((weekday, index) => {\r\n      if (weekday.get('isSelected').value === true) {\r\n        const weekdayObject = {\r\n          week_day: index + 1,\r\n          opens_at: weekday.get('opening').value,\r\n          closes_at: weekday.get('closing').value\r\n        };\r\n\r\n        activeDays.push(weekdayObject);\r\n      }\r\n    });\r\n\r\n    return activeDays;\r\n  }\r\n\r\n  private getFixedHours(): Array<IWorkingHour> {\r\n    const hours: Array<IWorkingHour> = [];\r\n\r\n    Object.keys(this.workingHoursForm.value.fixedHours.weekdays).forEach(\r\n      day => {\r\n        const fixedHours = this.workingHoursForm.get('fixedHours');\r\n        if (fixedHours.get('weekdays').get(day).value) {\r\n          const object = {\r\n            week_day: parseInt(day, 10),\r\n            opens_at: fixedHours.get('opening').value,\r\n            closes_at: fixedHours.get('closing').value\r\n          };\r\n\r\n          hours.push(object);\r\n        }\r\n      }\r\n    );\r\n\r\n    return hours;\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantReservationZonePayload {\r\n  reservationZonesForm: FormGroup;\r\n\r\n  constructor(pReservationZonesFOrm: FormGroup) {\r\n    this.reservationZonesForm = pReservationZonesFOrm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      zones: this.reservationZonesForm.get('zones').value || []\r\n    };\r\n  }\r\n}\r\n","import { FormGroup } from '@angular/forms';\r\nimport { AmenitiesToSave } from '@models';\r\n\r\nexport class RestuarantServiceTypePayload {\r\n  serviceTypeForm: FormGroup;\r\n\r\n  constructor(pServiceTypeForm: FormGroup) {\r\n    this.serviceTypeForm = pServiceTypeForm;\r\n  }\r\n\r\n  toJson(): AmenitiesToSave {\r\n    return {\r\n      types: this.serviceTypeForm.get('type').value || []\r\n    };\r\n  }\r\n}\r\n","export * from './amenities.payload';\r\nexport * from './franchise.payload';\r\nexport * from './restaurant.payload';\r\nexport * from './restaurant-app-data.payload';\r\nexport * from './restaurant-detail.payload';\r\nexport * from './restaurant-extra.payload';\r\nexport * from './restaurant-parking.payload';\r\nexport * from './restaurant-images.payload';\r\nexport * from './restaurant-payment-method.payload';\r\nexport * from './restaurant-working-hours.payload';\r\nexport * from './restaurant-reservation-zone.payload';\r\nexport * from './restaurant-service-type.payload';\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SchedulesRoutingModule } from './schedules-routing.module';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\nimport { NgxMaskModule } from 'ngx-mask';\r\nimport { SchedulesComponent } from './schedules.component';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@NgModule({\r\n  declarations: [SchedulesComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    NgxMaskModule.forRoot(),\r\n    MatFormFieldModule,\r\n    MatSlideToggleModule,\r\n    MatCheckboxModule,\r\n    MatSlideToggleModule,\r\n    SchedulesRoutingModule,\r\n    MatRadioModule\r\n  ]\r\n})\r\nexport class SchedulesModule {}\r\n","export enum ScheduleTypeEnum {\r\n  FixedHours = 0,\r\n  MixedHours = 1\r\n}\r\n","import { WorkingHour, ResponseDetail, Restaurant } from '@models';\r\nimport { RestaurantWorkingHoursPayload } from '@payloads';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormArray,\r\n  FormGroup,\r\n  AbstractControl,\r\n  Validators\r\n} from '@angular/forms';\r\nimport { Regex24Hours } from '@constants';\r\nimport { RestaurantService } from '@services';\r\nimport { MatRadioChange } from '@angular/material/radio';\r\nimport { MatCheckboxChange } from '@angular/material/checkbox';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { map } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs';\r\nimport { ScheduleTypeEnum } from './enums/schedule-type.enum';\r\n\r\n@Component({\r\n  selector: 'app-schedules',\r\n  templateUrl: './schedules.component.html',\r\n  styleUrls: ['./schedules.component.scss']\r\n})\r\nexport class SchedulesComponent implements OnInit, OnDestroy {\r\n  public weekdays = [\r\n    {\r\n      name: 'Lunes',\r\n      id: 1\r\n    },\r\n    {\r\n      name: 'Martes',\r\n      id: 2\r\n    },\r\n    {\r\n      name: 'Miércoles',\r\n      id: 3\r\n    },\r\n    {\r\n      name: 'Jueves',\r\n      id: 4\r\n    },\r\n    {\r\n      name: 'Viernes',\r\n      id: 5\r\n    },\r\n    {\r\n      name: 'Sábado',\r\n      id: 6\r\n    },\r\n    {\r\n      name: 'Domingo',\r\n      id: 7\r\n    }\r\n  ];\r\n  public isLoading: boolean;\r\n  public workingHoursForm = this.fb.group({\r\n    scheduleType: new FormControl(0),\r\n    mixedHours: new FormArray([]),\r\n    fixedHours: new FormGroup({\r\n      weekdays: this.fixedHoursWeekdays(),\r\n      opening: new FormControl('', [\r\n        Validators.required,\r\n        Validators.pattern(Regex24Hours)\r\n      ]),\r\n      closing: new FormControl('', [\r\n        Validators.required,\r\n        Validators.pattern(Regex24Hours)\r\n      ])\r\n    })\r\n  });\r\n  private restaurantId: number = parseInt(\r\n    localStorage.getItem('restaurantId'),\r\n    10\r\n  );\r\n  public workingHours: Array<WorkingHour> = [];\r\n  private restaurantDetailSubscription = Subscription.EMPTY;\r\n  private setRestaurantSchedulesSubscription = Subscription.EMPTY;\r\n  public scheduleTypeEnum = ScheduleTypeEnum;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private restaurantService: RestaurantService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isLoading = true;\r\n    this.setUpMixedHoursWeekdays();\r\n\r\n    this.restaurantDetailSubscription = this.restaurantService\r\n      .getRestaurantDetail(this.restaurantId)\r\n      .pipe(\r\n        map((response: ResponseDetail) => {\r\n          return new Restaurant(response.restaurant);\r\n        })\r\n      )\r\n      .subscribe((restaurant: Restaurant) => {\r\n        this.workingHours = restaurant.working_hours;\r\n        this.isLoading = false;\r\n        if (this.workingHours) {\r\n          this.checkScheduleType();\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.restaurantDetailSubscription.unsubscribe();\r\n    this.setRestaurantSchedulesSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   *  Returns FormGroup for Fixed Hours\r\n   *\r\n   * @returns AbstractControl Object\r\n   */\r\n  get fixedHoursWeekdaysFormGroup(): AbstractControl {\r\n    return this.workingHoursForm.get('fixedHours').get('weekdays') as FormGroup;\r\n  }\r\n\r\n  /**\r\n   *  Returns Mixed Hours Form Array\r\n   * @returns Form Array\r\n   */\r\n  get mixedHoursWeekdaysFormArray(): FormArray {\r\n    return this.workingHoursForm.get('mixedHours') as FormArray;\r\n  }\r\n\r\n  /**\r\n   *  Returns Form Control for schedule type (fixed or mixed hours)\r\n   * @returns Form Control\r\n   */\r\n  get scheduleTypeFormControl(): FormControl {\r\n    return this.workingHoursForm.get('scheduleType') as FormControl;\r\n  }\r\n\r\n  /**\r\n   * For mixed hours schedule type, when a day is selected or deselected,\r\n   * updates closing and opening hours input validators for that day.\r\n   */\r\n  public onMixedHoursDaySelect(event: MatCheckboxChange, index: number): void {\r\n    if (event.checked) {\r\n      this.mixedHoursWeekdaysFormArray.controls[index]\r\n        .get('opening')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n      this.mixedHoursWeekdaysFormArray.controls[index]\r\n        .get('closing')\r\n        .setValidators([Validators.required, Validators.pattern(Regex24Hours)]);\r\n    } else {\r\n      this.mixedHoursWeekdaysFormArray.controls[index].get('opening').reset();\r\n      this.mixedHoursWeekdaysFormArray.controls[index].get('closing').reset();\r\n      this.mixedHoursWeekdaysFormArray.controls[index]\r\n        .get('opening')\r\n        .clearValidators();\r\n      this.mixedHoursWeekdaysFormArray.controls[index]\r\n        .get('closing')\r\n        .clearValidators();\r\n    }\r\n\r\n    this.mixedHoursWeekdaysFormArray.controls[index]\r\n      .get('opening')\r\n      .updateValueAndValidity();\r\n    this.mixedHoursWeekdaysFormArray.controls[index]\r\n      .get('closing')\r\n      .updateValueAndValidity();\r\n  }\r\n\r\n  /**\r\n   * When a schedule type is selected, updates the the validators for the form\r\n   */\r\n  public onScheduleTypeChange(event: MatRadioChange): void {\r\n    const value = event.value;\r\n    const validators = [Validators.required, Validators.pattern(Regex24Hours)];\r\n    const fixedHours = this.workingHoursForm.get('fixedHours');\r\n\r\n    if (value === this.scheduleTypeEnum.FixedHours) {\r\n      fixedHours.get('opening').setValidators(validators);\r\n      fixedHours.get('closing').setValidators(validators);\r\n    } else {\r\n      fixedHours.get('opening').clearValidators();\r\n      fixedHours.get('closing').clearValidators();\r\n    }\r\n    fixedHours.get('opening').updateValueAndValidity();\r\n    fixedHours.get('closing').updateValueAndValidity();\r\n  }\r\n\r\n  /**\r\n   *  Saves changes. Saves new working hours\r\n   */\r\n  public onSubmit(): void {\r\n    if (this.workingHoursForm.invalid) {\r\n      return this.openSnackBar('Revisa los datos', 'Entendido');\r\n    }\r\n    this.isLoading = true;\r\n    const payload = new RestaurantWorkingHoursPayload(this.workingHoursForm);\r\n\r\n    if (\r\n      this.workingHoursForm.get('scheduleType').value ===\r\n      this.scheduleTypeEnum.FixedHours\r\n    ) {\r\n      if (this.checkSelectedFixedDays().length === 0) {\r\n        this.isLoading = false;\r\n        return this.openSnackBar(\r\n          'Debes seleccionar por lo menos un día de la semana',\r\n          'Entendido'\r\n        );\r\n      }\r\n      this.setRestaurantSchedulesSubscription = this.restaurantService\r\n        .setRestaurantSchedules(payload.fixedHoursJson(), this.restaurantId)\r\n        .subscribe(() => {\r\n          this.openSnackBar(\r\n            'La información se actualizó con éxito',\r\n            'Entendido'\r\n          );\r\n          this.isLoading = false;\r\n        });\r\n    } else {\r\n      if (this.checkSelectedMixedDays().length === 0) {\r\n        this.isLoading = false;\r\n        return this.openSnackBar(\r\n          'Debes seleccionar por lo menos un día de la semana',\r\n          'Entendido'\r\n        );\r\n      }\r\n\r\n      this.setRestaurantSchedulesSubscription = this.restaurantService\r\n        .setRestaurantSchedules(payload.mixedHoursJson(), this.restaurantId)\r\n        .subscribe(() => {\r\n          this.openSnackBar(\r\n            'La información se actualizó con éxito',\r\n            'Entendido'\r\n          );\r\n          this.isLoading = false;\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Groups working hours from server response by closing and opening hour\r\n   * to determine which FormGroup to patch (fixed hours or mixed hours)\r\n   */\r\n  private checkScheduleType(): void {\r\n    const workingHoursArrays = this.groupBy(\r\n      this.workingHours,\r\n      (hour: WorkingHour) => {\r\n        return [hour.opensAt, hour.closesAt];\r\n      }\r\n    );\r\n    if (workingHoursArrays.length > 1) {\r\n      this.patchFormWithMixedHours(workingHoursArrays);\r\n    } else {\r\n      this.patchFormWithFixedHours(workingHoursArrays);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Creates an array of string with the weekdays id's which then is used to validate\r\n   * the user has selected at least one day in the fixed hours schedule type\r\n   *\r\n   *  @returns Array of strings with selected days\r\n   */\r\n  private checkSelectedFixedDays(): Array<string> {\r\n    const objects = Object.keys(\r\n      this.workingHoursForm.value.fixedHours.weekdays\r\n    ).filter((day) => {\r\n      const fixedHours = this.workingHoursForm.get('fixedHours');\r\n      return fixedHours.get('weekdays').get(day).value === true;\r\n    });\r\n\r\n    return objects;\r\n  }\r\n\r\n  /**\r\n   *  Creates an array of Abstract Controls which then is used to validate\r\n   * the user has selected at least one day in the mixed hours schedule type\r\n   *\r\n   *  @returns Array of AbstractControls with active days\r\n   */\r\n  private checkSelectedMixedDays(): Array<AbstractControl> {\r\n    const currentDays = this.workingHoursForm.get('mixedHours') as FormArray;\r\n\r\n    const objects = currentDays.controls.filter((day) => {\r\n      return day.get('isSelected').value === true;\r\n    });\r\n\r\n    return objects;\r\n  }\r\n\r\n  /**\r\n   * Creates the fixed hours Form Group for the working hours form\r\n   *\r\n   *  @returns A Form Group with a Form Control for each day of the week\r\n   */\r\n  private fixedHoursWeekdays(): FormGroup {\r\n    const formGroupObject: { [key: string]: FormControl } = {};\r\n\r\n    for (const weekday of this.weekdays) {\r\n      formGroupObject[weekday.id] = new FormControl(false);\r\n    }\r\n\r\n    return new FormGroup(formGroupObject);\r\n  }\r\n\r\n  /**\r\n   * Groups the existing working hours by opening and closing time.\r\n   * This will be used to determine weather the schedule type is fixed or mixed.\r\n   *\r\n   *  @param array An array of Working Hours\r\n   *  @param f A function to create the array names\r\n   *  @returns fAn array containing an array for each group of days that opens\r\n   *  and closes at the same time\r\n   */\r\n  private groupBy(\r\n    array: Array<WorkingHour>,\r\n    f: any\r\n  ): Array<Array<WorkingHour>> {\r\n    const groups: {\r\n      [key: string]: Array<WorkingHour>;\r\n    } = {};\r\n\r\n    array.forEach((hour: WorkingHour) => {\r\n      const group: string = JSON.stringify(f(hour));\r\n\r\n      groups[group] = groups[group] || [];\r\n      groups[group].push(hour);\r\n    });\r\n\r\n    return Object.keys(groups).map((group) => {\r\n      return groups[group];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Created a snackbar event to display a message for the user\r\n   *\r\n   *  @param message Text that will be displayed as the main message in the snackbar\r\n   *  @param action Text for the dismiss button on the snack bar\r\n   */\r\n  private openSnackBar(message: string, action: string): void {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Patches the form with existing fixed hours schedule.\r\n   *\r\n   *  @param workingHoursArrays An array of arrays containing the current working hours\r\n   */\r\n  private patchFormWithFixedHours(\r\n    workingHoursArrays: Array<Array<WorkingHour>>\r\n  ): void {\r\n    this.workingHoursForm.patchValue({\r\n      scheduleType: this.scheduleTypeEnum.FixedHours\r\n    });\r\n\r\n    const day = workingHoursArrays[0];\r\n\r\n    workingHoursArrays.forEach((hourGroup: Array<WorkingHour>) => {\r\n      hourGroup.forEach((hour: WorkingHour) => {\r\n        const weekdayId = hour.weekDay.toString();\r\n        const object: { [key: string]: boolean } = {};\r\n        object[weekdayId] = true;\r\n\r\n        this.workingHoursForm\r\n          .get('fixedHours')\r\n          .get('weekdays')\r\n          .patchValue(object);\r\n      });\r\n    });\r\n\r\n    this.workingHoursForm.get('fixedHours').patchValue({\r\n      opening: day[0].opensAt,\r\n      closing: day[0].closesAt\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Patches the form with existing mixed hours schedule.\r\n   *\r\n   *  @param workingHoursArrays An array of arrays containing the current working hours\r\n   */\r\n  private patchFormWithMixedHours(\r\n    workingHoursArrays: Array<Array<WorkingHour>>\r\n  ): void {\r\n    this.workingHoursForm.patchValue({\r\n      scheduleType: this.scheduleTypeEnum.MixedHours\r\n    });\r\n\r\n    workingHoursArrays.forEach((hourGroup) => {\r\n      hourGroup.forEach((hour) => {\r\n        this.mixedHoursWeekdaysFormArray.controls[hour.weekDay - 1].patchValue({\r\n          isSelected: true,\r\n          opening: hour.opensAt,\r\n          closing: hour.closesAt\r\n        });\r\n      });\r\n    });\r\n\r\n    this.workingHoursForm\r\n      .get('fixedHours')\r\n      .get('opening')\r\n      .clearValidators();\r\n    this.workingHoursForm\r\n      .get('fixedHours')\r\n      .get('closing')\r\n      .clearValidators();\r\n    this.workingHoursForm\r\n      .get('fixedHours')\r\n      .get('opening')\r\n      .updateValueAndValidity();\r\n    this.workingHoursForm\r\n      .get('fixedHours')\r\n      .get('closing')\r\n      .updateValueAndValidity();\r\n  }\r\n\r\n  /**\r\n   * Craeates a new Form Group for each day of the week and pushes it\r\n   * to the mixed hours Form Array\r\n   *\r\n   */\r\n  private setUpMixedHoursWeekdays(): void {\r\n    this.weekdays.forEach(() => {\r\n      const group: { [key: string]: FormControl } = {};\r\n\r\n      (group.isSelected = new FormControl(false)),\r\n        (group.opening = new FormControl('')),\r\n        (group.closing = new FormControl(''));\r\n\r\n      this.mixedHoursWeekdaysFormArray.push(new FormGroup(group));\r\n    });\r\n  }\r\n}\r\n","<div class=\"schedule-form-container\">\r\n  <form\r\n    id=\"scheduleForm\"\r\n    [formGroup]=\"workingHoursForm\"\r\n    (ngSubmit)=\"onSubmit()\"\r\n    novalidate\r\n  >\r\n    <div class=\"schedule-type\">\r\n      <mat-radio-group\r\n        formControlName=\"scheduleType\"\r\n        (change)=\"onScheduleTypeChange($event)\"\r\n      >\r\n        <mat-radio-button [value]=\"scheduleTypeEnum.FixedHours\"\r\n          >Tengo el mismo horario todos los días</mat-radio-button\r\n        >\r\n        <mat-radio-button [value]=\"scheduleTypeEnum.MixedHours\"\r\n          >Quiero seleccionar un horario por día</mat-radio-button\r\n        >\r\n      </mat-radio-group>\r\n    </div>\r\n\r\n    <p class=\"format\">Formato de 24 hrs.</p>\r\n\r\n    <div\r\n      class=\"mixed-hours\"\r\n      formArrayName=\"mixedHours\"\r\n      *ngIf=\"scheduleTypeFormControl.value == scheduleTypeEnum.MixedHours\"\r\n    >\r\n      <div\r\n        class=\"day-container\"\r\n        *ngFor=\"\r\n          let weekday of mixedHoursWeekdaysFormArray.controls;\r\n          let i = index;\r\n          let first = first\r\n        \"\r\n      >\r\n        <ng-container [formGroupName]=\"i\">\r\n          <mat-checkbox\r\n            formControlName=\"isSelected\"\r\n            (change)=\"onMixedHoursDaySelect($event, i)\"\r\n            >{{ weekdays[i].name }}\r\n          </mat-checkbox>\r\n          <div class=\"form-group\">\r\n            <mat-form-field floatLabel=\"always\">\r\n              <mat-label *ngIf=\"first\">Apertura</mat-label>\r\n              <input\r\n                matInput\r\n                formControlName=\"opening\"\r\n                name=\"opening\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error *ngIf=\"weekday.get('opening').hasError('required')\">\r\n                Esta información es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  !weekday.get('opening').hasError('required') &&\r\n                  weekday.get('opening').hasError('pattern')\r\n                \"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field floatLabel=\"always\">\r\n              <mat-label *ngIf=\"first\">Cierre</mat-label>\r\n              <input\r\n                matInput\r\n                formControlName=\"closing\"\r\n                name=\"closing\"\r\n                mask=\"00:00\"\r\n                [dropSpecialCharacters]=\"false\"\r\n                [validation]=\"false\"\r\n              />\r\n              <mat-error *ngIf=\"weekday.get('closing').hasError('required')\">\r\n                Esta información es necesaria\r\n              </mat-error>\r\n              <mat-error\r\n                *ngIf=\"\r\n                  !weekday.get('closing').hasError('required') &&\r\n                  weekday.get('closing').hasError('pattern')\r\n                \"\r\n              >\r\n                El formato es incorrecto\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n    <div\r\n      class=\"fixed-hours\"\r\n      *ngIf=\"scheduleTypeFormControl.value == scheduleTypeEnum.FixedHours\"\r\n    >\r\n      <ng-container formGroupName=\"fixedHours\">\r\n        <div formGroupName=\"weekdays\">\r\n          <mat-checkbox\r\n            *ngFor=\"let weekday of weekdays; let i = index\"\r\n            [formControlName]=\"i + 1\"\r\n            >{{ weekday.name }}\r\n          </mat-checkbox>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <mat-form-field floatLabel=\"always\">\r\n            <mat-label>Apertura</mat-label>\r\n            <input\r\n              matInput\r\n              formControlName=\"opening\"\r\n              name=\"openingAll\"\r\n              mask=\"00:00\"\r\n              [dropSpecialCharacters]=\"false\"\r\n              [validation]=\"false\"\r\n            />\r\n            <mat-error\r\n              *ngIf=\"\r\n                workingHoursForm\r\n                  .get('fixedHours')\r\n                  .get('opening')\r\n                  .hasError('required')\r\n              \"\r\n            >\r\n              Esta información es necesaria\r\n            </mat-error>\r\n            <mat-error\r\n              *ngIf=\"\r\n                workingHoursForm\r\n                  .get('fixedHours')\r\n                  .get('opening')\r\n                  .hasError('pattern')\r\n              \"\r\n            >\r\n              El formato es incorrecto\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <mat-form-field floatLabel=\"always\">\r\n            <mat-label>Cierre</mat-label>\r\n            <input\r\n              matInput\r\n              formControlName=\"closing\"\r\n              name=\"closingAll\"\r\n              mask=\"00:00\"\r\n              [dropSpecialCharacters]=\"false\"\r\n              [validation]=\"false\"\r\n            />\r\n            <mat-error\r\n              *ngIf=\"\r\n                workingHoursForm\r\n                  .get('fixedHours')\r\n                  .get('closing')\r\n                  .hasError('required')\r\n              \"\r\n            >\r\n              Esta información es necesaria\r\n            </mat-error>\r\n            <mat-error\r\n              *ngIf=\"\r\n                workingHoursForm\r\n                  .get('fixedHours')\r\n                  .get('closing')\r\n                  .hasError('pattern')\r\n              \"\r\n            >\r\n              El formato es incorrecto\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <button class=\"btns\" type=\"submit\" [disabled]=\"isLoading\">\r\n      <span>Guardar</span>\r\n    </button>\r\n  </form>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SchedulesComponent } from './schedules.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SchedulesComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class SchedulesRoutingModule { }\r\n"]}