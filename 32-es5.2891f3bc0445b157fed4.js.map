{"version":3,"sources":["webpack:///src/app/pages/login/login.module.ts","webpack:///src/app/pages/login/login.component.ts","webpack:///src/app/pages/login/login.component.html","webpack:///src/app/pages/login/login-routing.module.ts","webpack:///src/app/shared/services/franchise.service.ts","webpack:///src/app/shared/services/restaurant.service.ts"],"names":["LoginModule","fb","router","dialog","loginErrorPipe","topLoaderService","franchiseService","restaurantService","version","loginForm","this","group","email","password","franchisesSubscription","Subscription","EMPTY","restaurantsSubscription","unsubscribe","showLoader","get","value","signInWithEmailAndPassword","then","currentUser","getIdTokenResult","idTokenResult","hasUserAdminPrivileges","claims","admin","hasUserStaffPrivileges","staff","getFranchises","subscribe","franchisesResponse","hiddeLoader","franchises","length","navigate","localStorage","setItem","JSON","stringify","id","getRestaurants","responseRestaurant","restaurants","signOut","clear","showError","catch","error","code","errorCode","open","transform","duration","LoginRoutingModule","FranchiseService","http","franchise","currentFranchise","asObservable","next","post","FRANCHISE","STYLES","franchiseId","url","FRANCHISE_MANAGERS","replace","toString","payload","put","PRICE_RANGES","FRANCHISES","pipe","response","toPromise","RestaurantService","restaurant","currentRestaurant","FRANCHISE_RESTAURANTS","restaurantId","RESTAURANT_DETAIL","RESTAURANT","RESTAURANT_USERS","FRANCHISE_RESTAURANT","delete","extras","RESTAURANT_EXTRAS","extraId","RESTAURANT_EXTRA","amenities","RESTAURANT_AMENITIES","gallery","RESTAURANT_MEDIA","imageId","RESTAURANT_IMAGE","schedules","RESTAURANT_WORKING_HOURS","AMENITIES","extra"],"mappings":"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","file":"x","sourcesContent":["import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { AngularFireAuthModule } from '@angular/fire/auth';\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    AngularFireAuthModule\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class LoginModule {}\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { FormControl, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport * as firebase from 'firebase/app';\r\nimport { LoginErrorCodePipe } from '@pipes/login-error-code/login-error-code.pipe';\r\nimport {\r\n  TopLoaderService,\r\n  FranchiseService,\r\n  RestaurantService,\r\n} from '@services';\r\nimport { ResponseFranchises, ResponseRestaurant } from '@models';\r\nimport { Subscription } from 'rxjs';\r\nimport { version } from '../../../../package.json';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  preserveWhitespaces: true,\r\n  providers: [LoginErrorCodePipe],\r\n})\r\nexport class LoginComponent implements OnDestroy {\r\n  public version: string = version;\r\n\r\n  /**\r\n   * Form used to manage the login fields.\r\n   */\r\n  public loginForm = this.fb.group({\r\n    email: new FormControl('', []),\r\n    password: new FormControl('', []),\r\n  });\r\n\r\n  /**\r\n   * Variable used to store the subscription that give us the current franchise data.\r\n   * We save that subscription so that later we can unsubscribe it.\r\n   */\r\n  private franchisesSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable used to store the subscription that give us the current restaurant data.\r\n   * We save that subscription so that later we can unsubscribe it.\r\n   */\r\n  private restaurantsSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private dialog: MatSnackBar,\r\n    private loginErrorPipe: LoginErrorCodePipe,\r\n    private topLoaderService: TopLoaderService,\r\n    private franchiseService: FranchiseService,\r\n    private restaurantService: RestaurantService\r\n  ) {}\r\n\r\n  ngOnDestroy() {\r\n    this.franchisesSubscription.unsubscribe();\r\n    this.restaurantsSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Handle the user's intent to login.\r\n   */\r\n  public login(): void {\r\n    this.topLoaderService.showLoader();\r\n    const email = this.loginForm.get('email').value;\r\n    const password = this.loginForm.get('password').value;\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then(() => {\r\n        firebase\r\n          .auth()\r\n          .currentUser.getIdTokenResult()\r\n          .then((idTokenResult) => {\r\n            const hasUserAdminPrivileges = idTokenResult.claims.admin;\r\n            const hasUserStaffPrivileges = idTokenResult.claims.staff;\r\n\r\n            // Check if the user has admin or staff privileges.\r\n            if (hasUserAdminPrivileges || hasUserStaffPrivileges) {\r\n              this.franchisesSubscription = this.franchiseService\r\n                .getFranchises()\r\n                .subscribe((franchisesResponse: ResponseFranchises) => {\r\n                  this.franchisesSubscription.unsubscribe();\r\n\r\n                  this.topLoaderService.hiddeLoader();\r\n\r\n                  // If there is no franchise created the user is sent to the onboarding.\r\n                  if (franchisesResponse.franchises.length === 0) {\r\n                    this.router.navigate(['/onboarding']);\r\n                  } else {\r\n                    // If there is at least one franchise created we save the id of the first one on localStorage\r\n                    // so it will be considered as the selected one.\r\n                    localStorage.setItem(\r\n                      'franchiseId',\r\n                      JSON.stringify(franchisesResponse.franchises[0].id)\r\n                    );\r\n\r\n                    this.restaurantsSubscription = this.restaurantService\r\n                      .getRestaurants(franchisesResponse.franchises[0].id)\r\n                      .subscribe((responseRestaurant: ResponseRestaurant) => {\r\n                        this.restaurantsSubscription.unsubscribe();\r\n\r\n                        // If there is no restaurant created on the franchise we send the user to the onboarding\r\n                        if (\r\n                          franchisesResponse.franchises[0].restaurants\r\n                            .length === 0\r\n                        ) {\r\n                          if (hasUserAdminPrivileges) {\r\n                            this.router.navigate(['/onboarding']);\r\n                          } else {\r\n                            // If the user isn't an admin and has no restaurants assigned we send an error.\r\n                            firebase.auth().signOut();\r\n                            localStorage.clear();\r\n                            this.showError(\r\n                              'El personal no está asignado en alguna sucursal'\r\n                            );\r\n                            this.topLoaderService.hiddeLoader();\r\n                          }\r\n                        } else {\r\n                          // If there is at least one restaurant created we save the id of the first one on localStorage\r\n                          // so it will be considered as the selected one.\r\n                          localStorage.setItem(\r\n                            'restaurantId',\r\n                            JSON.stringify(\r\n                              franchisesResponse.franchises[0].restaurants[0].id\r\n                            )\r\n                          );\r\n\r\n                          // Depending on the user's privileges we send it to the specific layout\r\n                          if (hasUserAdminPrivileges) {\r\n                            this.router.navigate(['/admin']);\r\n                          } else if (hasUserStaffPrivileges) {\r\n                            this.router.navigate(['/staff']);\r\n                          } else {\r\n                            // If the user isn't admin neither staff we finish its session.\r\n                            firebase.auth().signOut();\r\n                            this.topLoaderService.hiddeLoader();\r\n                            this.showError('auth/not-an-admin');\r\n                          }\r\n                        }\r\n                      });\r\n                  }\r\n                });\r\n            } else {\r\n              // If the user doesn't have privileges the firebase session is signed out and an error alert is showed.\r\n              firebase.auth().signOut();\r\n              this.topLoaderService.hiddeLoader();\r\n              this.showError('auth/not-an-admin');\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            this.showError(error.code);\r\n          });\r\n      })\r\n      .catch((error: any) => {\r\n        this.topLoaderService.hiddeLoader();\r\n        this.showError(error.code);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Shows a snackbar with an error message.\r\n   * @param errorCode Message to show at the snackbar.\r\n   */\r\n  private showError(errorCode: string): void {\r\n    this.dialog.open(this.loginErrorPipe.transform(errorCode), 'Entendido', {\r\n      duration: 15000,\r\n    });\r\n  }\r\n}\r\n","<section id=\"login\" class=\"inl\">\r\n  <div class=\"login-container\">\r\n    <img src=\"assets/images/logos/logo.svg\" alt=\"Logo\" />\r\n    <p class=\"h1\">Inicia sesión</p>\r\n    <p>\r\n      Inicia sesión y comienza a administrar tu negocio con<br />A Plato Puesto\r\n    </p>\r\n    <form (ngSubmit)=\"login()\" [formGroup]=\"loginForm\">\r\n      <mat-form-field>\r\n        <mat-label>Correo electrónico</mat-label>\r\n        <input matInput formControlName=\"email\" />\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <mat-label>Contraseña</mat-label>\r\n        <input matInput formControlName=\"password\" type=\"password\" />\r\n      </mat-form-field>\r\n      <div class=\"inl\">\r\n        <a routerLink=\"/recover-password\">\r\n          <span class=\"clr-orange\">Olvidé mi contraseña</span>\r\n        </a>\r\n        <button class=\"btns\" type=\"submit\">\r\n          <span>Iniciar sesión</span>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  <div class=\"version\">\r\n    <p>Ver. {{ version }}</p>\r\n  </div>\r\n</section>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule {}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '@environments/environment';\r\nimport { map } from 'rxjs/operators';\r\nimport {\r\n  ResponseStyles,\r\n  ResponsePriceRanges,\r\n  Franchise,\r\n  ResponseFranchises,\r\n  ResponseManagers\r\n} from '@models';\r\nimport { IFranchise } from '@interfaces';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FranchiseService {\r\n  public franchise = new BehaviorSubject<Franchise>(null);\r\n  public currentFranchise = this.franchise.asObservable();\r\n\r\n  constructor(public http: HttpClient) {}\r\n\r\n  public setFranchise(franchise: Franchise): void {\r\n    this.franchise.next(franchise);\r\n  }\r\n\r\n  public createFranchise(franchise: Franchise): Observable<Franchise> {\r\n    return this.http.post<Franchise>(environment.FRANCHISE, franchise);\r\n  }\r\n\r\n  public getStyles(): Observable<ResponseStyles> {\r\n    return this.http.get<ResponseStyles>(environment.STYLES);\r\n  }\r\n\r\n  public getFranchiseDetails(id: number) {\r\n    return this.http.get(`${environment.FRANCHISE}/${id}/detail`);\r\n  }\r\n\r\n  public getFranchiseManagers(\r\n    franchiseId: number\r\n  ): Observable<ResponseManagers> {\r\n    const url = environment.FRANCHISE_MANAGERS.replace(\r\n      '{franchiseId}',\r\n      franchiseId.toString()\r\n    );\r\n    return this.http.get<ResponseManagers>(url);\r\n  }\r\n\r\n  public updateFranchise(\r\n    id: number,\r\n    payload: Franchise\r\n  ): Observable<IFranchise> {\r\n    return this.http.put<IFranchise>(`${environment.FRANCHISE}/${id}`, payload);\r\n  }\r\n\r\n  public getPriceRanges(): Observable<ResponsePriceRanges> {\r\n    return this.http.get<ResponsePriceRanges>(environment.PRICE_RANGES);\r\n  }\r\n\r\n  public getFranchises(): Observable<ResponseFranchises> {\r\n    return this.http\r\n      .get<ResponseFranchises>(environment.FRANCHISES)\r\n      .pipe(map((response) => response as ResponseFranchises));\r\n  }\r\n\r\n  public getFranchisesAsPromise(): Promise<ResponseFranchises> {\r\n    return this.http\r\n      .get<ResponseFranchises>(environment.FRANCHISES)\r\n      .toPromise();\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '@environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  Amenities,\r\n  AmenitiesToSave,\r\n  Extra,\r\n  ExtrasToSave,\r\n  ResponseDetail,\r\n  ResponseExtras,\r\n  Restaurant,\r\n  WorkingHoursResponse\r\n} from '@models';\r\nimport { ResponseRestaurant } from '@models';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { ResponseUsers } from '@models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RestaurantService {\r\n  public restaurant = new BehaviorSubject<Restaurant>(null);\r\n  public currentRestaurant = this.restaurant.asObservable();\r\n\r\n  constructor(\r\n    public http: HttpClient,\r\n    ) {}\r\n\r\n  setRestaurant(restaurant: Restaurant): void {\r\n    this.restaurant.next(restaurant);\r\n  }\r\n\r\n  public getRestaurants(franchiseId: number): Observable<ResponseRestaurant> {\r\n    const url = environment.FRANCHISE_RESTAURANTS.replace(\r\n      '{franchiseId}',\r\n      franchiseId.toString()\r\n    );\r\n    return this.http.get<ResponseRestaurant>(url);\r\n  }\r\n\r\n  public getRestaurantsAsPromise(\r\n    franchiseId: number\r\n  ): Promise<ResponseRestaurant> {\r\n    const url = environment.FRANCHISE_RESTAURANTS.replace(\r\n      '{franchiseId}',\r\n      franchiseId.toString()\r\n    );\r\n    return this.http.get<ResponseRestaurant>(url).toPromise();\r\n  }\r\n\r\n  getRestaurantDetail(restaurantId: number): Observable<ResponseDetail> {\r\n    const url = environment.RESTAURANT_DETAIL.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n    return this.http.get<ResponseDetail>(url);\r\n  }\r\n\r\n  updateRestaurantDetails(restaurantId: string, payload: any) {\r\n    const url = environment.RESTAURANT.replace('{restaurantId}', restaurantId);\r\n    return this.http.put(`${url}`, payload);\r\n  }\r\n\r\n  public getRestaurantUsers(restaurantId: number): Observable<ResponseUsers> {\r\n    const url = environment.RESTAURANT_USERS.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n    return this.http.get<ResponseUsers>(url);\r\n  }\r\n\r\n  public createRestaurant(\r\n    restaurant: Restaurant,\r\n    franchiseId: number\r\n  ): Observable<Restaurant> {\r\n    const url = environment.FRANCHISE_RESTAURANT.replace(\r\n      '{franchiseId}',\r\n      franchiseId.toString()\r\n    );\r\n    return this.http.post<Restaurant>(url, restaurant);\r\n  }\r\n\r\n  public updateRestaurant(\r\n    restaurant: Restaurant,\r\n    restaurantId: number\r\n  ): Observable<Restaurant> {\r\n    const url = environment.RESTAURANT.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n    return this.http.put<Restaurant>(url, restaurant);\r\n  }\r\n\r\n  public deleteRestaurant(restaurantId: number): Observable<Restaurant> {\r\n    const url = environment.RESTAURANT.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n    return this.http.delete<Restaurant>(url);\r\n  }\r\n\r\n  public createExtras(\r\n    extras: ExtrasToSave,\r\n    restaurantId: number\r\n  ): Observable<ResponseExtras> {\r\n    const url = environment.RESTAURANT_EXTRAS.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n    return this.http.post<ResponseExtras>(url, extras);\r\n  }\r\n\r\n  deleteExtraAmenity(restaurantId: number, extraId: number): Observable<any> {\r\n    const url = environment.RESTAURANT_EXTRA.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n    return this.http.delete<void>(`${url}/${extraId}`);\r\n  }\r\n\r\n  public setRestaurantAmenities(\r\n    amenities: AmenitiesToSave,\r\n    restaurantId: number\r\n  ): Observable<void> {\r\n    const url = environment.RESTAURANT_AMENITIES.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n    return this.http.put<void>(url, amenities);\r\n  }\r\n\r\n  public setRestaurantGallery(\r\n    gallery: FormData,\r\n    restaurantId: number\r\n  ): Observable<void> {\r\n    const url = environment.RESTAURANT_MEDIA.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n    return this.http.put<void>(url, gallery);\r\n  }\r\n\r\n  public removeRestaurantGalleryImage(\r\n    restaurantId: number,\r\n    imageId: number\r\n  ): Observable<any> {\r\n    const url = environment.RESTAURANT_IMAGE.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    ).replace('{imageId}', imageId.toString());\r\n    return this.http.delete<void>(url);\r\n  }\r\n\r\n  public setRestaurantSchedules(\r\n    schedules: WorkingHoursResponse,\r\n    restaurantId: number\r\n  ): Observable<void> {\r\n    const url = environment.RESTAURANT_WORKING_HOURS.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n    return this.http.put<void>(url, schedules);\r\n  }\r\n\r\n  public getAmenities(): Observable<Amenities> {\r\n    return this.http.get<Amenities>(environment.AMENITIES);\r\n  }\r\n\r\n  public createExtra(extra: Extra, restaurantId: number): Observable<Extra> {\r\n    const url = environment.RESTAURANT_EXTRA.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    );\r\n    return this.http.post<Extra>(url, extra);\r\n  }\r\n}\r\n"]}