{"version":3,"sources":["webpack:///src/app/pages/layout/menu/menu.component.ts","webpack:///src/app/shared/pipes/cents-currency/cents-currency.module.ts","webpack:///node_modules/@angular/material/fesm2015/grid-list.js","webpack:///src/app/pages/layout/menu/add-modifier/add-modifier.component.html","webpack:///src/app/pages/layout/menu/menu-onboarding/menu-onboarding.component.ts","webpack:///src/app/pages/layout/menu/menu.component.html","webpack:///src/app/pages/layout/menu/menu-onboarding/menu-onboarding.component.html","webpack:///src/app/pages/layout/menu/menu-routing.module.ts","webpack:///src/app/pages/layout/menu/create-modifier/create-modifier.component.html","webpack:///src/app/pages/layout/menu/delete-menu/delete-menu.component.html","webpack:///node_modules/@angular/material/fesm2015/tree.js","webpack:///src/app/pages/layout/menu/new-menu/new-menu.component.ts","webpack:///src/app/pages/layout/menu/create-modifier/create-modifier.component.ts","webpack:///src/app/shared/pipes/cents-currency/cents-currency.pipe.ts","webpack:///src/app/pages/layout/menu/new-category/new-category.component.html","webpack:///src/app/pages/layout/menu/delete-menu/delete-menu.component.ts","webpack:///node_modules/@angular/material/menu/index.d.ts._MatMenu.html","webpack:///node_modules/@angular/material/menu/index.d.ts.MatMenuItem.html","webpack:///src/app/pages/layout/menu/new-category/new-category.component.ts","webpack:///src/app/pages/layout/menu/menu.module.ts","webpack:///src/app/pages/layout/layout.module.ts","webpack:///src/app/pages/layout/layout.component.ts","webpack:///src/app/pages/layout/layout.component.html","webpack:///node_modules/rxjs/_esm2015/internal/operators/toArray.js","webpack:///node_modules/ngx-owl-carousel-o/fesm2015/ngx-owl-carousel-o.js","webpack:///node_modules/ngx-owl-carousel-o/ngx-owl-carousel-o.d.ts.CarouselComponent.html","webpack:///node_modules/ngx-owl-carousel-o/ngx-owl-carousel-o.d.ts.Éµx.html","webpack:///src/app/pages/layout/menu/new-menu/new-menu.component.html","webpack:///src/app/pages/layout/layout-routing.module.ts","webpack:///src/app/pages/layout/menu/add-modifier/add-modifier.component.ts","webpack:///node_modules/@angular/cdk/fesm2015/tree.js"],"names":["MenuComponent","menuService","dialog","snackBar","restaurantService","formBuilder","create","urlTemplate","loaded","uploadMenu","nameFile","foodDishPreview","enlistedModifiers","formFoodDish","name","required","minLength","maxLength","price_in_cents","min","pattern","iva","max","description","image","modifiers","formModifier","question","multipleChoice","modifiersInForm","this","array","currentRestaurantSubscription","EMPTY","getMenuSubscription","uploadZipSubscription","newMenuModalSubscription","duplicateMenuSubscription","duplicateMatrixMenuSubscription","deleteMenuModalSubscription","orderMenuSubscription","getCategorySubscription","newCategoryModalSubscription","duplicateCategorySubscription","deleteCategorySubscription","orderCategorySubscription","getDishesSubscription","editDishesSubscription","createDishesSubscription","duplicateDishesSubscription","deleteDishesSubscrtiption","orderDishesSubscription","getModifierSubscription","createModifierModalSubscription","addModifierModalSubscription","createModifierSubscription","deleteModifierLocalSubscription","editModfierSubscription","currentRestaurant","subscribe","restaurant","restauranteSelected","getMenu","id","response","menuData","menus","length","getTemplate","responseTemplate","template","getModifier","unsubscribe","menuExpanded","e","file","dataTransfer","files","target","size","open","duration","setValue","zipToSave","FormData","append","uploadZip","ngOnInit","dataDuplicate","openModal","panelClass","data","restaurantId","editMenu","maxHeight","afterClosed","reload","updateMenu","duplicateMenu","renponse","duplicateMatrizMenu","result","deleteMenu","i","menuExpandedId","event","previousIndex","currentIndex","positions","push","position","orderMenu","menuId","category","getCategory","changeForm","categories","categorySelected","categoryItem","menuID","idCategory","duplicateCategory","categoryId","deleteCategory","orderCategory","foodDishes","getDishes","dishes","infoDish","orderInfoDish","infoDishFormData","modifiersId","map","modifier","toString","dishSelected","editDishes","invalid","createDishes","value","dishId","duplicateDishes","deleteDishes","changedataFoodDish","get","reader","FileReader","onload","eImage","img","Image","src","width","height","readAsDataURL","FoodDish","reset","group_modifiers","markAsPristine","orderDishes","modifiersSelected","patchValue","optional_ask","multiple_option","min_options_per_user","max_options_per_user","removeAt","modifierElement","addModifierItem","Number","toFixed","modifierDialog","modifierId","createModifier","splice","form","controlName","operation","actualValue","newValue","mod","deleteModifierLocal","addModifiers","priceToAssign","group","index","valid","Array","item","Math","round","editModifier","selectModifier","controls","CentsCurrencyModule","MatGridListModule","MenuOnboardingComponent","dialogRef","close","MenuRoutingModule","MatTreeModule","NewMenuComponent","createMenuForm","from","to","icon","customOptions","dots","navSpeed","items","navText","nav","edit","iconsSubscription","editSubscription","createSubscription","getIcons","closeModal","icons","markAsTouched","createMenu","iconControl","touched","hasError","CreateModifierComponent","submit","setModifierValues","addModifier","optionalAskValue","multipleOptionValue","CentsCurrencyPipe","currencyPipe","cents","transform","DeleteMenuComponent","status","NewCategoryComponent","editCategory","createCategory","MenuModule","LayoutModule","fb","franchiseService","restaurantSelection","version","restaurantSubscription","Subscription","franchiseSubscription","restaurantsSubscription","initRestaurantListener","currentFranchise","franchise","getRestaurants","pipe","restaurants","pRestaurant","localStorage","setItem","JSON","stringify","location","toArrayReducer","arr","eventManager","resizeSubject","Subject","addGlobalEventListener","onResize","bind","onLoaded","next","windowWidth","asObservable","OwlCarouselOConfig","skip_validateItems","loop","center","rewind","mouseDrag","touchDrag","pullDrag","freeDrag","margin","stagePadding","merge","mergeFit","autoWidth","startPosition","rtl","smartSpeed","fluidSpeed","dragEndSpeed","responsive","responsiveRefreshRate","slideBy","dotsEach","dotsData","dotsSpeed","autoplay","autoplayTimeout","autoplayHoverPause","autoplaySpeed","lazyLoad","lazyLoadEager","slideTransition","animateOut","animateIn","autoHeight","URLhashListener","OwlOptionsMockedTypes","errorHandler","rest","console","log","error","handleError","warn","Type","Width","logger","_viewSettingsShipper$","_initializedCarousel$","_changeSettingsCarousel$","_changedSettingsCarousel$","_translateCarousel$","_translatedCarousel$","_resizeCarousel$","_resizedCarousel$","_refreshCarousel$","_refreshedCarousel$","_dragCarousel$","_draggedCarousel$","settings","owlDOMData","isResponsive","isRefreshed","isLoaded","isLoading","isMouseDragable","isGrab","isTouchDragable","stageData","transition","paddingL","paddingR","_items","_widths","_supress","_plugins","_current","_clones","_mergers","_speed","_coordinates","_breakpoint","clonedIdPrefix","_options","_invalidated","_states","current","tags","initializing","animating","dragging","_pipe","filter","run","cache","relative","css","slidesData","forEach","slide","marginL","marginR","grid","widths","iterator","clones","view","ceil","prepend","repeat","normalize","Object","assign","unshift","isActive","isCloned","concat","coordinates","previous","padding","abs","findIndex","minimum","maximum","animate","begin","end","inner","outer","n","matches","element","_op","isCentered","options","configOptions","checkedOptions","_validateOptions","mockedTypes","setRightOption","type","key","hasOwnProperty","_isNumeric","_validateItems","_isNumberOrBoolean","_isNumberOrString","_isStringOrBoolean","isArray","isString","_width","carouselWidth","slides","setCarouselWidth","setItems","_defineSlidesData","setOptions","setOptionsForViewport","_trigger","property","invalidate","viewport","overwrites","match","keys","mergers","dataMerge","enter","refresh","sendChanges","leave","navData","filteredPipe","all","classes","setCurSlideClasses","is","dimension","Default","Inner","Outer","_optionsLogic","update","curWidth","transformArr","stage","x","replace","split","y","speed","dragData","pull","delta","difference","pointer","start","dragObj","clickAttacher","currentSlideI","direction","closest","Date","getTime","time","coordinate","onTransitionEnd","state","part","_suppress","_release","m","reciprocalItemsWidth","elementWidth","slice","odd","even","v","multiplier","newPosition","factor","revert","distance","delayForLoop","setTimeout","_duration","content","loadMap","Map","load","set","tplRef","hashFragment","dataHash","currentClasses","isAnimated","isDefAnimatedIn","isDefAnimatedOut","isCustomAnimatedIn","isCustomAnimatedOut","a","o","b","namespace","stateName","object","State","tag","indexOf","events","originalEvent","window","touches","changedTouches","pageX","pageY","clientX","clientY","number","isNaN","parseFloat","first","second","carouselService","_initialized","_pages","_navData","disabled","prev","htmlText","_dotsData","spyDataStreams","navSubscription","initializedCarousel$","getInitializedState","tap","initialize","_updateNavPages","draw","changedSettings$","getChangedState","refreshedCarousel$","getRefreshedState","navMerge$","j","lower","upper","pages","active","innerContent","dotContent","showInnerContent","startI","_updateNavButtons","_updateDots","curActiveDotI","page","pop","successor","_getPosition","standard","dotId","dot","WINDOW","WindowRef","Error","BrowserWindowRef","windowFactory","browserWindowRef","platformId","nativeWindow","func","clearTimeout","DOCUMENT","DocumentRef","BrowserDocumentRef","document","documentFactory","browserDocumentRef","nativeDocument","hidden","visibilityState","winRef","docRef","_timeout","_paused","autoplaySubscription","play","_handleChangeObservable","resized$","getResizedState","stop","autoplayMerge$","timeout","_setAutoPlayInterval","_isArtificialAutoplayTimeout","_getNextTimeout","of","switchMap","getTranslatedState","pause","_playAfterTranslated","lazyLoadSubscription","isLazyLoad","changeSettings$","getChangeState","resizedCarousel$","lazyLoadMerge$","_defineLazyLoadSlides","_load","swapping","animateSubscription","dragCarousel$","getDragState","draggedCarousel$","getDraggedState","translatedCarousel$","dragTranslatedMerge$","translateCarousel$","getTranslateState","_swap","animateMerge$","left","incoming","outgoing","autoHeightSubscription","heightState","autoHeight$","route","router","fragment","take","navigate","commands","extras","hashSubscription","listenToRoute","newCurSlide","newCurFragment","currentHashFragment","relativeTo","hashFragment$","count","skip","nextId","CarouselSlideDirective","_dataMerge","isNumeric","el","resizeService","navigationService","autoplayService","lazyLoadService","animateService","autoHeightService","hashService","changeDetectorRef","translated","change","changed","initialized","carouselLoaded","ev","carouselWindowWidth","nativeElement","querySelector","clientWidth","toArray","setup","_winResizeWatcher","_slidesChangesSubscription","changes","resizeSubscription","_allObservSubscription","_viewCurSettings$","getViewCurSettings","markForCheck","gatherTranslatedData","emit","slidesOutputData","_changeCarousel$","_changedCarousel$","changedPosition","reduce","_draggingCarousel$","anim","_carouselMerge$","onResize$","delay","moveByDot","toSlideById","activeSlides","startPausing","startPlayingMouseLeave","startPlayingTouchEnd","zone","renderer","_drag","moving","_oneDragMove$","bindOneMouseTouchMove","_oneMouseTouchMove","bindOnDragMove","_onDragMove","bindOnDragEnd","_onDragEnd","_oneClickHandler","listenerOneClick","listen","owlDraggable","_onDragStart","_oneMoveSubsription","_sendChanges","which","_prepareDragging","_pointer","listenerMouseUp","listenerTouchEnd","runOutsideAngular","listenerOneMouseMove","listenerOneTouchMove","_difference","listenerATag","_is","blockClickAnchorInDragging","listenerMouseMove","listenerTouchMove","preventDefault","_enterDragging","HTMLAnchorElement","parentElement","stageOrExit","defineNewCoordsDrag","_animate","setStyle","children","_finishDragging","prepareDragging","finishDragging","firstC","specificState","enterDragging","clear","CarouselModule","then","LayoutRoutingModule","AddModifierComponent","modifiersGroups","modifierForm","modifierGroup","modifierSubscription","CdkTreeNodeOutletContext","$implicit","CdkTreeNodeDef","getTreeControlFunctionsMissingError","CdkTree","_differs","_changeDetectorRef","_onDestroy","_levels","viewChange","MAX_VALUE","_dataDiffer","find","trackBy","treeControl","_nodeOutlet","viewContainer","complete","_dataSource","disconnect","_dataSubscription","defaultNodeDefs","_nodeDefs","def","when","_defaultNodeDef","dataSource","_observeRenderChanges","dataStream","connect","renderNodeChanges","parentData","dataDiffer","diff","forEachOperation","adjustedPreviousIndex","insertNode","remove","delete","move","detectChanges","nodeDef","nodeData","node","_getNodeDef","context","level","getLevel","has","createEmbeddedView","CdkTreeNode","mostRecentTreeNode","_switchDataSource","_elementRef","_tree","_destroyed","_dataChanges","role","focus","isExpandable","_data","getChildren","childrenNodes","_setRoleFromChildren","_setRoleFromData","isExpanded","CdkNestedTreeNode","super","updateChildrenNodes","nodeOutlet","_clear","outlet","_getNodeOutlet","_children","outlets","_node","cssUnitPattern","CdkTreeNodePadding","_treeNode","_renderer","_element","_dir","indentUnits","_indent","_setPadding","nodeLevel","_level","forceChange","_paddingIndent","_currentPadding","paddingProp","resetProp","indent","units","parts","CdkTreeNodeToggle","_recursive","recursive","toggleDescendants","toggle","stopPropagation","c","CdkTreeModule"],"mappings":"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","file":"x","sourcesContent":["import { MenuOnboardingComponent } from './menu-onboarding/menu-onboarding.component';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n  FormBuilder,\r\n  FormArray,\r\n} from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { NewMenuComponent } from './new-menu/new-menu.component';\r\nimport { NewCategoryComponent } from './new-category/new-category.component';\r\nimport { Modifiers, Menu, FoodDishes, Restaurant } from '@models';\r\nimport { MenuService, RestaurantService } from '@services';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { DeleteMenuComponent } from './delete-menu/delete-menu.component';\r\nimport { CreateModifierComponent } from './create-modifier/create-modifier.component';\r\nimport { AddModifierComponent } from './add-modifier/add-modifier.component';\r\nimport { Subscription } from 'rxjs';\r\n@Component({\r\n  selector: 'app-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.scss'],\r\n  preserveWhitespaces: true,\r\n})\r\nexport class MenuComponent implements OnInit, OnDestroy {\r\n  public create = 'menu';\r\n  public urlTemplate = '';\r\n  public loaded = false;\r\n  public uploadMenu = new FormControl('');\r\n  public restauranteSelected: Restaurant;\r\n  public menuData: Array<Menu>;\r\n  public menuExpandedId: number;\r\n  public categorySelected: number;\r\n  public dishSelected: number;\r\n  public nameFile = '';\r\n  public foodDishPreview = '';\r\n  public enlistedModifiers: Array<Modifiers> = [];\r\n  public formFoodDish = new FormGroup({\r\n    name: new FormControl('', [\r\n      Validators.required,\r\n      Validators.minLength(3),\r\n      Validators.maxLength(100),\r\n    ]),\r\n    price_in_cents: new FormControl('', [\r\n      Validators.required,\r\n      Validators.min(1),\r\n      Validators.pattern(/^[+]?([0-9]{0,})*[.]?([0-9]{0,2})?$/),\r\n    ]),\r\n    iva: new FormControl('', [\r\n      Validators.required,\r\n      Validators.min(3),\r\n      Validators.max(100),\r\n      Validators.pattern(/^[0-9]+$/),\r\n    ]),\r\n    description: new FormControl('', [\r\n      Validators.required,\r\n      Validators.minLength(4),\r\n      Validators.maxLength(150),\r\n    ]),\r\n    image: new FormControl(''),\r\n  });\r\n  public modifiersSelected: Modifiers;\r\n  public modifiers: Modifiers[] = [];\r\n  public formModifier = new FormGroup({\r\n    name: new FormControl('', Validators.required),\r\n    question: new FormControl('', Validators.required),\r\n    multipleChoice: new FormControl('', Validators.required),\r\n    max: new FormControl(1, [Validators.required, Validators.min(1)]),\r\n    min: new FormControl(1, [Validators.required, Validators.min(1)]),\r\n    modifiersInForm: this.formBuilder.array([]),\r\n  });\r\n  public modifiersInForm: FormArray;\r\n  private currentRestaurantSubscription = Subscription.EMPTY;\r\n  private getMenuSubscription = Subscription.EMPTY;\r\n  private uploadZipSubscription = Subscription.EMPTY;\r\n  private newMenuModalSubscription = Subscription.EMPTY;\r\n  private duplicateMenuSubscription = Subscription.EMPTY;\r\n  private duplicateMatrixMenuSubscription = Subscription.EMPTY;\r\n  private deleteMenuModalSubscription = Subscription.EMPTY;\r\n  private orderMenuSubscription = Subscription.EMPTY;\r\n  private getCategorySubscription = Subscription.EMPTY;\r\n  private newCategoryModalSubscription = Subscription.EMPTY;\r\n  private duplicateCategorySubscription = Subscription.EMPTY;\r\n  private deleteCategorySubscription = Subscription.EMPTY;\r\n  private orderCategorySubscription = Subscription.EMPTY;\r\n  private getDishesSubscription = Subscription.EMPTY;\r\n  private editDishesSubscription = Subscription.EMPTY;\r\n  private createDishesSubscription = Subscription.EMPTY;\r\n  private duplicateDishesSubscription = Subscription.EMPTY;\r\n  private deleteDishesSubscrtiption = Subscription.EMPTY;\r\n  private orderDishesSubscription = Subscription.EMPTY;\r\n  private getModifierSubscription = Subscription.EMPTY;\r\n  private createModifierModalSubscription = Subscription.EMPTY;\r\n  private addModifierModalSubscription = Subscription.EMPTY;\r\n  private createModifierSubscription = Subscription.EMPTY;\r\n  private deleteModifierLocalSubscription = Subscription.EMPTY;\r\n  private editModfierSubscription = Subscription.EMPTY;\r\n  constructor(\r\n    private menuService: MenuService,\r\n    public dialog: MatDialog,\r\n    private snackBar: MatSnackBar,\r\n    private restaurantService: RestaurantService,\r\n    private formBuilder: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.currentRestaurantSubscription = this.restaurantService.currentRestaurant.subscribe(\r\n      (restaurant: Restaurant) => {\r\n        this.restauranteSelected = restaurant;\r\n        this.getMenuSubscription = this.menuService\r\n          .getMenu(this.restauranteSelected.id)\r\n          .subscribe((response) => {\r\n            this.menuData = response.menus;\r\n            if (this.menuData.length === 0) {\r\n              this.menuService.getTemplate().subscribe((responseTemplate) => {\r\n                this.urlTemplate = responseTemplate.template;\r\n              });\r\n            }\r\n            this.loaded = true;\r\n            this.getModifier();\r\n          });\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.currentRestaurantSubscription.unsubscribe();\r\n    this.getMenuSubscription.unsubscribe();\r\n    this.uploadZipSubscription.unsubscribe();\r\n    this.newMenuModalSubscription.unsubscribe();\r\n    this.duplicateMenuSubscription.unsubscribe();\r\n    this.duplicateMatrixMenuSubscription.unsubscribe();\r\n    this.deleteMenuModalSubscription.unsubscribe();\r\n    this.orderMenuSubscription.unsubscribe();\r\n    this.getCategorySubscription.unsubscribe();\r\n    this.newCategoryModalSubscription.unsubscribe();\r\n    this.duplicateCategorySubscription.unsubscribe();\r\n    this.deleteCategorySubscription.unsubscribe();\r\n    this.orderCategorySubscription.unsubscribe();\r\n    this.getDishesSubscription.unsubscribe();\r\n    this.editDishesSubscription.unsubscribe();\r\n    this.createDishesSubscription.unsubscribe();\r\n    this.duplicateDishesSubscription.unsubscribe();\r\n    this.deleteDishesSubscrtiption.unsubscribe();\r\n    this.orderDishesSubscription.unsubscribe();\r\n    this.getModifierSubscription.unsubscribe();\r\n    this.createModifierModalSubscription.unsubscribe();\r\n    this.addModifierModalSubscription.unsubscribe();\r\n    this.createModifierSubscription.unsubscribe();\r\n    this.deleteModifierLocalSubscription.unsubscribe();\r\n    this.editModfierSubscription.unsubscribe();\r\n  }\r\n\r\n  private updateMenu() {\r\n    this.getMenuSubscription = this.menuService\r\n      .getMenu(this.restauranteSelected.id)\r\n      .subscribe((response) => {\r\n        this.menuData = response.menus;\r\n        this.menuExpanded(-1);\r\n      });\r\n  }\r\n  public changeForm(id: string) {\r\n    this.create = id;\r\n  }\r\n  // Menu vacÃ­o\r\n  public uploadCsv(e: any) {\r\n    const file = e.dataTransfer ? e.dataTransfer.files[0] : e.target.files[0];\r\n    const fileSize = file.size / 1024;\r\n    if (fileSize > 35840) {\r\n      this.snackBar.open('El archivo excede 35MB', 'Entendido', {\r\n        duration: 15000,\r\n      });\r\n      this.nameFile = '';\r\n      this.uploadMenu.setValue('');\r\n      return;\r\n    } else {\r\n      const zipToSave = new FormData();\r\n      zipToSave.append('templateZip', file);\r\n      this.uploadZipSubscription = this.menuService\r\n        .uploadZip(zipToSave, this.restauranteSelected.id)\r\n        .subscribe(() => {\r\n          this.nameFile = file.name;\r\n          this.snackBar.open('Archivo subido con Ã©xito', 'Entendido', {\r\n            duration: 15000,\r\n          });\r\n          this.ngOnInit();\r\n        });\r\n    }\r\n  }\r\n  // Menu\r\n  public createMenu(dataDuplicate: any): void {\r\n    const openModal = this.dialog.open(NewMenuComponent, {\r\n      panelClass: 'dialog-exit',\r\n      data: {\r\n        restaurantId: this.restauranteSelected.id,\r\n        editMenu: dataDuplicate,\r\n      },\r\n      maxHeight: '85vh',\r\n    });\r\n    this.newMenuModalSubscription = openModal\r\n      .afterClosed()\r\n      .subscribe((reload: boolean) => {\r\n        if (reload) {\r\n          this.updateMenu();\r\n        }\r\n      });\r\n  }\r\n\r\n  public openInstructionsModal(): void {\r\n    this.dialog.open(MenuOnboardingComponent, {\r\n      panelClass: 'dialog-exit',\r\n    });\r\n  }\r\n\r\n  public duplicateMenu(id: number) {\r\n    this.duplicateMenuSubscription = this.menuService\r\n      .duplicateMenu(this.menuData[id].id)\r\n      .subscribe((renponse) => {\r\n        this.updateMenu();\r\n      });\r\n  }\r\n  public duplicateMenuMatriz() {\r\n    this.duplicateMatrixMenuSubscription = this.menuService\r\n      .duplicateMatrizMenu(this.restauranteSelected.id)\r\n      .subscribe((renponse) => {\r\n        this.updateMenu();\r\n      });\r\n  }\r\n  public deleteMenu(id: number) {\r\n    const dialog = this.dialog.open(DeleteMenuComponent, {\r\n      panelClass: 'dialog-exit',\r\n    });\r\n    this.deleteMenuModalSubscription = dialog\r\n      .afterClosed()\r\n      .subscribe((result) => {\r\n        if (result) {\r\n          this.menuService\r\n            .deleteMenu(this.menuData[id].id)\r\n            .subscribe((response) => {\r\n              this.updateMenu();\r\n            });\r\n        }\r\n      });\r\n  }\r\n  public menuExpanded(i: number) {\r\n    this.menuExpandedId = i;\r\n  }\r\n  public drop(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.menuData, event.previousIndex, event.currentIndex);\r\n    const positions: Array<any> = [];\r\n    for (let i = 0; i < this.menuData.length; i++) {\r\n      positions.push({\r\n        id: this.menuData[i].id,\r\n        position: i + 1,\r\n      });\r\n    }\r\n    this.orderMenuSubscription = this.menuService\r\n      .orderMenu(this.restauranteSelected.id, { positions })\r\n      .subscribe((response) => {\r\n        this.updateMenu();\r\n      });\r\n  }\r\n  // Categoria\r\n  public selectMenus(menuId: number) {\r\n    if (!this.menuData[menuId].category) {\r\n      this.getCategory(menuId);\r\n    }\r\n    this.changeForm('menu');\r\n  }\r\n  private getCategory(menuId: number) {\r\n    this.getCategorySubscription = this.menuService\r\n      .getCategory(this.menuData[menuId].id)\r\n      .subscribe((response) => {\r\n        this.menuData[menuId].category = response.categories;\r\n        this.categorySelected = -1;\r\n      });\r\n  }\r\n  public createCategory(id: number, categoryItem?: any) {\r\n    const dialog = this.dialog.open(NewCategoryComponent, {\r\n      panelClass: 'dialog-exit',\r\n      data: {\r\n        menuID: this.menuData[id].id,\r\n        category: categoryItem,\r\n      },\r\n    });\r\n    this.newCategoryModalSubscription = dialog\r\n      .afterClosed()\r\n      .subscribe((result) => {\r\n        if (result) {\r\n          this.getCategory(id);\r\n        }\r\n      });\r\n  }\r\n  public duplicateCategory(idCategory: number) {\r\n    this.duplicateCategorySubscription = this.menuService\r\n      .duplicateCategory(idCategory)\r\n      .subscribe((data) => {\r\n        this.getCategory(this.menuExpandedId);\r\n      });\r\n  }\r\n  public deleteCategory(menuId: number, categoryId: number) {\r\n    this.deleteCategorySubscription = this.menuService\r\n      .deleteCategory(this.menuData[menuId].category[categoryId].id)\r\n      .subscribe((data) => {\r\n        this.getCategory(menuId);\r\n      });\r\n  }\r\n  public dropCategory(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(\r\n      this.menuData[this.menuExpandedId].category,\r\n      event.previousIndex,\r\n      event.currentIndex\r\n    );\r\n    const positions: Array<any> = [];\r\n    for (\r\n      let i = 0;\r\n      i < this.menuData[this.menuExpandedId].category.length;\r\n      i++\r\n    ) {\r\n      positions.push({\r\n        id: this.menuData[this.menuExpandedId].category[i].id,\r\n        position: i + 1,\r\n      });\r\n    }\r\n    this.orderCategorySubscription = this.menuService\r\n      .orderCategory(this.menuData[this.menuExpandedId].id, { positions })\r\n      .subscribe((response) => {\r\n        this.getCategory(this.menuExpandedId);\r\n      });\r\n  }\r\n  // Platillo\r\n  public selectCategory(categoryId: number) {\r\n    this.categorySelected = categoryId;\r\n    if (!this.menuData[this.menuExpandedId].category[categoryId].foodDishes) {\r\n      this.getDishes(categoryId);\r\n    }\r\n    this.changeForm('menu');\r\n  }\r\n  private getDishes(categoryId: number) {\r\n    this.getDishesSubscription = this.menuService\r\n      .getDishes(this.menuData[this.menuExpandedId].category[categoryId].id)\r\n      .subscribe((response) => {\r\n        this.menuData[this.menuExpandedId].category[categoryId].foodDishes =\r\n          response.dishes;\r\n      });\r\n  }\r\n  public createDish() {\r\n    const infoDish = this.orderInfoDish();\r\n    const infoDishFormData = new FormData();\r\n    infoDishFormData.append('name', infoDish.name);\r\n    infoDishFormData.append('price_in_cents', infoDish.price_in_cents);\r\n    infoDishFormData.append('iva', infoDish.iva);\r\n    infoDishFormData.append('description', infoDish.description);\r\n    infoDishFormData.append('image', infoDish.image);\r\n    const modifiersId = this.enlistedModifiers.map(\r\n      (modifier: Modifiers) => modifier.id\r\n    );\r\n    infoDishFormData.append('modifiers', '[' + modifiersId.toString() + ']');\r\n    if (\r\n      this.menuData[this.menuExpandedId].category[this.categorySelected]\r\n        .foodDishes[this.dishSelected]\r\n    ) {\r\n      this.editDishesSubscription = this.menuService\r\n        .editDishes(\r\n          infoDishFormData,\r\n          this.menuData[this.menuExpandedId].category[this.categorySelected]\r\n            .foodDishes[this.dishSelected].id\r\n        )\r\n        .subscribe((data) => {\r\n          this.dishSelected =\r\n            this.menuData[this.menuExpandedId].category[this.categorySelected]\r\n              .foodDishes.length - 1;\r\n          this.getDishes(this.categorySelected);\r\n        });\r\n    } else {\r\n      if (this.formFoodDish.invalid) {\r\n        return;\r\n      }\r\n      this.createDishesSubscription = this.menuService\r\n        .createDishes(\r\n          infoDishFormData,\r\n          this.menuData[this.menuExpandedId].category[this.categorySelected].id\r\n        )\r\n        .subscribe((data) => {\r\n          this.getDishes(this.categorySelected);\r\n        });\r\n    }\r\n  }\r\n  private orderInfoDish(): any {\r\n    const data = this.formFoodDish.value;\r\n    data.price_in_cents *= 100;\r\n    if (data.image === '') {\r\n      delete data.image;\r\n    }\r\n    return data;\r\n  }\r\n  public duplicateDish(dishId: number) {\r\n    this.duplicateDishesSubscription = this.menuService\r\n      .duplicateDishes(\r\n        this.menuData[this.menuExpandedId].category[this.categorySelected]\r\n          .foodDishes[dishId].id\r\n      )\r\n      .subscribe((data) => {\r\n        this.getDishes(this.categorySelected);\r\n      });\r\n  }\r\n  public deleteDish(dishId: number) {\r\n    this.deleteDishesSubscrtiption = this.menuService\r\n      .deleteDishes(\r\n        this.menuData[this.menuExpandedId].category[this.categorySelected]\r\n          .foodDishes[dishId].id\r\n      )\r\n      .subscribe((data) => {\r\n        this.getDishes(this.categorySelected);\r\n      });\r\n  }\r\n  public selectDish(dishId: number) {\r\n    this.dishSelected = dishId;\r\n    this.changedataFoodDish(\r\n      this.menuData[this.menuExpandedId].category[this.categorySelected]\r\n        .foodDishes[dishId]\r\n    );\r\n  }\r\n  public uploadImageFoodDish(e: any) {\r\n    const file = e.dataTransfer ? e.dataTransfer.files[0] : e.target.files[0];\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileSize = file.size / 1024;\r\n    if (fileSize > 1000) {\r\n      this.snackBar.open('El archivo excede 1MB', 'Entendido', {\r\n        duration: 15000,\r\n      });\r\n      this.formFoodDish.get('image').setValue('');\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = (eImage: any) => {\r\n      const img = new Image();\r\n      img.src = eImage.target.result;\r\n      img.onload = () => {\r\n        if (img.width > 600) {\r\n          this.snackBar.open('El archivo excede 600px de ancho', 'Entendido', {\r\n            duration: 15000,\r\n          });\r\n          return;\r\n        } else {\r\n          if (img.height > 400) {\r\n            this.snackBar.open('El archivo excede 400px de alto', 'Entendido', {\r\n              duration: 15000,\r\n            });\r\n            return;\r\n          }\r\n        }\r\n        this.foodDishPreview = eImage.target.result;\r\n        this.formFoodDish.get('image').setValue(file);\r\n      };\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n  public changedataFoodDish(FoodDish?: FoodDishes) {\r\n    this.formFoodDish.reset();\r\n    this.enlistedModifiers = FoodDish ? FoodDish.group_modifiers : [];\r\n    this.formFoodDish.get('name').setValue(FoodDish ? FoodDish.name : '');\r\n    this.formFoodDish.get('name').markAsPristine();\r\n    this.formFoodDish\r\n      .get('price_in_cents')\r\n      .setValue(FoodDish ? FoodDish.price_in_cents / 100 : '');\r\n    this.formFoodDish.get('price_in_cents').markAsPristine();\r\n    this.formFoodDish.get('iva').setValue(FoodDish ? FoodDish.iva : '');\r\n    this.formFoodDish.get('iva').markAsPristine();\r\n    this.formFoodDish\r\n      .get('description')\r\n      .setValue(FoodDish ? FoodDish.description : '');\r\n    this.formFoodDish.get('description').markAsPristine();\r\n    this.foodDishPreview = FoodDish ? FoodDish.image : null;\r\n    if (!FoodDish) {\r\n      this.dishSelected = -1;\r\n    }\r\n  }\r\n  public dropFoodDishes(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(\r\n      this.menuData[this.menuExpandedId].category[this.categorySelected]\r\n        .foodDishes,\r\n      event.previousIndex,\r\n      event.currentIndex\r\n    );\r\n    const positions: Array<any> = [];\r\n    for (\r\n      let i = 0;\r\n      i <\r\n      this.menuData[this.menuExpandedId].category[this.categorySelected]\r\n        .foodDishes.length;\r\n      i++\r\n    ) {\r\n      positions.push({\r\n        id: this.menuData[this.menuExpandedId].category[this.categorySelected]\r\n          .foodDishes[i].id,\r\n        position: i + 1,\r\n      });\r\n    }\r\n    this.orderDishesSubscription = this.menuService\r\n      .orderDishes(\r\n        this.menuData[this.menuExpandedId].category[this.categorySelected].id,\r\n        { positions }\r\n      )\r\n      .subscribe((response) => {\r\n        this.getDishes(this.categorySelected);\r\n      });\r\n  }\r\n  // Modificadores\r\n  public getModifier() {\r\n    this.getModifierSubscription = this.menuService\r\n      .getModifier(this.restauranteSelected.id)\r\n      .subscribe((data) => {\r\n        this.modifiers = data.modifiers;\r\n      });\r\n  }\r\n  public selectModifier(modifier: Modifiers): void {\r\n    this.modifiersSelected = modifier;\r\n    if (modifier) {\r\n      this.formModifier.reset();\r\n      this.formModifier.patchValue({\r\n        name: this.modifiersSelected.name,\r\n        question: this.modifiersSelected.optional_ask\r\n          ? 'Opcional'\r\n          : 'Obligatorio',\r\n        multipleChoice: this.modifiersSelected.multiple_option ? 'SÃ­' : 'No',\r\n        min: this.modifiersSelected.min_options_per_user,\r\n        max: this.modifiersSelected.max_options_per_user,\r\n      });\r\n      this.modifiersInForm = this.formModifier.get(\r\n        'modifiersInForm'\r\n      ) as FormArray;\r\n      while (this.modifiersInForm.length !== 0) {\r\n        this.modifiersInForm.removeAt(0);\r\n      }\r\n      for (const modifierElement of modifier.modifiers) {\r\n        this.addModifierItem({\r\n          name: modifierElement.name,\r\n          price_in_cents: Number(modifierElement.price_in_cents / 100).toFixed(\r\n            2\r\n          ),\r\n        });\r\n      }\r\n    }\r\n  }\r\n  public createModifier() {\r\n    const openModal = this.dialog.open(CreateModifierComponent, {\r\n      panelClass: 'dialog-exit',\r\n      data: {\r\n        restaurantId: this.restauranteSelected.id,\r\n      },\r\n      maxHeight: '85vh',\r\n    });\r\n    this.createModifierModalSubscription = openModal\r\n      .afterClosed()\r\n      .subscribe((reload: boolean) => {\r\n        if (reload) {\r\n          this.getModifier();\r\n        }\r\n      });\r\n  }\r\n  public addModifier() {\r\n    const modifierDialog = this.dialog.open(AddModifierComponent, {\r\n      panelClass: 'dialog-exit',\r\n      data: {\r\n        modifiers: this.enlistedModifiers,\r\n      },\r\n    });\r\n    this.addModifierModalSubscription = modifierDialog\r\n      .afterClosed()\r\n      .subscribe((modifier: Modifiers) => {\r\n        if (modifier) {\r\n          this.enlistedModifiers.push(modifier);\r\n        }\r\n      });\r\n  }\r\n  public duplicateModifier(modifierId: number) {\r\n    this.createModifierSubscription = this.menuService\r\n      .createModifier(\r\n        this.orderInfoDish(),\r\n        this.menuData[this.menuExpandedId].category[this.categorySelected].id\r\n      )\r\n      .subscribe((data) => {});\r\n  }\r\n  public deleteModifier(modifierId: number) {\r\n    this.enlistedModifiers.splice(modifierId, 1);\r\n  }\r\n  public changedataModifier(modifier?: Modifiers) {\r\n    this.formFoodDish.get('name').setValue(modifier ? modifier.name : '');\r\n  }\r\n  public manageControlQuantityByOne(\r\n    form: FormGroup,\r\n    controlName: string,\r\n    operation: string\r\n  ): void {\r\n    const actualValue = form.get(controlName).value;\r\n    let newValue = actualValue;\r\n    if (operation === 'subtract') {\r\n      if (actualValue > 1) {\r\n        newValue = actualValue - 1;\r\n      }\r\n    } else if (operation === 'add') {\r\n      newValue = actualValue + 1;\r\n    }\r\n    form.get(controlName).setValue(newValue);\r\n  }\r\n\r\n  public editModfier(mod: any) {\r\n    const openModal = this.dialog.open(CreateModifierComponent, {\r\n      panelClass: 'dialog-exit',\r\n      data: {\r\n        restaurantId: this.restauranteSelected.id,\r\n        modifier: mod,\r\n      },\r\n    });\r\n    this.createModifierModalSubscription = openModal\r\n      .afterClosed()\r\n      .subscribe((reload: boolean) => {\r\n        if (reload) {\r\n          this.getModifier();\r\n        }\r\n      });\r\n  }\r\n  public deleteLocalModifier(modifierId: number) {\r\n    this.deleteModifierLocalSubscription = this.menuService\r\n      .deleteModifierLocal(modifierId)\r\n      .subscribe(() => {\r\n        this.getModifier();\r\n      });\r\n  }\r\n  public addModifierItem(value?: any): void {\r\n    if (this.formModifier.get('modifiersInForm').invalid) {\r\n      return;\r\n    }\r\n    this.modifiersInForm = this.formModifier.get(\r\n      'modifiersInForm'\r\n    ) as FormArray;\r\n    this.modifiersInForm.push(this.addModifiers(value));\r\n  }\r\n  public addModifiers(value?: any): FormGroup {\r\n    const nameToAssign = value ? value.name : '';\r\n    const priceToAssign = value ? value.price_in_cents : '';\r\n    return this.formBuilder.group({\r\n      name: new FormControl(nameToAssign, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(100),\r\n      ]),\r\n      price_in_cents: new FormControl(priceToAssign, [\r\n        Validators.required,\r\n        Validators.min(0),\r\n        Validators.pattern(/^[+]?([0-9]{0,})*[.]?([0-9]{0,2})?$/),\r\n      ]),\r\n    });\r\n  }\r\n  get getModifiers(): any {\r\n    return (this.formModifier.get('modifiersInForm') as FormArray).controls;\r\n  }\r\n  removeModifier(index: number): void {\r\n    this.modifiersInForm = this.formModifier.get(\r\n      'modifiersInForm'\r\n    ) as FormArray;\r\n    this.modifiersInForm.removeAt(index);\r\n  }\r\n  updateModifier(): void {\r\n    if (this.formModifier.valid) {\r\n      const data = {\r\n        name: this.formModifier.get('name').value,\r\n        optional_ask: this.formModifier.get('question').value === 'Opcional',\r\n        multiple_option: this.formModifier.get('multipleChoice').value === 'SÃ­',\r\n        min_options_per_user: this.formModifier.get('min').value,\r\n        max_options_per_user: this.formModifier.get('max').value,\r\n        modifiers: Array<any>(),\r\n      };\r\n      for (const item of this.formModifier.get('modifiersInForm').value) {\r\n        data.modifiers.push({\r\n          name: item.name,\r\n          price_in_cents: Math.round(item.price_in_cents * 100),\r\n        });\r\n      }\r\n      this.editModfierSubscription = this.menuService\r\n        .editModifier(data, this.modifiersSelected.id)\r\n        .subscribe(() => {\r\n          this.getModifier();\r\n          this.snackBar.open(\r\n            'Se ha actualizado la informaciÃ³n del modificador',\r\n            'Entendido',\r\n            {\r\n              duration: 15000,\r\n            }\r\n          );\r\n          this.selectModifier(undefined);\r\n        });\r\n    }\r\n  }\r\n  public getModifiersById(modifierId: number): Modifiers {\r\n    for (const modifier of this.modifiers) {\r\n      if (modifier.id === modifierId) {\r\n        return modifier;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import { CommonModule, CurrencyPipe } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { CentsCurrencyPipe } from './cents-currency.pipe';\r\n@NgModule({\r\n  declarations: [CentsCurrencyPipe],\r\n  imports: [CommonModule],\r\n  exports: [CentsCurrencyPipe],\r\n  providers: [CurrencyPipe],\r\n})\r\nexport class CentsCurrencyModule {}\r\n","import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * Base interface for a `MatGridList`.\n * \\@docs-private\n * @record\n */\nfunction MatGridListBase() { }\nif (false) {\n    /** @type {?} */\n    MatGridListBase.prototype.cols;\n    /** @type {?} */\n    MatGridListBase.prototype.gutterSize;\n    /** @type {?} */\n    MatGridListBase.prototype.rowHeight;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-tile.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridTile {\n    /**\n     * @param {?} _element\n     * @param {?=} _gridList\n     */\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /**\n     * Amount of rows that the grid tile takes up.\n     * @return {?}\n     */\n    get rowspan() { return this._rowspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n    get colspan() { return this._colspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(property, value) {\n        ((/** @type {?} */ (this._element.nativeElement.style)))[property] = value;\n    }\n}\nMatGridTile.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatGridTile.ngAcceptInputType_rowspan;\n    /** @type {?} */\n    MatGridTile.ngAcceptInputType_colspan;\n    /** @type {?} */\n    MatGridTile.prototype._rowspan;\n    /** @type {?} */\n    MatGridTile.prototype._colspan;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridTile.prototype._element;\n    /** @type {?} */\n    MatGridTile.prototype._gridList;\n}\nclass MatGridTileText {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\nif (false) {\n    /** @type {?} */\n    MatGridTileText.prototype._lines;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridTileText.prototype._element;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            },] }\n];\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            },] }\n];\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-coordinator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Interface describing a tile.\n * \\@docs-private\n * @record\n */\nfunction Tile() { }\nif (false) {\n    /**\n     * Amount of rows that the tile takes up.\n     * @type {?}\n     */\n    Tile.prototype.rowspan;\n    /**\n     * Amount of columns that the tile takes up.\n     * @type {?}\n     */\n    Tile.prototype.colspan;\n}\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n    }\n    /**\n     * Gets the total number of rows occupied by tiles\n     * @return {?}\n     */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n    get rowspan() {\n        /** @type {?} */\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles Tiles to be positioned.\n     * @return {?}\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => this._trackTile(tile)));\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @private\n     * @param {?} tile\n     * @return {?}\n     */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        /** @type {?} */\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @private\n     * @param {?} tileCols\n     * @return {?}\n     */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        /** @type {?} */\n        let gapStartIndex = -1;\n        /** @type {?} */\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @private\n     * @return {?}\n     */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @private\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @private\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\nif (false) {\n    /**\n     * Tracking array (see class description).\n     * @type {?}\n     */\n    TileCoordinator.prototype.tracker;\n    /**\n     * Index at which the search for the next gap will start.\n     * @type {?}\n     */\n    TileCoordinator.prototype.columnIndex;\n    /**\n     * The current row index.\n     * @type {?}\n     */\n    TileCoordinator.prototype.rowIndex;\n    /**\n     * The computed (row, col) position of each tile (the output).\n     * @type {?}\n     */\n    TileCoordinator.prototype.positions;\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\nif (false) {\n    /** @type {?} */\n    TilePosition.prototype.row;\n    /** @type {?} */\n    TilePosition.prototype.col;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-styler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n * @type {?}\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        /** @type {?} */\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        /** @type {?} */\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        /** @type {?} */\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        /** @type {?} */\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    getComputedHeight() { return null; }\n}\nif (false) {\n    /** @type {?} */\n    TileStyler.prototype._gutterSize;\n    /** @type {?} */\n    TileStyler.prototype._rows;\n    /** @type {?} */\n    TileStyler.prototype._rowspan;\n    /** @type {?} */\n    TileStyler.prototype._cols;\n    /** @type {?} */\n    TileStyler.prototype._direction;\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @abstract\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) { };\n    /**\n     * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n     * \\@docs-private\n     * @abstract\n     * @param {?} list Grid list that the styler was attached to.\n     * @return {?}\n     */\n    TileStyler.prototype.reset = function (list) { };\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    /**\n     * @param {?} fixedRowHeight\n     */\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    FixedTileStyler.prototype.fixedRowHeight;\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /**\n     * @param {?} value\n     */\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _parseRatio(value) {\n        /** @type {?} */\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\nif (false) {\n    /**\n     * Ratio width:height given by user to determine row height.\n     * @type {?}\n     */\n    RatioTileStyler.prototype.rowHeightRatio;\n    /** @type {?} */\n    RatioTileStyler.prototype.baseTileHeight;\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        /** @type {?} */\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        /** @type {?} */\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        /** @type {?} */\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n/** @type {?} */\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    /**\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    /**\n     * Amount of columns in the grid list.\n     * @return {?}\n     */\n    get cols() { return this._cols; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n    get gutterSize() { return this._gutter; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n    get rowHeight() { return this._rowHeight; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowHeight(value) {\n        /** @type {?} */\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @private\n     * @return {?}\n     */\n    _checkCols() {\n        if (!this.cols) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @private\n     * @return {?}\n     */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @private\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @private\n     * @return {?}\n     */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        /** @type {?} */\n        const tracker = this._tileCoordinator;\n        /** @type {?} */\n        const tiles = this._tiles.filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => !tile._gridList || tile._gridList === this));\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((/**\n         * @param {?} tile\n         * @param {?} index\n         * @return {?}\n         */\n        (tile, index) => {\n            /** @type {?} */\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        }));\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    _setListStyle(style) {\n        if (style) {\n            ((/** @type {?} */ (this._element.nativeElement.style)))[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols',\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatGridList.ngAcceptInputType_cols;\n    /**\n     * Number of columns being rendered.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._cols;\n    /**\n     * Used for determiningthe position of each tile in the grid.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._tileCoordinator;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._rowHeight;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._gutter;\n    /**\n     * Sets position and size styles for a tile\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._tileStyler;\n    /**\n     * Query list of tiles that are being rendered.\n     * @type {?}\n     */\n    MatGridList.prototype._tiles;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridListModule {\n}\nMatGridListModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, TileCoordinator as ÉµTileCoordinator, MAT_GRID_LIST as Éµangular_material_src_material_grid_list_grid_list_a };\n//# sourceMappingURL=grid-list.js.map\n","<div class=\"container-modal\">\r\n  <p class=\"title clr-gray\"><b>Agregar grupo modificador</b></p>\r\n  <mat-icon\r\n    aria-hidden=\"false\"\r\n    aria-label=\"Cerrar modal\"\r\n    class=\"clr-yellow close\"\r\n    (click)=\"closeModal()\"\r\n    >close</mat-icon\r\n  >\r\n  <form [formGroup]=\"modifierForm\" (ngSubmit)=\"addModifier()\">\r\n    <mat-form-field>\r\n      <mat-label>Selecciona el grupo modificador</mat-label>\r\n      <mat-select formControlName=\"modifierGroup\">\r\n        <mat-option [value]=\"group\" *ngFor=\"let group of modifiersGroups\">{{\r\n          group.name\r\n        }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <div\r\n      class=\"inl options\"\r\n      *ngIf=\"modifierForm.get('modifierGroup').value !== null\"\r\n    >\r\n      <p>\r\n        Tipo de pregunta:\r\n        <b>{{\r\n          modifierForm.get('modifierGroup').value.optional_ask\r\n            ? 'Opcional'\r\n            : 'Obligatoria'\r\n        }}</b>\r\n      </p>\r\n      <p>\r\n        LÃ­mite:\r\n        <b>{{\r\n          modifierForm.get('modifierGroup').value.max_options_per_user\r\n        }}</b>\r\n      </p>\r\n    </div>\r\n    <div class=\"list\" *ngIf=\"modifierForm.get('modifierGroup').value !== null\">\r\n      <div class=\"item inl\">\r\n        <p class=\"clr-gray\"><b>Producto</b></p>\r\n        <p class=\"clr-gray\"><b>Costo</b></p>\r\n      </div>\r\n\r\n      <div\r\n        class=\"item inl\"\r\n        *ngFor=\"\r\n          let modifier of modifierForm.get('modifierGroup').value.modifiers\r\n        \"\r\n      >\r\n        <p>{{ modifier.name }}</p>\r\n        <p>{{ modifier.price_in_cents | centsCurrency }}</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"inl buttons\">\r\n      <div class=\"btns-transparent\" (click)=\"closeModal()\">\r\n        <span>Cancelar</span>\r\n      </div>\r\n      <button type=\"submit\" class=\"btns\">\r\n        <span>Continuar</span>\r\n      </button>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { MatDialogRef } from '@angular/material/dialog';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-menu-onboarding',\r\n  templateUrl: './menu-onboarding.component.html',\r\n  styleUrls: ['./menu-onboarding.component.scss']\r\n})\r\nexport class MenuOnboardingComponent implements OnInit {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<MenuOnboardingComponent>,\r\n  ) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  public closeModal(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","<section class=\"dashboard-section-container\">\r\n  <app-section-header\r\n    [sectionName]=\"'Crea tu menÃº'\"\r\n    [actionName]=\"'Nuevo menÃº'\"\r\n    (actionClicked)=\"createMenu(null)\"\r\n  ></app-section-header>\r\n  <div class=\"dashboard-content\" id=\"menu\">\r\n    <div class=\"empty inl\" *ngIf=\"loaded && menuData && menuData.length === 0\">\r\n      <div>\r\n        <img src=\"assets/images/icons/icon-menu01.png\" alt=\"Menu\" />\r\n        <p class=\"h2 txtC clr-nm\">\r\n          AÃºn no has creado un menÃº<br /><span\r\n            *ngIf=\"!restauranteSelected.is_head_office\"\r\n            >para esta sucursal</span\r\n          >\r\n        </p>\r\n        <ol type=\"A\">\r\n          <li *ngIf=\"restauranteSelected.is_head_office\">\r\n            <p>\r\n              Si creas sucursales mÃ¡s adelante, podrÃ¡s hacer una copia del menÃº\r\n              que tengas en tu sucursal matriz\r\n            </p>\r\n          </li>\r\n          <li>\r\n            <p class=\"inl-menu\">\r\n              Si ya tienes creado un menÃº, puedes cargarlo a nuestro sistema\r\n              <img\r\n                (click)=\"openInstructionsModal()\"\r\n                src=\"assets/images/icons/question.svg\"\r\n                alt=\"Dashboard\" />\r\n            </p>\r\n            <div class=\"inl\">\r\n              <div class=\"file-button inl\">\r\n                <p>{{ nameFile }}</p>\r\n                <label for=\"uploadMenu\" class=\"btns-small-border\">\r\n                  <span>Subir menÃº</span>\r\n                  <input\r\n                    type=\"file\"\r\n                    id=\"uploadMenu\"\r\n                    accept=\".zip\"\r\n                    (change)=\"uploadCsv($event)\"\r\n                  />\r\n                </label>\r\n                <small>.CSV | Peso mÃ¡ximo 35MB</small>\r\n              </div>\r\n              <div>\r\n                <a\r\n                  class=\"btns-small-border\"\r\n                  href=\"{{ urlTemplate }}\"\r\n                  target=\"_blank\"\r\n                  download\r\n                >\r\n                  <span>Descarga nuestra plantilla</span>\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <p>Puedes comenzar a crear tu menÃº desde cero</p>\r\n          </li>\r\n          <li *ngIf=\"!restauranteSelected.is_head_office\">\r\n            <p>\r\n              Puedes crear tu menu a partir del que se tiene en la sucursal\r\n              matriz, los cambios que hagas no afectarÃ¡n el menÃº de las demÃ¡s\r\n              sucursales\r\n            </p>\r\n            <button class=\"btns-small\" (click)=\"duplicateMenuMatriz()\">\r\n              <span>Descargar menÃº de sucursal matriz</span>\r\n            </button>\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"content inl\" *ngIf=\"menuData && menuData.length > 0\">\r\n      <div class=\"column col-1\">\r\n        <mat-toolbar\r\n          ><p class=\"clr-gray\"><b>MENÃS</b></p></mat-toolbar\r\n        >\r\n        <mat-accordion\r\n          cdkDropList\r\n          [cdkDropListData]=\"menuData\"\r\n          (cdkDropListDropped)=\"drop($event)\"\r\n        >\r\n          <div\r\n            cdkDrag\r\n            *ngFor=\"let item of menuData; let i = index\"\r\n            [cdkDragDisabled]=\"menuExpandedId === i\"\r\n          >\r\n            <mat-expansion-panel\r\n              class=\"menus\"\r\n              (click)=\"selectMenus(i)\"\r\n              (opened)=\"menuExpanded(i)\"\r\n            >\r\n              <mat-expansion-panel-header>\r\n                <mat-panel-title class=\"inl\">\r\n                  <mat-icon class=\"clr-yellow\">chevron_right</mat-icon>\r\n                  <p class=\"clr-gray inl\">\r\n                    {{ item.name }}\r\n                    <span>({{ item.from }} a {{ item.to }})</span>\r\n                  </p>\r\n                  <button\r\n                    mat-icon-button\r\n                    [matMenuTriggerFor]=\"menuModifiers\"\r\n                    aria-label=\"Opciones\"\r\n                    class=\"options\"\r\n                  >\r\n                    <mat-icon>more_vert</mat-icon>\r\n                  </button>\r\n                </mat-panel-title>\r\n                <mat-menu #menuModifiers=\"matMenu\">\r\n                  <button mat-menu-item (click)=\"createMenu(item)\">\r\n                    <mat-icon>edit</mat-icon>\r\n                    <span>Editar</span>\r\n                  </button>\r\n                  <button mat-menu-item (click)=\"duplicateMenu(i)\">\r\n                    <mat-icon>file_copy</mat-icon>\r\n                    <span>Duplicar</span>\r\n                  </button>\r\n                  <button mat-menu-item (click)=\"deleteMenu(i)\">\r\n                    <mat-icon>delete</mat-icon>\r\n                    <span>Eliminar</span>\r\n                  </button>\r\n                </mat-menu>\r\n              </mat-expansion-panel-header>\r\n\r\n              <div cdkDropList (cdkDropListDropped)=\"dropCategory($event)\">\r\n                <mat-toolbar\r\n                  cdkDrag\r\n                  *ngFor=\"let category of item.category; let iC = index\"\r\n                  class=\"item inl\"\r\n                  [class.selected]=\"iC === categorySelected\"\r\n                  (click)=\"selectCategory(iC)\"\r\n                >\r\n                  <p>{{ category.name }}</p>\r\n                  <button\r\n                    mat-icon-button\r\n                    [matMenuTriggerFor]=\"menuCategory\"\r\n                    aria-label=\"Opciones\"\r\n                    class=\"options\"\r\n                  >\r\n                    <mat-icon>more_vert</mat-icon>\r\n                  </button>\r\n                  <mat-menu #menuCategory=\"matMenu\">\r\n                    <button mat-menu-item (click)=\"createCategory(i, category)\">\r\n                      <mat-icon>edit</mat-icon>\r\n                      <span>Editar</span>\r\n                    </button>\r\n                    <button\r\n                      mat-menu-item\r\n                      (click)=\"duplicateCategory(category.id)\"\r\n                    >\r\n                      <mat-icon>file_copy</mat-icon>\r\n                      <span>Duplicar</span>\r\n                    </button>\r\n                    <button mat-menu-item (click)=\"deleteCategory(i, iC)\">\r\n                      <mat-icon>delete</mat-icon>\r\n                      <span>Eliminar</span>\r\n                    </button>\r\n                  </mat-menu>\r\n                </mat-toolbar>\r\n              </div>\r\n              <ng-container>\r\n                <mat-toolbar class=\"inl\">\r\n                  <p class=\"add inl clr-yellow\" (click)=\"createCategory(i)\">\r\n                    <mat-icon>add</mat-icon>\r\n                    <b>Nueva categorÃ­a</b>\r\n                  </p>\r\n                </mat-toolbar>\r\n              </ng-container>\r\n            </mat-expansion-panel>\r\n          </div>\r\n        </mat-accordion>\r\n        <mat-toolbar\r\n          (click)=\"changeForm('modifier')\"\r\n          [class.selected]=\"create === 'modifier'\"\r\n          class=\"modifier-button\"\r\n        >\r\n          <p class=\"clr-gray\"><b>MODIFICADORES</b></p>\r\n        </mat-toolbar>\r\n      </div>\r\n      <div class=\"column col-1\">\r\n        <ng-container\r\n          *ngIf=\"\r\n            create === 'menu' &&\r\n            menuExpandedId !== undefined &&\r\n            menuExpandedId !== -1 &&\r\n            categorySelected !== undefined &&\r\n            categorySelected !== -1\r\n          \"\r\n        >\r\n          <mat-toolbar\r\n            ><p class=\"clr-gray\"><b>PLATILLOS</b></p></mat-toolbar\r\n          >\r\n          <div cdkDropList (cdkDropListDropped)=\"dropFoodDishes($event)\">\r\n            <mat-toolbar\r\n              cdkDrag\r\n              *ngFor=\"\r\n                let foodDish of (this.menuData[menuExpandedId]?.category)[\r\n                  categorySelected\r\n                ]?.foodDishes;\r\n                let i = index\r\n              \"\r\n              class=\"item inl\"\r\n              [class.selected]=\"i === dishSelected\"\r\n              (click)=\"selectDish(i)\"\r\n            >\r\n              <p class=\"clr-gray\">{{ foodDish.name }}</p>\r\n              <button\r\n                mat-icon-button\r\n                [matMenuTriggerFor]=\"menuFoodDishes\"\r\n                aria-label=\"Opciones\"\r\n                class=\"options\"\r\n              >\r\n                <mat-icon>more_vert</mat-icon>\r\n              </button>\r\n              <mat-menu #menuFoodDishes=\"matMenu\">\r\n                <button mat-menu-item (click)=\"duplicateDish(i)\">\r\n                  <mat-icon>file_copy</mat-icon>\r\n                  <span>Duplicar</span>\r\n                </button>\r\n                <button mat-menu-item (click)=\"deleteDish(i)\">\r\n                  <mat-icon>delete</mat-icon>\r\n                  <span>Eliminar</span>\r\n                </button>\r\n              </mat-menu>\r\n            </mat-toolbar>\r\n          </div>\r\n          <ng-container>\r\n            <mat-toolbar class=\"inl\">\r\n              <p class=\"add inl clr-yellow\" (click)=\"changedataFoodDish()\">\r\n                <mat-icon>add</mat-icon>\r\n                <b>Nuevo platillo</b>\r\n              </p>\r\n            </mat-toolbar>\r\n          </ng-container>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"create === 'modifier'\">\r\n          <mat-toolbar\r\n            ><p class=\"clr-gray\"><b>MODIFICADORES</b></p></mat-toolbar\r\n          >\r\n          <ng-container *ngFor=\"let mod of modifiers; let i = index\">\r\n            <mat-toolbar\r\n              class=\"item inl\"\r\n              [class.selected]=\"\r\n                modifiersSelected && mod.id === modifiersSelected.id\r\n              \"\r\n              (click)=\"selectModifier(mod)\"\r\n            >\r\n              <p class=\"clr-gray\">{{ mod.name }}</p>\r\n              <button\r\n                mat-icon-button\r\n                [matMenuTriggerFor]=\"menuAllModifiers\"\r\n                aria-label=\"Opciones\"\r\n                class=\"options\"\r\n              >\r\n                <mat-icon>more_vert</mat-icon>\r\n              </button>\r\n              <mat-menu #menuAllModifiers=\"matMenu\">\r\n                <button mat-menu-item>\r\n                  <mat-icon>file_copy</mat-icon>\r\n                  <span>Duplicar</span>\r\n                </button>\r\n                <button mat-menu-item (click)=\"deleteLocalModifier(mod.id)\">\r\n                  <mat-icon>delete</mat-icon>\r\n                  <span>Eliminar</span>\r\n                </button>\r\n              </mat-menu>\r\n            </mat-toolbar>\r\n          </ng-container>\r\n          <mat-toolbar class=\"inl\">\r\n            <p class=\"add inl clr-yellow\" (click)=\"createModifier()\">\r\n              <mat-icon>add</mat-icon>\r\n              <b>Nuevo modificador</b>\r\n            </p>\r\n          </mat-toolbar>\r\n        </ng-container>\r\n      </div>\r\n      <div class=\"column col-2\">\r\n        <ng-container\r\n          *ngIf=\"\r\n            create === 'menu' &&\r\n            categorySelected !== undefined &&\r\n            categorySelected !== -1\r\n          \"\r\n        >\r\n          <form [formGroup]=\"formFoodDish\" class=\"info\">\r\n            <div class=\"image\">\r\n              <div class=\"preview\">\r\n                <div\r\n                  class=\"backImg full cnt\"\r\n                  [style.backgroundImage]=\"foodDishPreview ? 'url(' + foodDishPreview + ')' : ''\"\r\n                ></div>\r\n              </div>\r\n              <div class=\"file-button\">\r\n                <label for=\"uploadMenu\" class=\"btns-small-border\">\r\n                  <span>Subir foto</span>\r\n                  <input\r\n                    type=\"file\"\r\n                    id=\"uploadMenu\"\r\n                    accept=\".jpg, .png\"\r\n                    (change)=\"uploadImageFoodDish($event)\"\r\n                  />\r\n                </label>\r\n                <small\r\n                  >JPG, PNG Dimensiones 600 x 400px Peso mÃ¡ximo 1 MB\r\n                </small>\r\n              </div>\r\n            </div>\r\n            <div class=\"form\">\r\n              <mat-form-field>\r\n                <mat-label>Nombre</mat-label>\r\n                <input\r\n                  matInput\r\n                  formControlName=\"name\"\r\n                  name=\"text\"\r\n                  type=\"text\"\r\n                />\r\n                <mat-error\r\n                  *ngIf=\"formFoodDish.get('name').hasError('required')\"\r\n                >\r\n                  Esta informaciÃ³n es necesaria\r\n                </mat-error>\r\n                <mat-error\r\n                  *ngIf=\"formFoodDish.get('name').hasError('minlength')\"\r\n                >\r\n                  El mÃ­nimo de caracteres es de 3 caracteres\r\n                </mat-error>\r\n                <mat-error\r\n                  *ngIf=\"formFoodDish.get('name').hasError('maxlength')\"\r\n                >\r\n                  El mÃ¡ximo de caracteres es de 100 caracteres\r\n                </mat-error>\r\n              </mat-form-field>\r\n              <mat-form-field>\r\n                <mat-label>Precio</mat-label>\r\n                <input\r\n                  matInput\r\n                  formControlName=\"price_in_cents\"\r\n                  name=\"price_in_cents\"\r\n                  type=\"number\"\r\n                />\r\n                <mat-error\r\n                  *ngIf=\"\r\n                    formFoodDish.get('price_in_cents').hasError('required')\r\n                  \"\r\n                >\r\n                  Esta informaciÃ³n es necesaria\r\n                </mat-error>\r\n                <mat-error\r\n                  *ngIf=\"formFoodDish.get('price_in_cents').hasError('min')\"\r\n                >\r\n                  El valor mÃ­nimo es 1\r\n                </mat-error>\r\n                <mat-error\r\n                  *ngIf=\"formFoodDish.get('price_in_cents').hasError('pattern')\"\r\n                >\r\n                  El formato es incorrecto\r\n                </mat-error>\r\n              </mat-form-field>\r\n              <mat-form-field>\r\n                <mat-label>IVA</mat-label>\r\n                <input matInput formControlName=\"iva\" name=\"iva\" type=\"text\" />\r\n                <mat-error *ngIf=\"formFoodDish.get('iva').hasError('required')\">\r\n                  Esta informaciÃ³n es necesaria\r\n                </mat-error>\r\n                <mat-error *ngIf=\"formFoodDish.get('iva').hasError('min')\">\r\n                  El valor mÃ­nimo es 3\r\n                </mat-error>\r\n                <mat-error *ngIf=\"formFoodDish.get('iva').hasError('max')\">\r\n                  El valor mÃ¡ximo es 100\r\n                </mat-error>\r\n                <mat-error *ngIf=\"formFoodDish.get('iva').hasError('pattern')\">\r\n                  El formato es incorrecto\r\n                </mat-error>\r\n              </mat-form-field>\r\n              <mat-form-field>\r\n                <mat-label>DescripciÃ³n</mat-label>\r\n                <input\r\n                  matInput\r\n                  formControlName=\"description\"\r\n                  name=\"description\"\r\n                  type=\"text\"\r\n                />\r\n                <mat-error\r\n                  *ngIf=\"formFoodDish.get('description').hasError('required')\"\r\n                >\r\n                  Esta informaciÃ³n es necesaria\r\n                </mat-error>\r\n                <mat-error\r\n                  *ngIf=\"formFoodDish.get('description').hasError('minlength')\"\r\n                >\r\n                  El mÃ­nimo de caracteres es de 4 caracteres\r\n                </mat-error>\r\n                <mat-error\r\n                  *ngIf=\"formFoodDish.get('description').hasError('maxlength')\"\r\n                >\r\n                  El mÃ¡ximo de caracteres es de 150 caracteres\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n          </form>\r\n          <div class=\"modifiers\">\r\n            <p class=\"clr-gray\"><b>Modificadores</b></p>\r\n            <p\r\n              class=\"add inl clr-yellow\"\r\n              (click)=\"addModifier()\"\r\n              *ngIf=\"enlistedModifiers.length < modifiers.length\"\r\n            >\r\n              <mat-icon>add</mat-icon>\r\n              <b>Agregar grupo modificador</b>\r\n            </p>\r\n            <mat-accordion>\r\n              <mat-expansion-panel\r\n                *ngFor=\"let modifier of enlistedModifiers; let i = index\"\r\n              >\r\n                <mat-expansion-panel-header>\r\n                  <mat-panel-title class=\"inl\">\r\n                    <mat-icon class=\"clr-yellow\">chevron_right</mat-icon>\r\n                    <p class=\"inl clr-gray\">{{ modifier.name }}</p>\r\n                    <button\r\n                      mat-icon-button\r\n                      [matMenuTriggerFor]=\"menuModifiers\"\r\n                      aria-label=\"Opciones\"\r\n                      class=\"options\"\r\n                    >\r\n                      <mat-icon>more_vert</mat-icon>\r\n                    </button>\r\n                  </mat-panel-title>\r\n                  <mat-menu #menuModifiers=\"matMenu\" xPosition=\"before\">\r\n                    <button mat-menu-item (click)=\"duplicateModifier(i)\">\r\n                      <mat-icon>file_copy</mat-icon>\r\n                      <span>Duplicar</span>\r\n                    </button>\r\n                    <button mat-menu-item (click)=\"deleteModifier(i)\">\r\n                      <mat-icon>delete</mat-icon>\r\n                      <span>Eliminar</span>\r\n                    </button>\r\n                  </mat-menu>\r\n                </mat-expansion-panel-header>\r\n\r\n                <div class=\"list-of-modifiers\">\r\n                  <div class=\"inl head\">\r\n                    <p>\r\n                      Tipo de pregunta:\r\n                      <b>{{\r\n                        modifier.optional_ask ? 'Opcional' : 'Obligatoria'\r\n                      }}</b>\r\n                    </p>\r\n                    <p>\r\n                      LÃ­mite: <b>{{ modifier.max_options_per_user }}</b>\r\n                    </p>\r\n                  </div>\r\n                  <div class=\"inl\" *ngFor=\"let product of modifier.modifiers\">\r\n                    <p>{{ product.name }}</p>\r\n                    <p>{{ product.price_in_cents | centsCurrency }}</p>\r\n                  </div>\r\n                </div>\r\n              </mat-expansion-panel>\r\n            </mat-accordion>\r\n            <button class=\"btns\" (click)=\"createDish()\">\r\n              <span>Guardar</span>\r\n            </button>\r\n          </div>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"create === 'modifier' && modifiersSelected\">\r\n          <form\r\n            [formGroup]=\"formModifier\"\r\n            (ngSubmit)=\"updateModifier()\"\r\n            class=\"formModifier\"\r\n          >\r\n            <mat-form-field>\r\n              <mat-label>Nombre categorÃ­a</mat-label>\r\n              <input matInput formControlName=\"name\" />\r\n            </mat-form-field>\r\n            <p class=\"clr-gray\"><b>Â¿QuÃ© tipo de pregunta es?</b></p>\r\n            <mat-radio-group formControlName=\"question\" class=\"inl\">\r\n              <mat-radio-button value=\"Opcional\">Opcional</mat-radio-button>\r\n              <mat-radio-button value=\"Obligatorio\"\r\n                >Obligatorio</mat-radio-button\r\n              >\r\n            </mat-radio-group>\r\n            <p class=\"clr-gray\">\r\n              <b>Â¿Este modificador serÃ¡ de opciÃ³n mÃºltiple?</b>\r\n            </p>\r\n            <mat-radio-group formControlName=\"multipleChoice\" class=\"inl\">\r\n              <mat-radio-button value=\"SÃ­\">SÃ­</mat-radio-button>\r\n              <mat-radio-button value=\"No\">No</mat-radio-button>\r\n            </mat-radio-group>\r\n            <p class=\"clr-gray\"><b>El usuario podrÃ¡ elegir entre:</b></p>\r\n            <div class=\"inl\">\r\n              <mat-form-field class=\"number contains-arrows\">\r\n                <input matInput formControlName=\"min\" mask=\"0*\" />\r\n                <span matSuffix>\r\n                  <img\r\n                    src=\"assets/images/icons/btn-stepper-up.svg\"\r\n                    class=\"quantity-control up\"\r\n                    (click)=\"\r\n                      manageControlQuantityByOne(formModifier, 'min', 'add')\r\n                    \"\r\n                  />\r\n                  <img\r\n                    src=\"assets/images/icons/btn-stepper-down.svg\"\r\n                    class=\"quantity-control down\"\r\n                    (click)=\"\r\n                      manageControlQuantityByOne(\r\n                        formModifier,\r\n                        'min',\r\n                        'subtract'\r\n                      )\r\n                    \"\r\n                  />\r\n                </span>\r\n              </mat-form-field>\r\n              <mat-form-field class=\"number contains-arrows\">\r\n                <input matInput formControlName=\"max\" mask=\"0*\" />\r\n                <span matSuffix>\r\n                  <img\r\n                    src=\"assets/images/icons/btn-stepper-up.svg\"\r\n                    class=\"quantity-control up\"\r\n                    (click)=\"\r\n                      manageControlQuantityByOne(formModifier, 'max', 'add')\r\n                    \"\r\n                  />\r\n                  <img\r\n                    src=\"assets/images/icons/btn-stepper-down.svg\"\r\n                    class=\"quantity-control down\"\r\n                    (click)=\"\r\n                      manageControlQuantityByOne(\r\n                        formModifier,\r\n                        'max',\r\n                        'subtract'\r\n                      )\r\n                    \"\r\n                  />\r\n                </span>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"products\">\r\n              <div\r\n                formArrayName=\"modifiersInForm\"\r\n                *ngFor=\"let modifier of getModifiers; let i = index\"\r\n              >\r\n                <div [formGroupName]=\"i\" class=\"inl\">\r\n                  <mat-form-field>\r\n                    <mat-label>Producto</mat-label>\r\n                    <input matInput formControlName=\"name\" />\r\n                    <mat-error\r\n                      *ngIf=\"getModifiers[i].get('name').hasError('required')\"\r\n                    >\r\n                      Esta informaciÃ³n es necesaria\r\n                    </mat-error>\r\n                    <mat-error\r\n                      *ngIf=\"getModifiers[i].get('name').hasError('minlength')\"\r\n                    >\r\n                      El mÃ­nimo de caracteres es de 3 caracteres\r\n                    </mat-error>\r\n                    <mat-error\r\n                      *ngIf=\"getModifiers[i].get('name').hasError('maxlength')\"\r\n                    >\r\n                      El mÃ¡ximo de caracteres es de 100 caracteres\r\n                    </mat-error>\r\n                  </mat-form-field>\r\n                  <mat-form-field class=\"cost\">\r\n                    <mat-label>Costo</mat-label>\r\n                    <input\r\n                      matInput\r\n                      prefix=\"$ \"\r\n                      formControlName=\"price_in_cents\"\r\n                      mask=\"0*.00\"\r\n                      [dropSpecialCharacters]=\"false\"\r\n                    />\r\n                    <mat-error\r\n                      *ngIf=\"\r\n                        getModifiers[i]\r\n                          .get('price_in_cents')\r\n                          .hasError('required')\r\n                      \"\r\n                    >\r\n                      Esta informaciÃ³n es necesaria\r\n                    </mat-error>\r\n                    <mat-error\r\n                      *ngIf=\"\r\n                        getModifiers[i]\r\n                          .get('price_in_cents')\r\n                          .hasError('minlength')\r\n                      \"\r\n                    >\r\n                      El mÃ­nimo de caracteres es de 0 caracteres\r\n                    </mat-error>\r\n                    <mat-error\r\n                      *ngIf=\"\r\n                        getModifiers[i]\r\n                          .get('price_in_cents')\r\n                          .hasError('pattern')\r\n                      \"\r\n                    >\r\n                      Valor no vÃ¡lido\r\n                    </mat-error>\r\n                  </mat-form-field>\r\n                  <mat-icon\r\n                    class=\"clr-yellow\"\r\n                    *ngIf=\"getModifiers.length > 1\"\r\n                    (click)=\"removeModifier(i)\"\r\n                    >delete</mat-icon\r\n                  >\r\n                </div>\r\n              </div>\r\n              <p class=\"add inl clr-yellow\" (click)=\"addModifierItem()\">\r\n                <mat-icon>add</mat-icon>\r\n                <b>Agregar</b>\r\n              </p>\r\n            </div>\r\n            <div class=\"inl buttons\">\r\n              <button\r\n                type=\"button\"\r\n                (click)=\"selectModifier(undefined)\"\r\n                class=\"btns-transparent\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button class=\"btns\" type=\"submit\">\r\n                <span>Guardar</span>\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","<div class=\"container-modal\">\r\n  <div class=\"modal-title\">\r\n    <p class=\"title clr-gray\"><b>Â¿CÃMO FUNCIONA LA PLANTILLA?</b></p>\r\n    <mat-icon aria-hidden=\"false\" aria-label=\"Cerrar modal\" class=\"clr-yellow close\" (click)=\"closeModal()\">close</mat-icon>\r\n  </div>\r\n  <ol type=\"1\">\r\n    <li>\r\n      <p>\r\n        Descarga el archivo .zip y extrae los archivos\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        En la carpeta \"img\" agrega todas las imÃ¡genes que utilizarÃ¡s en tus menÃºs\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        Abre el archivo .xslx y llena los campos como se muestra en los ejemplos.\r\n        Verifica que el nÃºmero de caracteres no sobrepase los indicados\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        Una vez terminado, vuelve a comprimir el archivo junto con la carpeta de imÃ¡genes.\r\n        DeberÃ¡s subirla igual que como la descargaste\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        Regresa a la secciÃ³n de MenÃº dentro de tu administrador de\r\n        Plato puesto y haz click en Subir MenÃº\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        Espera unos segundos, tu informaciÃ³n\r\n        se estÃ¡ subiendo a la plataforma, se verÃ¡ reflejada al terminar el proceso\r\n      </p>\r\n    </li>\r\n  </ol>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { MenuComponent } from './menu.component';\r\nconst routes: Routes = [{\r\n    path: '',\r\n    component: MenuComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class MenuRoutingModule { }\r\n","<div class=\"container-modal\">\r\n  <p class=\"title clr-gray\">\r\n    <b>{{ data.modifier ? 'EDITAR' : 'CREAR' }} GRUPO MODIFICADOR</b>\r\n  </p>\r\n  <mat-icon\r\n    aria-hidden=\"false\"\r\n    aria-label=\"Cerrar modal\"\r\n    class=\"clr-yellow close\"\r\n    (click)=\"closeModal()\"\r\n    >close</mat-icon\r\n  >\r\n  <form (ngSubmit)=\"createModifier()\" [formGroup]=\"formModifier\">\r\n    <mat-form-field>\r\n      <mat-label>Nombre del grupo modificador</mat-label>\r\n      <input matInput formControlName=\"name\" />\r\n      <mat-error *ngIf=\"formModifier.get('name').hasError('required')\">\r\n        Esta informaciÃ³n es necesaria\r\n      </mat-error>\r\n      <mat-error\r\n        *ngIf=\"\r\n          formModifier.get('name').touched &&\r\n          formModifier.get('name').hasError('minlength')\r\n        \"\r\n      >\r\n        Debe tener un mÃ­nimo de 3 caracteres\r\n      </mat-error>\r\n      <mat-error\r\n        *ngIf=\"\r\n          formModifier.get('name').touched &&\r\n          formModifier.get('name').hasError('maxlength')\r\n        \"\r\n      >\r\n        Debe tener un mÃ¡ximo de 40 caracteres\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <p class=\"clr-gray\"><b>Â¿QuÃ© tipo de pregunta es?</b></p>\r\n    <mat-radio-group\r\n      formControlName=\"optional_ask\"\r\n      class=\"inl\"\r\n      [class.error]=\"\r\n        formModifier.get('optional_ask').hasError('required') && submit\r\n      \"\r\n    >\r\n      <mat-radio-button value=\"no\">Opcional</mat-radio-button>\r\n      <mat-radio-button value=\"si\">Obligatorio</mat-radio-button>\r\n    </mat-radio-group>\r\n    <p class=\"clr-gray\"><b>Â¿Este modificador serÃ¡ de opciÃ³n mÃºltiple?</b></p>\r\n    <mat-radio-group\r\n      formControlName=\"multiple_option\"\r\n      class=\"inl\"\r\n      [class.error]=\"\r\n        formModifier.get('multiple_option').hasError('required') && submit\r\n      \"\r\n    >\r\n      <mat-radio-button value=\"si\">SÃ­</mat-radio-button>\r\n      <mat-radio-button value=\"no\">No</mat-radio-button>\r\n      <mat-error\r\n        *ngIf=\"formModifier.get('optional_ask').hasError('multiple_option')\"\r\n      >\r\n        Debes seleccionar una opciÃ³n\r\n      </mat-error>\r\n    </mat-radio-group>\r\n    <p\r\n      class=\"clr-gray\"\r\n      *ngIf=\"formModifier.get('multiple_option').value === 'si'\"\r\n    >\r\n      <b>El usuario podrÃ¡ elegir entre:</b>\r\n    </p>\r\n    <div class=\"inl\" *ngIf=\"formModifier.get('multiple_option').value === 'si'\">\r\n      <mat-form-field class=\"number contains-arrows\">\r\n        <input matInput formControlName=\"min_options_per_user\" mask=\"0*\" />\r\n        <span matSuffix>\r\n          <img\r\n            src=\"assets/images/icons/btn-stepper-up.svg\"\r\n            class=\"quantity-control up\"\r\n            (click)=\"\r\n              manageControlQuantityByOne(\r\n                formModifier,\r\n                'min_options_per_user',\r\n                'add'\r\n              )\r\n            \"\r\n          />\r\n          <img\r\n            src=\"assets/images/icons/btn-stepper-down.svg\"\r\n            class=\"quantity-control down\"\r\n            (click)=\"\r\n              manageControlQuantityByOne(\r\n                formModifier,\r\n                'min_options_per_user',\r\n                'subtract'\r\n              )\r\n            \"\r\n          />\r\n        </span>\r\n      </mat-form-field>\r\n      <mat-form-field class=\"number contains-arrows\">\r\n        <input matInput formControlName=\"max_options_per_user\" mask=\"0*\" />\r\n        <span matSuffix>\r\n          <img\r\n            src=\"assets/images/icons/btn-stepper-up.svg\"\r\n            class=\"quantity-control up\"\r\n            (click)=\"\r\n              manageControlQuantityByOne(\r\n                formModifier,\r\n                'max_options_per_user',\r\n                'add'\r\n              )\r\n            \"\r\n          />\r\n          <img\r\n            src=\"assets/images/icons/btn-stepper-down.svg\"\r\n            class=\"quantity-control down\"\r\n            (click)=\"\r\n              manageControlQuantityByOne(\r\n                formModifier,\r\n                'max_options_per_user',\r\n                'subtract'\r\n              )\r\n            \"\r\n          />\r\n        </span>\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"products\">\r\n      <div\r\n        formArrayName=\"modifiers\"\r\n        *ngFor=\"let modifier of getModifiers; let i = index\"\r\n      >\r\n        <div [formGroupName]=\"i\" class=\"inl\">\r\n          <mat-form-field>\r\n            <mat-label>Producto</mat-label>\r\n            <input matInput formControlName=\"name\" />\r\n            <mat-error *ngIf=\"getModifiers[i].get('name').hasError('required')\">\r\n              Esta informaciÃ³n es necesaria\r\n            </mat-error>\r\n            <mat-error\r\n              *ngIf=\"getModifiers[i].get('name').hasError('minlength')\"\r\n            >\r\n              El mÃ­nimo de caracteres es de 3 caracteres\r\n            </mat-error>\r\n            <mat-error\r\n              *ngIf=\"getModifiers[i].get('name').hasError('maxlength')\"\r\n            >\r\n              El mÃ¡ximo de caracteres es de 100 caracteres\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"cost\">\r\n            <mat-label>Costo</mat-label>\r\n            <input\r\n              matInput\r\n              formControlName=\"price_in_cents\"\r\n              mask=\"0*.00\"\r\n              [dropSpecialCharacters]=\"false\"\r\n            />\r\n            <mat-error\r\n              *ngIf=\"getModifiers[i].get('price_in_cents').hasError('required')\"\r\n            >\r\n              Esta informaciÃ³n es necesaria\r\n            </mat-error>\r\n            <mat-error\r\n              *ngIf=\"\r\n                getModifiers[i].get('price_in_cents').hasError('minlength')\r\n              \"\r\n            >\r\n              El mÃ­nimo de caracteres es de 0 caracteres\r\n            </mat-error>\r\n            <mat-error\r\n              *ngIf=\"getModifiers[i].get('price_in_cents').hasError('pattern')\"\r\n            >\r\n              Valor no vÃ¡lido\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <mat-icon\r\n            class=\"clr-yellow\"\r\n            *ngIf=\"getModifiers.length > 1\"\r\n            (click)=\"removeModifier(i)\"\r\n            >delete</mat-icon\r\n          >\r\n        </div>\r\n      </div>\r\n      <p class=\"add inl clr-yellow\" (click)=\"addModifier()\">\r\n        <mat-icon>add</mat-icon>\r\n        <b>Agregar</b>\r\n      </p>\r\n    </div>\r\n\r\n    <div class=\"inl buttons\">\r\n      <div class=\"btns-transparent\" (click)=\"closeModal()\">\r\n        <span>Cancelar</span>\r\n      </div>\r\n      <button type=\"submit\" class=\"btns\">\r\n        <span>Continuar</span>\r\n      </button>\r\n    </div>\r\n  </form>\r\n</div>\r\n","<div class=\"container-modal\">\r\n  <p class=\"title clr-gray\"><b>Â¿EstÃ¡s seguro de eliminar este menÃº?</b></p>\r\n  <p class=\"clr-gray txtC\">Todo el contenido dentro de este item se borrarÃ¡</p>\r\n  <mat-icon aria-hidden=\"false\" aria-label=\"Cerrar modal\" class=\"clr-yellow close\" (click)=\"closeModal(false)\">close</mat-icon>\r\n  <br>\r\n  <div class=\"inl buttons\">\r\n    <button class=\"btns-transparent\" (click)=\"closeModal(false)\">\r\n      <span>Cancelar</span>\r\n    </button>\r\n    <button class=\"btns\" (click)=\"closeModal(true)\">\r\n      <span>Aceptar</span>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, tabIndex) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this.role = 'treeitem';\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n}\nMatTreeNode.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['disabled', 'tabIndex'],\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'mat-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            },] }\n];\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatTreeNode.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatTreeNode.prototype.role;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatTreeNode.prototype._tree;\n}\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            },] }\n];\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatTreeNodeDef.prototype.data;\n}\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, _differs, tabIndex) {\n        super(_elementRef, _tree, _differs);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        this._disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    /**\n     * Whether the node is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Tabindex for the node.\n     * @return {?}\n     */\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'mat-nested-tree-node',\n                },\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            },] }\n];\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    disabled: [{ type: Input }],\n    tabIndex: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatNestedTreeNode.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatNestedTreeNode.prototype.node;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatNestedTreeNode.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatNestedTreeNode.prototype._tabIndex;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatNestedTreeNode.prototype._differs;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/padding.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n}\nMatTreeNodePadding.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            },] }\n];\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\nif (false) {\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @type {?}\n     */\n    MatTreeNodePadding.prototype.level;\n    /**\n     * The indent for each level. Default number 40px from material design menu sub-menu spec.\n     * @type {?}\n     */\n    MatTreeNodePadding.prototype.indent;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            },] }\n];\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\nif (false) {\n    /** @type {?} */\n    MatTreeNodeOutlet.prototype.viewContainer;\n    /** @type {?} */\n    MatTreeNodeOutlet.prototype._node;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {\n}\nMatTree.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'mat-tree',\n                    'role': 'tree',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n            }] }\n];\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\n};\nif (false) {\n    /** @type {?} */\n    MatTree.prototype._nodeOutlet;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    constructor() {\n        super(...arguments);\n        this.recursive = false;\n    }\n}\nMatTreeNodeToggle.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            },] }\n];\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatTreeNodeToggle.prototype.recursive;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/tree-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CdkTreeModule, CommonModule, MatCommonModule],\n                exports: MAT_TREE_DIRECTIVES,\n                declarations: MAT_TREE_DIRECTIVES,\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/data-source/flat-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n    /**\n     * @param {?} transformFunction\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     * @param {?} getChildren\n     */\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenNode(node, level, resultNodes, parentMap) {\n        /** @type {?} */\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            /** @type {?} */\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe((/**\n                     * @param {?} children\n                     * @return {?}\n                     */\n                    children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    }));\n                }\n            }\n        }\n        return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((/**\n         * @param {?} child\n         * @param {?} index\n         * @return {?}\n         */\n        (child, index) => {\n            /** @type {?} */\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        }));\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    flattenNodes(structuredData) {\n        /** @type {?} */\n        let resultNodes = [];\n        structuredData.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => this._flattenNode(node, 0, resultNodes, [])));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        /** @type {?} */\n        let results = [];\n        /** @type {?} */\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => {\n            /** @type {?} */\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        }));\n        return results;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeFlattener.prototype.transformFunction;\n    /** @type {?} */\n    MatTreeFlattener.prototype.getLevel;\n    /** @type {?} */\n    MatTreeFlattener.prototype.isExpandable;\n    /** @type {?} */\n    MatTreeFlattener.prototype.getChildren;\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n    /**\n     * @param {?} _treeControl\n     * @param {?} _treeFlattener\n     * @param {?=} initialData\n     */\n    constructor(_treeControl, _treeFlattener, initialData = []) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        /** @type {?} */\n        const changes = [\n            collectionViewer.viewChange,\n            this._treeControl.expansionModel.changed,\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._flattenedData;\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._expandedData;\n    /** @type {?} */\n    MatTreeFlatDataSource.prototype._data;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTreeFlatDataSource.prototype._treeControl;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTreeFlatDataSource.prototype._treeFlattener;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/data-source/nested-data-source.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) { this._data.next(value); }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            return this.data;\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTreeNestedDataSource.prototype._data;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tree/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n//# sourceMappingURL=tree.js.map\n","import { Component, Inject, OnInit, OnDestroy } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { MenuService } from '@services';\r\nimport { OwlOptions } from 'ngx-owl-carousel-o';\r\nimport { Regex24Hours } from '@constants';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-new-menu',\r\n  templateUrl: './new-menu.component.html',\r\n  styleUrls: ['./new-menu.component.scss'],\r\n})\r\nexport class NewMenuComponent implements OnInit, OnDestroy {\r\n  public createMenuForm = new FormGroup({\r\n    name: new FormControl('', [\r\n      Validators.required,\r\n      Validators.minLength(3),\r\n      Validators.maxLength(30),\r\n    ]),\r\n    from: new FormControl('00:00', [\r\n      Validators.required,\r\n      Validators.pattern(Regex24Hours),\r\n    ]),\r\n    to: new FormControl('00:00', [\r\n      Validators.required,\r\n      Validators.pattern(Regex24Hours),\r\n    ]),\r\n    icon: new FormControl('', Validators.required),\r\n  });\r\n  public customOptions: OwlOptions = {\r\n    dots: false,\r\n    navSpeed: 700,\r\n    items: 5,\r\n    navText: ['', ''],\r\n    nav: true,\r\n  };\r\n  private edit = false;\r\n  public icons: Array<any>;\r\n  iconsSubscription = Subscription.EMPTY;\r\n  editSubscription = Subscription.EMPTY;\r\n  createSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<NewMenuComponent>,\r\n    private menuService: MenuService,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.data.editMenu) {\r\n      this.edit = true;\r\n      this.createMenuForm.get('name').setValue(this.data.editMenu.name);\r\n      this.createMenuForm.get('from').setValue(this.data.editMenu.from);\r\n      this.createMenuForm.get('to').setValue(this.data.editMenu.to);\r\n      this.createMenuForm.get('icon').setValue(this.data.editMenu.icon);\r\n    }\r\n    this.getIcons();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.iconsSubscription.unsubscribe();\r\n    this.editSubscription.unsubscribe();\r\n    this.createSubscription.unsubscribe();\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.closeModal();\r\n  }\r\n\r\n  private getIcons() {\r\n    this.iconsSubscription = this.menuService\r\n      .getIcons()\r\n      .subscribe((response) => {\r\n        this.icons = response.icons;\r\n      });\r\n  }\r\n  public closeModal(reload: boolean = false) {\r\n    this.dialogRef.close(reload);\r\n  }\r\n  public createMenu() {\r\n    this.createMenuForm.get('icon').markAsTouched();\r\n    if (this.createMenuForm.invalid) {\r\n      return;\r\n    }\r\n    if (this.edit) {\r\n      this.editSubscription = this.menuService\r\n        .editMenu(this.createMenuForm.value, this.data.editMenu.id)\r\n        .subscribe((data) => {\r\n          this.closeModal(true);\r\n        });\r\n    } else {\r\n      this.createSubscription = this.menuService\r\n        .createMenu(this.createMenuForm.value, this.data.restaurantId)\r\n        .subscribe((data) => {\r\n          this.closeModal(true);\r\n        });\r\n    }\r\n  }\r\n  public selectIconMenu(id: number) {\r\n    this.createMenuForm.get('icon').setValue(id);\r\n  }\r\n\r\n  /**\r\n   * Tells if the error on the icon carousel has to be visible.\r\n   */\r\n  public get isIconSelectionInvalid(): boolean {\r\n    const iconControl = this.createMenuForm.get('icon');\r\n    return iconControl.touched && iconControl.hasError('required');\r\n  }\r\n}\r\n","import { Component, Inject, OnInit, OnDestroy } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport {\r\n  FormGroup,\r\n  FormControl,\r\n  Validators,\r\n  FormBuilder,\r\n  FormArray,\r\n} from '@angular/forms';\r\nimport { MenuService } from '@services';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-create-modifier',\r\n  templateUrl: './create-modifier.component.html',\r\n  styleUrls: ['../new-menu/new-menu.component.scss'],\r\n})\r\nexport class CreateModifierComponent implements OnInit, OnDestroy {\r\n  public submit = false;\r\n  public formModifier = new FormGroup({\r\n    name: new FormControl('', [\r\n      Validators.required,\r\n      Validators.minLength(3),\r\n      Validators.maxLength(40),\r\n    ]),\r\n    optional_ask: new FormControl('', Validators.required),\r\n    multiple_option: new FormControl('', Validators.required),\r\n    max_options_per_user: new FormControl(1, [\r\n      Validators.required,\r\n      Validators.min(1),\r\n    ]),\r\n    min_options_per_user: new FormControl(1, [\r\n      Validators.required,\r\n      Validators.min(1),\r\n    ]),\r\n    modifiers: this.formBuilder.array([]),\r\n  });\r\n  public modifiers: FormArray;\r\n  private editSubscription = Subscription.EMPTY;\r\n  private createSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private menuService: MenuService,\r\n    private formBuilder: FormBuilder,\r\n    public dialogRef: MatDialogRef<CreateModifierComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.data.modifier) {\r\n      this.setModifierValues();\r\n    } else {\r\n      this.addModifier();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.editSubscription.unsubscribe();\r\n    this.createSubscription.unsubscribe();\r\n  }\r\n\r\n  public setModifierValues() {\r\n    const modifier = this.data.modifier;\r\n    this.formModifier.get('name').setValue(modifier.name);\r\n    const optionalAskValue = modifier.optional_ask ? 'si' : 'no';\r\n    this.formModifier.get('optional_ask').setValue(optionalAskValue);\r\n    const multipleOptionValue = modifier.multiple_option ? 'si' : 'no';\r\n    this.formModifier.get('multiple_option').setValue(multipleOptionValue);\r\n    this.formModifier\r\n      .get('max_options_per_user')\r\n      .setValue(modifier.max_options_per_user);\r\n    this.formModifier\r\n      .get('min_options_per_user')\r\n      .setValue(modifier.min_options_per_user);\r\n    for (const modifierElement of modifier.modifiers) {\r\n      this.addModifier({\r\n        name: modifierElement.name,\r\n        price_in_cents: modifierElement.price_in_cents,\r\n      });\r\n    }\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.closeModal();\r\n  }\r\n  public closeModal(reload: boolean = false) {\r\n    this.dialogRef.close(reload);\r\n  }\r\n  public addModifier(value?: any) {\r\n    if (this.formModifier.get('modifiers').invalid) {\r\n      return;\r\n    }\r\n    this.modifiers = this.formModifier.get('modifiers') as FormArray;\r\n    this.modifiers.push(this.addModifiers(value));\r\n  }\r\n  public createModifier() {\r\n    this.submit = true;\r\n    if (this.formModifier.invalid) {\r\n      return;\r\n    }\r\n    const data = {\r\n      name: this.formModifier.get('name').value,\r\n      optional_ask: this.formModifier.get('optional_ask').value === 'si',\r\n      multiple_option: this.formModifier.get('multiple_option').value === 'si',\r\n      min_options_per_user: this.formModifier.get('min_options_per_user').value,\r\n      max_options_per_user: this.formModifier.get('max_options_per_user').value,\r\n      modifiers: Array<any>(),\r\n    };\r\n    for (const item of this.formModifier.get('modifiers').value) {\r\n      data.modifiers.push({\r\n        name: item.name,\r\n        price_in_cents: Math.round(item.price_in_cents * 100),\r\n      });\r\n    }\r\n    if (this.data.modifier) {\r\n      this.editSubscription = this.menuService\r\n        .editModifier(data, this.data.modifier.id)\r\n        .subscribe(() => {\r\n          this.closeModal(true);\r\n        });\r\n    } else {\r\n      this.createSubscription = this.menuService\r\n        .createModifier(data, this.data.restaurantId)\r\n        .subscribe(() => {\r\n          this.closeModal(true);\r\n        });\r\n    }\r\n  }\r\n  public manageControlQuantityByOne(\r\n    form: FormGroup,\r\n    controlName: string,\r\n    operation: string\r\n  ): void {\r\n    const actualValue = form.get(controlName).value;\r\n    let newValue = actualValue;\r\n    if (operation === 'subtract') {\r\n      if (actualValue > 1) {\r\n        newValue = actualValue - 1;\r\n      }\r\n    } else if (operation === 'add') {\r\n      newValue = actualValue + 1;\r\n    }\r\n    form.get(controlName).setValue(newValue);\r\n  }\r\n  public addModifiers(value?: any): FormGroup {\r\n    const nameToAssign = value ? value.name : '';\r\n    const priceToAssign = value ? value.price_in_cents : '';\r\n    return this.formBuilder.group({\r\n      name: new FormControl(nameToAssign, [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(30),\r\n      ]),\r\n      price_in_cents: new FormControl(priceToAssign, [\r\n        Validators.required,\r\n        Validators.min(0),\r\n        Validators.pattern(/^[+]?([0-9]{0,})*[.]?([0-9]{0,2})?$/),\r\n      ]),\r\n    });\r\n  }\r\n  get getModifiers() {\r\n    return (this.formModifier.get('modifiers') as FormArray).controls;\r\n  }\r\n\r\n  removeModifier(index: number) {\r\n    this.modifiers = this.formModifier.get('modifiers') as FormArray;\r\n    this.modifiers.removeAt(index);\r\n  }\r\n}\r\n","import { CurrencyPipe } from '@angular/common';\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n@Pipe({\r\n  name: 'centsCurrency'\r\n})\r\nexport class CentsCurrencyPipe implements PipeTransform {\r\n  constructor(private currencyPipe: CurrencyPipe) {}\r\n  transform(cents: number): string {\r\n    return this.currencyPipe.transform(cents / 100, 'MXN');\r\n  }\r\n}\r\n","<div class=\"container-modal\">\r\n  <p class=\"title clr-gray\"><b>NUEVA CATEGORÃA</b></p>\r\n  <mat-icon aria-hidden=\"false\" aria-label=\"Cerrar modal\" class=\"clr-yellow close\" (click)=\"closeModal()\">close</mat-icon>\r\n  <form (ngSubmit)=\"createCategory()\">\r\n    <mat-form-field>\r\n      <mat-label>Nombre categorÃ­a</mat-label>\r\n      <input matInput name=\"name\" [formControl]=\"name\"/>\r\n      <mat-error\r\n        *ngIf=\"name.hasError('required')\">\r\n        Esta informaciÃ³n es necesaria\r\n      </mat-error>\r\n      <mat-error\r\n        *ngIf=\"name.touched && name.hasError('minlength')\">\r\n        El mÃ­nimo de caracteres es de 3 caracteres\r\n      </mat-error>\r\n      <mat-error\r\n        *ngIf=\"name.touched && name.hasError('maxlength')\">\r\n        El mÃ¡ximo de caracteres es de 100 caracteres\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <div class=\"inl buttons\">\r\n      <div class=\"btns-transparent\" (click)=\"closeModal()\">\r\n        <span>Cancelar</span>\r\n      </div>\r\n      <button type=\"submit\" class=\"btns\">\r\n        <span>Continuar</span>\r\n      </button>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-delete-menu',\r\n  templateUrl: './delete-menu.component.html',\r\n  styleUrls: ['../new-menu/new-menu.component.scss']\r\n})\r\nexport class DeleteMenuComponent implements OnInit {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DeleteMenuComponent>\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.closeModal(false);\r\n  }\r\n  public closeModal(status: boolean) {\r\n    this.dialogRef.close(status);\r\n  }\r\n}\r\n","<ng-template>\n  <div\n    class=\"mat-menu-panel\"\n    [id]=\"panelId\"\n    [ngClass]=\"_classList\"\n    (keydown)=\"_handleKeydown($event)\"\n    (click)=\"closed.emit('click')\"\n    [@transformMenu]=\"_panelAnimationState\"\n    (@transformMenu.start)=\"_onAnimationStart($event)\"\n    (@transformMenu.done)=\"_onAnimationDone($event)\"\n    tabindex=\"-1\"\n    role=\"menu\"\n    [attr.aria-label]=\"ariaLabel || null\"\n    [attr.aria-labelledby]=\"ariaLabelledby || null\"\n    [attr.aria-describedby]=\"ariaDescribedby || null\">\n    <div class=\"mat-menu-content\">\n      <ng-content></ng-content>\n    </div>\n  </div>\n</ng-template>\n","<ng-content></ng-content>\n<div class=\"mat-menu-ripple\" matRipple\n     [matRippleDisabled]=\"disableRipple || disabled\"\n     [matRippleTrigger]=\"_getHostElement()\">\n</div>\n","import { Component, Inject, OnInit, OnDestroy } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Validators, FormControl } from '@angular/forms';\r\nimport { MenuService } from '@services';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-new-category',\r\n  templateUrl: './new-category.component.html',\r\n  styleUrls: ['../new-menu/new-menu.component.scss']\r\n})\r\nexport class NewCategoryComponent implements OnInit, OnDestroy {\r\n  public name = new FormControl('', [\r\n    Validators.required,\r\n    Validators.minLength(3),\r\n    Validators.maxLength(100)\r\n  ]);\r\n  public edit = false;\r\n  private editSubscription = Subscription.EMPTY;\r\n  private createSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private menuService: MenuService,\r\n    public dialogRef: MatDialogRef<NewCategoryComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.data.category) {\r\n      this.edit = true;\r\n      this.name.setValue(this.data.category.name);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.editSubscription.unsubscribe();\r\n    this.createSubscription.unsubscribe();\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.closeModal();\r\n  }\r\n  public closeModal(reload: boolean = false) {\r\n    this.dialogRef.close(reload);\r\n  }\r\n\r\n  public createCategory() {\r\n    if (this.name.invalid) {\r\n      return;\r\n    }\r\n    if (this.edit) {\r\n      this.editSubscription = this.menuService\r\n        .editCategory(\r\n          {\r\n            name: this.name.value\r\n          },\r\n          this.data.category.id\r\n        )\r\n        .subscribe(data => {\r\n          this.closeModal(true);\r\n        });\r\n    } else {\r\n      this.createSubscription = this.menuService\r\n        .createCategory(\r\n          {\r\n            name: this.name.value\r\n          },\r\n          this.data.menuID\r\n        )\r\n        .subscribe(data => {\r\n          this.closeModal(true);\r\n        });\r\n    }\r\n  }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MenuRoutingModule } from './menu-routing.module';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { NewCategoryComponent } from './new-category/new-category.component';\r\nimport { MenuComponent } from './menu.component';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { NgxMaskModule } from 'ngx-mask';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { DeleteMenuComponent } from './delete-menu/delete-menu.component';\r\nimport { CreateModifierComponent } from './create-modifier/create-modifier.component';\r\nimport { AddModifierComponent } from './add-modifier/add-modifier.component';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { CentsCurrencyModule } from '@pipes/cents-currency/cents-currency.module';\r\nimport { SectionHeaderModule } from '@components/section-header/section-header.module';\r\nimport { MenuOnboardingComponent } from './menu-onboarding/menu-onboarding.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MenuComponent,\r\n    NewCategoryComponent,\r\n    DeleteMenuComponent,\r\n    CreateModifierComponent,\r\n    AddModifierComponent,\r\n    MenuOnboardingComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MenuRoutingModule,\r\n    MatSnackBarModule,\r\n    MatFormFieldModule,\r\n    MatGridListModule,\r\n    MatToolbarModule,\r\n    MatTreeModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatInputModule,\r\n    MatExpansionModule,\r\n    MatRadioModule,\r\n    NgxMaskModule,\r\n    DragDropModule,\r\n    MatSelectModule,\r\n    SectionHeaderModule,\r\n    CentsCurrencyModule\r\n  ],\r\n  schemas: [\r\n    CUSTOM_ELEMENTS_SCHEMA\r\n  ],\r\n  entryComponents: [\r\n    NewCategoryComponent,\r\n    DeleteMenuComponent,\r\n    CreateModifierComponent,\r\n    AddModifierComponent,\r\n    MenuOnboardingComponent,\r\n  ]\r\n})\r\nexport class MenuModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LayoutRoutingModule } from './layout-routing.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { CarouselModule } from 'ngx-owl-carousel-o';\r\nimport { NgxMaskModule } from 'ngx-mask';\r\nimport { MenuModule } from './menu/menu.module';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { NewMenuComponent } from './menu/new-menu/new-menu.component';\r\nimport { MenuService } from '@services';\r\n@NgModule({\r\n  declarations: [LayoutComponent, NewMenuComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    LayoutRoutingModule,\r\n    MatIconModule,\r\n    MatDialogModule,\r\n    CarouselModule,\r\n    MenuModule,\r\n    MatFormFieldModule,\r\n    NgxMaskModule.forRoot()\r\n  ],\r\n  providers: [MenuService],\r\n  entryComponents: [NewMenuComponent]\r\n})\r\nexport class LayoutModule {}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { RestaurantService, FranchiseService } from '@services';\r\nimport { Restaurant, Franchise, ResponseRestaurant } from '@models';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { version } from '../../../../package.json';\r\nimport { Subscription } from 'rxjs';\r\nimport { IRestaurant } from '@interfaces';\r\nimport { map } from 'rxjs/operators';\r\n@Component({\r\n  selector: 'app-layout',\r\n  templateUrl: './layout.component.html',\r\n  styleUrls: ['./layout.component.scss']\r\n})\r\nexport class LayoutComponent implements OnInit, OnDestroy {\r\n  public restaurants: Array<Restaurant>;\r\n  public restaurantSelection = this.fb.group({\r\n    restaurant: [null]\r\n  });\r\n  public version: string = version;\r\n  private restaurantSubscription = Subscription.EMPTY;\r\n  private franchiseSubscription = Subscription.EMPTY;\r\n  private restaurantsSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private restaurantService: RestaurantService,\r\n    private franchiseService: FranchiseService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initRestaurantListener();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.restaurantSubscription.unsubscribe();\r\n    this.franchiseSubscription.unsubscribe();\r\n    this.restaurantsSubscription.unsubscribe();\r\n  }\r\n\r\n  initRestaurantListener(): void {\r\n    this.restaurantSubscription = this.restaurantService.currentRestaurant.subscribe(\r\n      (restaurant: Restaurant) => {\r\n        this.restaurantSelection.get('restaurant').setValue(restaurant.id);\r\n        this.franchiseSubscription = this.franchiseService.currentFranchise.subscribe(\r\n          (franchise: Franchise) => {\r\n            this.restaurantsSubscription = this.restaurantService\r\n              .getRestaurants(franchise.id)\r\n              .pipe(\r\n                map((response: ResponseRestaurant) => {\r\n                  const restaurants = response.restaurants.map(\r\n                    (pRestaurant: IRestaurant) => {\r\n                      return new Restaurant(pRestaurant);\r\n                    }\r\n                  );\r\n\r\n                  return restaurants;\r\n                })\r\n              )\r\n              .subscribe((restaurants: Array<Restaurant>) => {\r\n                this.restaurants = restaurants;\r\n              });\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  public restaurantChanged(restaurantId: number): void {\r\n    localStorage.setItem('restaurantId', JSON.stringify(restaurantId));\r\n    location.reload();\r\n  }\r\n}\r\n","<section class=\"inl\">\r\n  <aside>\r\n    <form class=\"head\" [formGroup]=\"restaurantSelection\" novalidate>\r\n      <img src=\"assets/images/logos/logo-white.svg\" class=\"logo\" />\r\n      <mat-form-field class=\"franchise-select\">\r\n        <mat-select\r\n          formControlName=\"restaurant\"\r\n          (selectionChange)=\"restaurantChanged($event.value)\"\r\n        >\r\n          <mat-option\r\n            *ngFor=\"let restaurant of restaurants; let i = index\"\r\n            [value]=\"restaurant.id\"\r\n            select\r\n          >\r\n            {{ restaurant.name }}\r\n          </mat-option>\r\n        </mat-select>\r\n        <small> Horario: 7:00 a 19:00</small>\r\n      </mat-form-field>\r\n    </form>\r\n    <ul>\r\n      <li>\r\n        <a class=\"inl\" routerLink=\"/admin/dashboard\" routerLinkActive=\"active\">\r\n          <div class=\"relative\">\r\n            <img src=\"assets/images/icons/icon-dashboard.svg\" alt=\"Dashboard\" />\r\n            <img\r\n              src=\"assets/images/icons/icon-dashboard-yellow.svg\"\r\n              alt=\"Dashboard - active\"\r\n            />\r\n          </div>\r\n          Dashboard\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a\r\n          class=\"inl\"\r\n          routerLink=\"/admin/income-and-payments\"\r\n          routerLinkActive=\"active\"\r\n        >\r\n          <div class=\"relative\">\r\n            <img\r\n              src=\"assets/images/icons/icon-financial-reports.svg\"\r\n              alt=\"Ingresos y pagos\"\r\n            />\r\n            <img\r\n              src=\"assets/images/icons/icon-financial-reports-yellow.svg\"\r\n              alt=\"Ingresos y pagos - active\"\r\n            />\r\n          </div>\r\n          Ingresos y pagos\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a class=\"inl\" routerLink=\"/admin/reports\" routerLinkActive=\"active\">\r\n          <div class=\"relative\">\r\n            <img src=\"assets/images/icons/icon-reports.svg\" alt=\"Reportes\" />\r\n            <img\r\n              src=\"assets/images/icons/icon-reports-yellow.svg\"\r\n              alt=\"Reportes - active\"\r\n            />\r\n          </div>\r\n          Reportes\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a class=\"inl\" routerLink=\"/admin/menu\" routerLinkActive=\"active\">\r\n          <div class=\"relative\">\r\n            <img src=\"assets/images/icons/icon-testimonial.svg\" alt=\"MenÃº\" />\r\n            <img\r\n              src=\"assets/images/icons/icon-testimonial-yellow.svg\"\r\n              alt=\"MenÃº - active\"\r\n            />\r\n          </div>\r\n          MenÃº\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a class=\"inl\" routerLink=\"/admin/users\" routerLinkActive=\"active\">\r\n          <div class=\"relative\">\r\n            <img src=\"assets/images/icons/icon-community.svg\" alt=\"Usuarios\" />\r\n            <img\r\n              src=\"assets/images/icons/icon-community-yellow.svg\"\r\n              alt=\"Usuarios - active\"\r\n            />\r\n          </div>\r\n          Usuarios\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a class=\"inl\" routerLink=\"branches\" routerLinkActive=\"active\">\r\n          <div class=\"relative\">\r\n            <img\r\n              src=\"assets/images/icons/icon-tutorials.svg\"\r\n              alt=\"Sucursales\"\r\n            />\r\n            <img\r\n              src=\"assets/images/icons/icon-tutorials-yellow.svg\"\r\n              alt=\"Sucursales - active\"\r\n            />\r\n          </div>\r\n          Sucursales\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a\r\n          class=\"inl\"\r\n          routerLink=\"/admin/preferences\"\r\n          routerLinkActive=\"active\"\r\n        >\r\n          <div class=\"relative\">\r\n            <img\r\n              src=\"assets/images/icons/icon-widget-config.svg\"\r\n              alt=\"Preferencias\"\r\n            />\r\n            <img\r\n              src=\"assets/images/icons/icon-widget-config-yellow.svg\"\r\n              alt=\"Preferencias - active\"\r\n            />\r\n          </div>\r\n          Preferencias\r\n        </a>\r\n      </li>\r\n    </ul>\r\n    <div class=\"menu-bottom\">\r\n      <p>Ver {{ version }}</p>\r\n    </div>\r\n  </aside>\r\n  <div id=\"content\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</section>\r\n","import { reduce } from './reduce';\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\nexport function toArray() {\n    return reduce(toArrayReducer, []);\n}\n//# sourceMappingURL=toArray.js.map","import { __decorate, __param } from 'tslib';\r\nimport { Injectable, isDevMode, ErrorHandler, InjectionToken, PLATFORM_ID, Inject, Optional, TemplateRef, Input, Directive, EventEmitter, ElementRef, ChangeDetectorRef, ContentChildren, Output, HostListener, Component, NgZone, Renderer2, Attribute, HostBinding, NgModule } from '@angular/core';\r\nimport { isPlatformBrowser, LocationStrategy, CommonModule } from '@angular/common';\r\nimport { Subject, merge, of, from } from 'rxjs';\r\nimport { EventManager } from '@angular/platform-browser';\r\nimport { tap, filter, switchMap, first, take, skip, map, toArray, delay } from 'rxjs/operators';\r\nimport { ActivatedRoute, Router, NavigationEnd } from '@angular/router';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\n\r\nlet ResizeService = class ResizeService {\r\n    constructor(eventManager) {\r\n        this.eventManager = eventManager;\r\n        this.resizeSubject = new Subject();\r\n        this.eventManager.addGlobalEventListener('window', 'resize', this.onResize.bind(this));\r\n        this.eventManager.addGlobalEventListener('window', 'onload', this.onLoaded.bind(this));\r\n    }\r\n    /**\r\n     * Makes resizeSubject become Observable\r\n     * @returns Observable of resizeSubject\r\n     */\r\n    get onResize$() {\r\n        return this.resizeSubject.asObservable();\r\n    }\r\n    /**\r\n     * Handler of 'resize' event. Passes data throw resizeSubject\r\n     * @param event Event Object of 'resize' event\r\n     */\r\n    onResize(event) {\r\n        this.resizeSubject.next(event.target);\r\n    }\r\n    /**\r\n     * Handler of 'onload' event. Defines the width of window\r\n     * @param event Event Object of 'onload' event\r\n     */\r\n    onLoaded(event) {\r\n        this.windowWidth = event.target;\r\n    }\r\n};\r\nResizeService.ctorParameters = () => [\r\n    { type: EventManager }\r\n];\r\nResizeService = __decorate([\r\n    Injectable()\r\n], ResizeService);\r\n\r\n/**\r\n * Defaults value of options\r\n */\r\nclass OwlCarouselOConfig {\r\n    constructor() {\r\n        this.items = 3;\r\n        this.skip_validateItems = false;\r\n        this.loop = false;\r\n        this.center = false;\r\n        this.rewind = false;\r\n        this.mouseDrag = true;\r\n        this.touchDrag = true;\r\n        this.pullDrag = true;\r\n        this.freeDrag = false;\r\n        this.margin = 0;\r\n        this.stagePadding = 0;\r\n        this.merge = false;\r\n        this.mergeFit = true;\r\n        this.autoWidth = false;\r\n        this.startPosition = 0;\r\n        this.rtl = false;\r\n        this.smartSpeed = 250;\r\n        this.fluidSpeed = false;\r\n        this.dragEndSpeed = false;\r\n        this.responsive = {};\r\n        this.responsiveRefreshRate = 200;\r\n        // defaults to Navigation\r\n        this.nav = false;\r\n        this.navText = ['prev', 'next'];\r\n        this.navSpeed = false;\r\n        this.slideBy = 1; // stage moves on 1 width of slide; if slideBy = 2, stage moves on 2 widths of slide\r\n        this.dots = true;\r\n        this.dotsEach = false;\r\n        this.dotsData = false;\r\n        this.dotsSpeed = false;\r\n        // defaults to Autoplay\r\n        this.autoplay = false;\r\n        this.autoplayTimeout = 5000;\r\n        this.autoplayHoverPause = false;\r\n        this.autoplaySpeed = false;\r\n        // defaults to LazyLoading\r\n        this.lazyLoad = false;\r\n        this.lazyLoadEager = 0;\r\n        // defaults to Animate\r\n        this.slideTransition = '';\r\n        this.animateOut = false;\r\n        this.animateIn = false;\r\n        // defaults to AutoHeight\r\n        this.autoHeight = false;\r\n        // defaults to Hash\r\n        this.URLhashListener = false;\r\n    }\r\n}\r\n/**\r\n * we can't read types from OwlOptions in javascript because of props have undefined value and types of those props are used for validating inputs\r\n * class below is copy of OwlOptions but its all props have string value showing certain type;\r\n * this is class is being used just in method _validateOptions() of CarouselService;\r\n */\r\nclass OwlOptionsMockedTypes {\r\n    constructor() {\r\n        this.items = 'number';\r\n        this.skip_validateItems = 'boolean';\r\n        this.loop = 'boolean';\r\n        this.center = 'boolean';\r\n        this.rewind = 'boolean';\r\n        this.mouseDrag = 'boolean';\r\n        this.touchDrag = 'boolean';\r\n        this.pullDrag = 'boolean';\r\n        this.freeDrag = 'boolean';\r\n        this.margin = 'number';\r\n        this.stagePadding = 'number';\r\n        this.merge = 'boolean';\r\n        this.mergeFit = 'boolean';\r\n        this.autoWidth = 'boolean';\r\n        this.startPosition = 'number|string';\r\n        this.rtl = 'boolean';\r\n        this.smartSpeed = 'number';\r\n        this.fluidSpeed = 'boolean';\r\n        this.dragEndSpeed = 'number|boolean';\r\n        this.responsive = {};\r\n        this.responsiveRefreshRate = 'number';\r\n        // defaults to Navigation\r\n        this.nav = 'boolean';\r\n        this.navText = 'string[]';\r\n        this.navSpeed = 'number|boolean';\r\n        this.slideBy = 'number|string'; // stage moves on 1 width of slide; if slideBy = 2, stage moves on 2 widths of slide\r\n        this.dots = 'boolean';\r\n        this.dotsEach = 'number|boolean';\r\n        this.dotsData = 'boolean';\r\n        this.dotsSpeed = 'number|boolean';\r\n        // defaults to Autoplay\r\n        this.autoplay = 'boolean';\r\n        this.autoplayTimeout = 'number';\r\n        this.autoplayHoverPause = 'boolean';\r\n        this.autoplaySpeed = 'number|boolean';\r\n        // defaults to LazyLoading\r\n        this.lazyLoad = 'boolean';\r\n        this.lazyLoadEager = 'number';\r\n        // defaults to Animate\r\n        this.slideTransition = 'string';\r\n        this.animateOut = 'string|boolean';\r\n        this.animateIn = 'string|boolean';\r\n        // defaults to AutoHeight\r\n        this.autoHeight = 'boolean';\r\n        // defaults to Hash\r\n        this.URLhashListener = \"boolean\";\r\n    }\r\n}\r\n\r\nlet OwlLogger = class OwlLogger {\r\n    constructor(errorHandler) {\r\n        this.errorHandler = errorHandler;\r\n    }\r\n    log(value, ...rest) {\r\n        if (isDevMode()) {\r\n            console.log(value, ...rest);\r\n        }\r\n    }\r\n    error(error) {\r\n        this.errorHandler.handleError(error);\r\n    }\r\n    warn(value, ...rest) {\r\n        console.warn(value, ...rest);\r\n    }\r\n};\r\nOwlLogger.ctorParameters = () => [\r\n    { type: ErrorHandler }\r\n];\r\nOwlLogger = __decorate([\r\n    Injectable()\r\n], OwlLogger);\r\n\r\n/**\r\n * Current state information and their tags.\r\n */\r\nclass States {\r\n}\r\n/**\r\n * Enumeration for types.\r\n * @enum {String}\r\n */\r\nvar Type;\r\n(function (Type) {\r\n    Type[\"Event\"] = \"event\";\r\n    Type[\"State\"] = \"state\";\r\n})(Type || (Type = {}));\r\n;\r\n/**\r\n * Enumeration for width.\r\n * @enum {String}\r\n */\r\nvar Width;\r\n(function (Width) {\r\n    Width[\"Default\"] = \"default\";\r\n    Width[\"Inner\"] = \"inner\";\r\n    Width[\"Outer\"] = \"outer\";\r\n})(Width || (Width = {}));\r\n;\r\n/**\r\n * Model for coords of .owl-stage\r\n */\r\nclass Coords {\r\n}\r\n/**\r\n * Model for all current data of carousel\r\n */\r\nclass CarouselCurrentData {\r\n}\r\nlet CarouselService = class CarouselService {\r\n    constructor(logger) {\r\n        this.logger = logger;\r\n        /**\r\n       * Subject for passing data needed for managing View\r\n       */\r\n        this._viewSettingsShipper$ = new Subject();\r\n        /**\r\n       * Subject for notification when the carousel got initializes\r\n       */\r\n        this._initializedCarousel$ = new Subject();\r\n        /**\r\n       * Subject for notification when the carousel's settings start changinf\r\n       */\r\n        this._changeSettingsCarousel$ = new Subject();\r\n        /**\r\n       * Subject for notification when the carousel's settings have changed\r\n       */\r\n        this._changedSettingsCarousel$ = new Subject();\r\n        /**\r\n       * Subject for notification when the carousel starts translating or moving\r\n       */\r\n        this._translateCarousel$ = new Subject();\r\n        /**\r\n       * Subject for notification when the carousel stopped translating or moving\r\n       */\r\n        this._translatedCarousel$ = new Subject();\r\n        /**\r\n       * Subject for notification when the carousel's rebuilding caused by 'resize' event starts\r\n       */\r\n        this._resizeCarousel$ = new Subject();\r\n        /**\r\n       * Subject for notification  when the carousel's rebuilding caused by 'resize' event is ended\r\n       */\r\n        this._resizedCarousel$ = new Subject();\r\n        /**\r\n       * Subject for notification when the refresh of carousel starts\r\n       */\r\n        this._refreshCarousel$ = new Subject();\r\n        /**\r\n       * Subject for notification when the refresh of carousel is ended\r\n       */\r\n        this._refreshedCarousel$ = new Subject();\r\n        /**\r\n       * Subject for notification when the dragging of carousel starts\r\n       */\r\n        this._dragCarousel$ = new Subject();\r\n        /**\r\n       * Subject for notification when the dragging of carousel is ended\r\n       */\r\n        this._draggedCarousel$ = new Subject();\r\n        /**\r\n         * Current settings for the carousel.\r\n         */\r\n        this.settings = {\r\n            items: 0\r\n        };\r\n        /**\r\n       * Initial data for setting classes to element .owl-carousel\r\n       */\r\n        this.owlDOMData = {\r\n            rtl: false,\r\n            isResponsive: false,\r\n            isRefreshed: false,\r\n            isLoaded: false,\r\n            isLoading: false,\r\n            isMouseDragable: false,\r\n            isGrab: false,\r\n            isTouchDragable: false\r\n        };\r\n        /**\r\n       * Initial data of .owl-stage\r\n       */\r\n        this.stageData = {\r\n            transform: 'translate3d(0px,0px,0px)',\r\n            transition: '0s',\r\n            width: 0,\r\n            paddingL: 0,\r\n            paddingR: 0\r\n        };\r\n        /**\r\n         * All real items.\r\n         */\r\n        this._items = []; // is equal to this.slides\r\n        /**\r\n       * Array with width of every slide.\r\n       */\r\n        this._widths = [];\r\n        /**\r\n       * Currently suppressed events to prevent them from beeing retriggered.\r\n       */\r\n        this._supress = {};\r\n        /**\r\n         * References to the running plugins of this carousel.\r\n         */\r\n        this._plugins = {};\r\n        /**\r\n       * Absolute current position.\r\n       */\r\n        this._current = null;\r\n        /**\r\n       * All cloned items.\r\n       */\r\n        this._clones = [];\r\n        /**\r\n         * Merge values of all items.\r\n         * @todo Maybe this could be part of a plugin.\r\n         */\r\n        this._mergers = [];\r\n        /**\r\n       * Animation speed in milliseconds.\r\n       */\r\n        this._speed = null;\r\n        /**\r\n       * Coordinates of all items in pixel.\r\n       * @todo The name of this member is missleading.\r\n       */\r\n        this._coordinates = [];\r\n        /**\r\n       * Current breakpoint.\r\n       * @todo Real media queries would be nice.\r\n       */\r\n        this._breakpoint = null;\r\n        /**\r\n         * Prefix for id of cloned slides\r\n         */\r\n        this.clonedIdPrefix = 'cloned-';\r\n        /**\r\n         * Current options set by the caller including defaults.\r\n         */\r\n        this._options = {};\r\n        /**\r\n         * Invalidated parts within the update process.\r\n         */\r\n        this._invalidated = {};\r\n        /**\r\n         * Current state information and their tags.\r\n         */\r\n        this._states = {\r\n            current: {},\r\n            tags: {\r\n                initializing: ['busy'],\r\n                animating: ['busy'],\r\n                dragging: ['interacting']\r\n            }\r\n        };\r\n        /**\r\n         * Ordered list of workers for the update process.\r\n       */\r\n        this._pipe = [\r\n            // {\r\n            //   filter: ['width', 'settings'],\r\n            //   run: () => {\r\n            //     this._width = this.carouselWindowWidth;\r\n            //   }\r\n            // },\r\n            {\r\n                filter: ['width', 'items', 'settings'],\r\n                run: cache => {\r\n                    cache.current = this._items && this._items[this.relative(this._current)].id;\r\n                }\r\n            },\r\n            // {\r\n            //   filter: ['items', 'settings'],\r\n            //   run: function() {\r\n            //     // this.$stage.children('.cloned').remove();\r\n            //   }\r\n            // },\r\n            {\r\n                filter: ['width', 'items', 'settings'],\r\n                run: (cache) => {\r\n                    const margin = this.settings.margin || '', grid = !this.settings.autoWidth, rtl = this.settings.rtl, css = {\r\n                        'margin-left': rtl ? margin : '',\r\n                        'margin-right': rtl ? '' : margin\r\n                    };\r\n                    if (!grid) {\r\n                        this.slidesData.forEach(slide => {\r\n                            slide.marginL = css['margin-left'];\r\n                            slide.marginR = css['margin-right'];\r\n                        });\r\n                    }\r\n                    cache.css = css;\r\n                }\r\n            }, {\r\n                filter: ['width', 'items', 'settings'],\r\n                run: (cache) => {\r\n                    const width = +(this.width() / this.settings.items).toFixed(3) - this.settings.margin, grid = !this.settings.autoWidth, widths = [];\r\n                    let merge = null, iterator = this._items.length;\r\n                    cache.items = {\r\n                        merge: false,\r\n                        width: width\r\n                    };\r\n                    while (iterator--) {\r\n                        merge = this._mergers[iterator];\r\n                        merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;\r\n                        cache.items.merge = merge > 1 || cache.items.merge;\r\n                        widths[iterator] = !grid ? this._items[iterator].width ? this._items[iterator].width : width : width * merge;\r\n                    }\r\n                    this._widths = widths;\r\n                    this.slidesData.forEach((slide, i) => {\r\n                        slide.width = this._widths[i];\r\n                        slide.marginR = cache.css['margin-right'];\r\n                        slide.marginL = cache.css['margin-left'];\r\n                    });\r\n                }\r\n            }, {\r\n                filter: ['items', 'settings'],\r\n                run: () => {\r\n                    const clones = [], items = this._items, settings = this.settings, \r\n                    // TODO: Should be computed from number of min width items in stage\r\n                    view = Math.max(settings.items * 2, 4), size = Math.ceil(items.length / 2) * 2;\r\n                    let append = [], prepend = [], repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0;\r\n                    repeat /= 2;\r\n                    while (repeat--) {\r\n                        // Switch to only using appended clones\r\n                        clones.push(this.normalize(clones.length / 2, true));\r\n                        append.push(Object.assign({}, this.slidesData[clones[clones.length - 1]]));\r\n                        clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));\r\n                        prepend.unshift(Object.assign({}, this.slidesData[clones[clones.length - 1]]));\r\n                    }\r\n                    this._clones = clones;\r\n                    append = append.map(slide => {\r\n                        slide.id = `${this.clonedIdPrefix}${slide.id}`;\r\n                        slide.isActive = false;\r\n                        slide.isCloned = true;\r\n                        return slide;\r\n                    });\r\n                    prepend = prepend.map(slide => {\r\n                        slide.id = `${this.clonedIdPrefix}${slide.id}`;\r\n                        slide.isActive = false;\r\n                        slide.isCloned = true;\r\n                        return slide;\r\n                    });\r\n                    this.slidesData = prepend.concat(this.slidesData).concat(append);\r\n                }\r\n            }, {\r\n                filter: ['width', 'items', 'settings'],\r\n                run: () => {\r\n                    const rtl = this.settings.rtl ? 1 : -1, size = this._clones.length + this._items.length, coordinates = [];\r\n                    let iterator = -1, previous = 0, current = 0;\r\n                    while (++iterator < size) {\r\n                        previous = coordinates[iterator - 1] || 0;\r\n                        current = this._widths[this.relative(iterator)] + this.settings.margin;\r\n                        coordinates.push(previous + current * rtl);\r\n                    }\r\n                    this._coordinates = coordinates;\r\n                }\r\n            }, {\r\n                filter: ['width', 'items', 'settings'],\r\n                run: () => {\r\n                    const padding = this.settings.stagePadding, coordinates = this._coordinates, css = {\r\n                        'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,\r\n                        'padding-left': padding || '',\r\n                        'padding-right': padding || ''\r\n                    };\r\n                    this.stageData.width = css.width; // use this property in *ngIf directive for .owl-stage element\r\n                    this.stageData.paddingL = css['padding-left'];\r\n                    this.stageData.paddingR = css['padding-right'];\r\n                }\r\n            }, {\r\n                //   filter: [ 'width', 'items', 'settings' ],\r\n                //   run: cache => {\r\n                // \t\t// this method sets the width for every slide, but I set it in different way earlier\r\n                // \t\tconst grid = !this.settings.autoWidth,\r\n                // \t\titems = this.$stage.children(); // use this.slidesData\r\n                //     let iterator = this._coordinates.length;\r\n                //     if (grid && cache.items.merge) {\r\n                //       while (iterator--) {\r\n                //         cache.css.width = this._widths[this.relative(iterator)];\r\n                //         items.eq(iterator).css(cache.css);\r\n                //       }\r\n                //     } else if (grid) {\r\n                //       cache.css.width = cache.items.width;\r\n                //       items.css(cache.css);\r\n                //     }\r\n                //   }\r\n                // }, {\r\n                //   filter: [ 'items' ],\r\n                //   run: function() {\r\n                //     this._coordinates.length < 1 && this.$stage.removeAttr('style');\r\n                //   }\r\n                // }, {\r\n                filter: ['width', 'items', 'settings'],\r\n                run: cache => {\r\n                    let current = cache.current ? this.slidesData.findIndex(slide => slide.id === cache.current) : 0;\r\n                    current = Math.max(this.minimum(), Math.min(this.maximum(), current));\r\n                    this.reset(current);\r\n                }\r\n            }, {\r\n                filter: ['position'],\r\n                run: () => {\r\n                    this.animate(this.coordinates(this._current));\r\n                }\r\n            }, {\r\n                filter: ['width', 'position', 'items', 'settings'],\r\n                run: () => {\r\n                    const rtl = this.settings.rtl ? 1 : -1, padding = this.settings.stagePadding * 2, matches = [];\r\n                    let begin, end, inner, outer, i, n;\r\n                    begin = this.coordinates(this.current());\r\n                    if (typeof begin === 'number') {\r\n                        begin += padding;\r\n                    }\r\n                    else {\r\n                        begin = 0;\r\n                    }\r\n                    end = begin + this.width() * rtl;\r\n                    if (rtl === -1 && this.settings.center) {\r\n                        const result = this._coordinates.filter(element => {\r\n                            return this.settings.items % 2 === 1 ? element >= begin : element > begin;\r\n                        });\r\n                        begin = result.length ? result[result.length - 1] : begin;\r\n                    }\r\n                    for (i = 0, n = this._coordinates.length; i < n; i++) {\r\n                        inner = Math.ceil(this._coordinates[i - 1] || 0);\r\n                        outer = Math.ceil(Math.abs(this._coordinates[i]) + padding * rtl);\r\n                        if ((this._op(inner, '<=', begin) && (this._op(inner, '>', end)))\r\n                            || (this._op(outer, '<', begin) && this._op(outer, '>', end))) {\r\n                            matches.push(i);\r\n                        }\r\n                    }\r\n                    this.slidesData.forEach(slide => {\r\n                        slide.isActive = false;\r\n                        return slide;\r\n                    });\r\n                    matches.forEach(item => {\r\n                        this.slidesData[item].isActive = true;\r\n                    });\r\n                    if (this.settings.center) {\r\n                        this.slidesData.forEach(slide => {\r\n                            slide.isCentered = false;\r\n                            return slide;\r\n                        });\r\n                        this.slidesData[this.current()].isCentered = true;\r\n                    }\r\n                }\r\n            }\r\n        ];\r\n    }\r\n    // Is needed for tests\r\n    get invalidated() {\r\n        return this._invalidated;\r\n    }\r\n    // is needed for tests\r\n    get states() {\r\n        return this._states;\r\n    }\r\n    /**\r\n     * Makes _viewSettingsShipper$ Subject become Observable\r\n     * @returns Observable of _viewSettingsShipper$ Subject\r\n     */\r\n    getViewCurSettings() {\r\n        return this._viewSettingsShipper$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _initializedCarousel$ Subject become Observable\r\n     * @returns Observable of _initializedCarousel$ Subject\r\n     */\r\n    getInitializedState() {\r\n        return this._initializedCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _changeSettingsCarousel$ Subject become Observable\r\n     * @returns Observable of _changeSettingsCarousel$ Subject\r\n     */\r\n    getChangeState() {\r\n        return this._changeSettingsCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _changedSettingsCarousel$ Subject become Observable\r\n     * @returns Observable of _changedSettingsCarousel$ Subject\r\n     */\r\n    getChangedState() {\r\n        return this._changedSettingsCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _translateCarousel$ Subject become Observable\r\n     * @returns Observable of _translateCarousel$ Subject\r\n     */\r\n    getTranslateState() {\r\n        return this._translateCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _translatedCarousel$ Subject become Observable\r\n     * @returns Observable of _translatedCarousel$ Subject\r\n     */\r\n    getTranslatedState() {\r\n        return this._translatedCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _resizeCarousel$ Subject become Observable\r\n     * @returns Observable of _resizeCarousel$ Subject\r\n     */\r\n    getResizeState() {\r\n        return this._resizeCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _resizedCarousel$ Subject become Observable\r\n     * @returns Observable of _resizedCarousel$ Subject\r\n     */\r\n    getResizedState() {\r\n        return this._resizedCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _refreshCarousel$ Subject become Observable\r\n     * @returns Observable of _refreshCarousel$ Subject\r\n     */\r\n    getRefreshState() {\r\n        return this._refreshCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _refreshedCarousel$ Subject become Observable\r\n     * @returns Observable of _refreshedCarousel$ Subject\r\n     */\r\n    getRefreshedState() {\r\n        return this._refreshedCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _dragCarousel$ Subject become Observable\r\n     * @returns Observable of _dragCarousel$ Subject\r\n     */\r\n    getDragState() {\r\n        return this._dragCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Makes _draggedCarousel$ Subject become Observable\r\n     * @returns Observable of _draggedCarousel$ Subject\r\n     */\r\n    getDraggedState() {\r\n        return this._draggedCarousel$.asObservable();\r\n    }\r\n    /**\r\n     * Setups custom options expanding default options\r\n     * @param options custom options\r\n     */\r\n    setOptions(options) {\r\n        const configOptions = new OwlCarouselOConfig();\r\n        const checkedOptions = this._validateOptions(options, configOptions);\r\n        this._options = Object.assign(Object.assign({}, configOptions), checkedOptions);\r\n    }\r\n    /**\r\n     * Checks whether user's option are set properly. Cheking is based on typings;\r\n     * @param options options set by user\r\n     * @param configOptions default options\r\n     * @returns checked and modified (if it's needed) user's options\r\n     *\r\n     * Notes:\r\n     * \t- if user set option with wrong type, it'll be written in console\r\n     */\r\n    _validateOptions(options, configOptions) {\r\n        const checkedOptions = Object.assign({}, options);\r\n        const mockedTypes = new OwlOptionsMockedTypes();\r\n        const setRightOption = (type, key) => {\r\n            this.logger.log(`options.${key} must be type of ${type}; ${key}=${options[key]} skipped to defaults: ${key}=${configOptions[key]}`);\r\n            return configOptions[key];\r\n        };\r\n        for (const key in checkedOptions) {\r\n            if (checkedOptions.hasOwnProperty(key)) {\r\n                // condition could be shortened but it gets harder for understanding\r\n                if (mockedTypes[key] === 'number') {\r\n                    if (this._isNumeric(checkedOptions[key])) {\r\n                        checkedOptions[key] = +checkedOptions[key];\r\n                        checkedOptions[key] = key === 'items' ? this._validateItems(checkedOptions[key], checkedOptions.skip_validateItems) : checkedOptions[key];\r\n                    }\r\n                    else {\r\n                        checkedOptions[key] = setRightOption(mockedTypes[key], key);\r\n                    }\r\n                }\r\n                else if (mockedTypes[key] === 'boolean' && typeof checkedOptions[key] !== 'boolean') {\r\n                    checkedOptions[key] = setRightOption(mockedTypes[key], key);\r\n                }\r\n                else if (mockedTypes[key] === 'number|boolean' && !this._isNumberOrBoolean(checkedOptions[key])) {\r\n                    checkedOptions[key] = setRightOption(mockedTypes[key], key);\r\n                }\r\n                else if (mockedTypes[key] === 'number|string' && !this._isNumberOrString(checkedOptions[key])) {\r\n                    checkedOptions[key] = setRightOption(mockedTypes[key], key);\r\n                }\r\n                else if (mockedTypes[key] === 'string|boolean' && !this._isStringOrBoolean(checkedOptions[key])) {\r\n                    checkedOptions[key] = setRightOption(mockedTypes[key], key);\r\n                }\r\n                else if (mockedTypes[key] === 'string[]') {\r\n                    if (Array.isArray(checkedOptions[key])) {\r\n                        let isString = false;\r\n                        checkedOptions[key].forEach(element => {\r\n                            isString = typeof element === 'string' ? true : false;\r\n                        });\r\n                        if (!isString) {\r\n                            checkedOptions[key] = setRightOption(mockedTypes[key], key);\r\n                        }\r\n                        ;\r\n                    }\r\n                    else {\r\n                        checkedOptions[key] = setRightOption(mockedTypes[key], key);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return checkedOptions;\r\n    }\r\n    /**\r\n     * Checks the option `items` set by user and if it bigger than number of slides, the function returns number of slides\r\n     * @param items option items set by user\r\n     * @param skip_validateItems option `skip_validateItems` set by user\r\n     * @returns right number of items\r\n     */\r\n    _validateItems(items, skip_validateItems) {\r\n        let result = items;\r\n        if (items > this._items.length) {\r\n            if (skip_validateItems) {\r\n                this.logger.log('The option \\'items\\' in your options is bigger than the number of slides. The navigation got disabled');\r\n            }\r\n            else {\r\n                result = this._items.length;\r\n                this.logger.log('The option \\'items\\' in your options is bigger than the number of slides. This option is updated to the current number of slides and the navigation got disabled');\r\n            }\r\n        }\r\n        else {\r\n            if (items === this._items.length && (this.settings.dots || this.settings.nav)) {\r\n                this.logger.log('Option \\'items\\' in your options is equal to the number of slides. So the navigation got disabled');\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Set current width of carousel\r\n     * @param width width of carousel Window\r\n     */\r\n    setCarouselWidth(width) {\r\n        this._width = width;\r\n    }\r\n    /**\r\n       * Setups the current settings.\r\n       * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?\r\n       * @todo Support for media queries by using `matchMedia` would be nice.\r\n       * @param carouselWidth width of carousel\r\n       * @param slides array of slides\r\n       * @param options options set by user\r\n       */\r\n    setup(carouselWidth, slides, options) {\r\n        this.setCarouselWidth(carouselWidth);\r\n        this.setItems(slides);\r\n        this._defineSlidesData();\r\n        this.setOptions(options);\r\n        this.settings = Object.assign({}, this._options);\r\n        this.setOptionsForViewport();\r\n        this._trigger('change', { property: { name: 'settings', value: this.settings } });\r\n        this.invalidate('settings'); // must be call of this function;\r\n        this._trigger('changed', { property: { name: 'settings', value: this.settings } });\r\n    }\r\n    /**\r\n     * Set options for current viewport\r\n     */\r\n    setOptionsForViewport() {\r\n        const viewport = this._width, overwrites = this._options.responsive;\r\n        let match = -1;\r\n        if (!Object.keys(overwrites).length) {\r\n            return;\r\n        }\r\n        if (!viewport) {\r\n            this.settings.items = 1;\r\n            return;\r\n        }\r\n        for (const key in overwrites) {\r\n            if (overwrites.hasOwnProperty(key)) {\r\n                if (+key <= viewport && +key > match) {\r\n                    match = Number(key);\r\n                }\r\n            }\r\n        }\r\n        this.settings = Object.assign(Object.assign(Object.assign({}, this._options), overwrites[match]), { items: (overwrites[match] && overwrites[match].items) ? this._validateItems(overwrites[match].items, this._options.skip_validateItems) : this._options.items });\r\n        // if (typeof this.settings.stagePadding === 'function') {\r\n        // \tthis.settings.stagePadding = this.settings.stagePadding();\r\n        // }\r\n        delete this.settings.responsive;\r\n        this.owlDOMData.isResponsive = true;\r\n        this.owlDOMData.isMouseDragable = this.settings.mouseDrag;\r\n        this.owlDOMData.isTouchDragable = this.settings.touchDrag;\r\n        const mergers = [];\r\n        this._items.forEach(item => {\r\n            const mergeN = this.settings.merge ? item.dataMerge : 1;\r\n            mergers.push(mergeN);\r\n        });\r\n        this._mergers = mergers;\r\n        this._breakpoint = match;\r\n        this.invalidate('settings');\r\n    }\r\n    /**\r\n     * Initializes the carousel.\r\n     * @param slides array of CarouselSlideDirective\r\n     */\r\n    initialize(slides) {\r\n        this.enter('initializing');\r\n        // this.trigger('initialize');\r\n        this.owlDOMData.rtl = this.settings.rtl;\r\n        if (this._mergers.length) {\r\n            this._mergers = [];\r\n        }\r\n        slides.forEach(item => {\r\n            const mergeN = this.settings.merge ? item.dataMerge : 1;\r\n            this._mergers.push(mergeN);\r\n        });\r\n        this._clones = [];\r\n        this.reset(this._isNumeric(this.settings.startPosition) ? +this.settings.startPosition : 0);\r\n        this.invalidate('items');\r\n        this.refresh();\r\n        this.owlDOMData.isLoaded = true;\r\n        this.owlDOMData.isMouseDragable = this.settings.mouseDrag;\r\n        this.owlDOMData.isTouchDragable = this.settings.touchDrag;\r\n        this.sendChanges();\r\n        this.leave('initializing');\r\n        this._trigger('initialized');\r\n    }\r\n    ;\r\n    /**\r\n     * Sends all data needed for View\r\n     */\r\n    sendChanges() {\r\n        this._viewSettingsShipper$.next({\r\n            owlDOMData: this.owlDOMData,\r\n            stageData: this.stageData,\r\n            slidesData: this.slidesData,\r\n            navData: this.navData,\r\n            dotsData: this.dotsData\r\n        });\r\n    }\r\n    /**\r\n       * Updates option logic if necessery\r\n       */\r\n    _optionsLogic() {\r\n        if (this.settings.autoWidth) {\r\n            this.settings.stagePadding = 0;\r\n            this.settings.merge = false;\r\n        }\r\n    }\r\n    /**\r\n     * Updates the view\r\n     */\r\n    update() {\r\n        let i = 0;\r\n        const n = this._pipe.length, filter = item => this._invalidated[item], cache = {};\r\n        while (i < n) {\r\n            const filteredPipe = this._pipe[i].filter.filter(filter);\r\n            if (this._invalidated.all || filteredPipe.length > 0) {\r\n                this._pipe[i].run(cache);\r\n            }\r\n            i++;\r\n        }\r\n        this.slidesData.forEach(slide => slide.classes = this.setCurSlideClasses(slide));\r\n        this.sendChanges();\r\n        this._invalidated = {};\r\n        if (!this.is('valid')) {\r\n            this.enter('valid');\r\n        }\r\n    }\r\n    /**\r\n       * Gets the width of the view.\r\n       * @param [dimension=Width.Default] The dimension to return\r\n       * @returns The width of the view in pixel.\r\n       */\r\n    width(dimension) {\r\n        dimension = dimension || Width.Default;\r\n        switch (dimension) {\r\n            case Width.Inner:\r\n            case Width.Outer:\r\n                return this._width;\r\n            default:\r\n                return this._width - this.settings.stagePadding * 2 + this.settings.margin;\r\n        }\r\n    }\r\n    /**\r\n       * Refreshes the carousel primarily for adaptive purposes.\r\n       */\r\n    refresh() {\r\n        this.enter('refreshing');\r\n        this._trigger('refresh');\r\n        this._defineSlidesData();\r\n        this.setOptionsForViewport();\r\n        this._optionsLogic();\r\n        // this.$element.addClass(this.options.refreshClass);\r\n        this.update();\r\n        // this.$element.removeClass(this.options.refreshClass);\r\n        this.leave('refreshing');\r\n        this._trigger('refreshed');\r\n    }\r\n    /**\r\n       * Checks window `resize` event.\r\n       * @param curWidth width of .owl-carousel\r\n       */\r\n    onResize(curWidth) {\r\n        if (!this._items.length) {\r\n            return false;\r\n        }\r\n        this.setCarouselWidth(curWidth);\r\n        this.enter('resizing');\r\n        // if (this.trigger('resize').isDefaultPrevented()) {\r\n        // \tthis.leave('resizing');\r\n        // \treturn false;\r\n        // }\r\n        this._trigger('resize');\r\n        this.invalidate('width');\r\n        this.refresh();\r\n        this.leave('resizing');\r\n        this._trigger('resized');\r\n    }\r\n    /**\r\n       * Prepares data for dragging carousel. It starts after firing `touchstart` and `mousedown` events.\r\n       * @todo Horizontal swipe threshold as option\r\n       * @todo #261\r\n       * @param event - The event arguments.\r\n       * @returns stage - object with 'x' and 'y' coordinates of .owl-stage\r\n       */\r\n    prepareDragging(event) {\r\n        let stage = null, transformArr;\r\n        // could be 5 commented lines below; However there's stage transform in stageData and in updates after each move of stage\r\n        // stage = getComputedStyle(this.el.nativeElement).transform.replace(/.*\\(|\\)| /g, '').split(',');\r\n        // stage = {\r\n        //   x: stage[stage.length === 16 ? 12 : 4],\r\n        //   y: stage[stage.length === 16 ? 13 : 5]\r\n        // };\r\n        transformArr = this.stageData.transform.replace(/.*\\(|\\)| |[^,-\\d]\\w|\\)/g, '').split(',');\r\n        stage = {\r\n            x: +transformArr[0],\r\n            y: +transformArr[1]\r\n        };\r\n        if (this.is('animating')) {\r\n            this.invalidate('position');\r\n        }\r\n        if (event.type === 'mousedown') {\r\n            this.owlDOMData.isGrab = true;\r\n        }\r\n        this.speed(0);\r\n        return stage;\r\n    }\r\n    /**\r\n     * Enters into a 'dragging' state\r\n     */\r\n    enterDragging() {\r\n        this.enter('dragging');\r\n        this._trigger('drag');\r\n    }\r\n    /**\r\n       * Defines new coords for .owl-stage while dragging it\r\n       * @todo #261\r\n       * @param event the event arguments.\r\n       * @param dragData initial data got after starting dragging\r\n       * @returns coords or false\r\n       */\r\n    defineNewCoordsDrag(event, dragData) {\r\n        let minimum = null, maximum = null, pull = null;\r\n        const delta = this.difference(dragData.pointer, this.pointer(event)), stage = this.difference(dragData.stage.start, delta);\r\n        if (!this.is('dragging')) {\r\n            return false;\r\n        }\r\n        if (this.settings.loop) {\r\n            minimum = this.coordinates(this.minimum());\r\n            maximum = +this.coordinates(this.maximum() + 1) - minimum;\r\n            stage.x = (((stage.x - minimum) % maximum + maximum) % maximum) + minimum;\r\n        }\r\n        else {\r\n            minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());\r\n            maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());\r\n            pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;\r\n            stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);\r\n        }\r\n        return stage;\r\n    }\r\n    /**\r\n       * Finishes dragging of carousel when `touchend` and `mouseup` events fire.\r\n       * @todo #261\r\n       * @todo Threshold for click event\r\n       * @param event the event arguments.\r\n       * @param dragObj the object with dragging settings and states\r\n       * @param clickAttacher function which attaches click handler to slide or its children elements in order to prevent event bubling\r\n       */\r\n    finishDragging(event, dragObj, clickAttacher) {\r\n        const directions = ['right', 'left'], delta = this.difference(dragObj.pointer, this.pointer(event)), stage = dragObj.stage.current, direction = directions[+(this.settings.rtl ? delta.x < +this.settings.rtl : delta.x > +this.settings.rtl)];\r\n        let currentSlideI, current, newCurrent;\r\n        if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {\r\n            this.speed(+this.settings.dragEndSpeed || this.settings.smartSpeed);\r\n            currentSlideI = this.closest(stage.x, delta.x !== 0 ? direction : dragObj.direction);\r\n            current = this.current();\r\n            newCurrent = this.current(currentSlideI === -1 ? undefined : currentSlideI);\r\n            if (current !== newCurrent) {\r\n                this.invalidate('position');\r\n                this.update();\r\n            }\r\n            dragObj.direction = direction;\r\n            if (Math.abs(delta.x) > 3 || new Date().getTime() - dragObj.time > 300) {\r\n                clickAttacher();\r\n            }\r\n        }\r\n        if (!this.is('dragging')) {\r\n            return;\r\n        }\r\n        this.leave('dragging');\r\n        this._trigger('dragged');\r\n    }\r\n    /**\r\n       * Gets absolute position of the closest item for a coordinate.\r\n       * @todo Setting `freeDrag` makes `closest` not reusable. See #165.\r\n       * @param coordinate The coordinate in pixel.\r\n       * @param direction The direction to check for the closest item. Ether `left` or `right`.\r\n       * @returns The absolute position of the closest item.\r\n       */\r\n    closest(coordinate, direction) {\r\n        const pull = 30, width = this.width();\r\n        let coordinates = this.coordinates(), position = -1;\r\n        if (this.settings.center) {\r\n            coordinates = coordinates.map(item => {\r\n                if (item === 0) {\r\n                    item += 0.000001;\r\n                }\r\n                return item;\r\n            });\r\n        }\r\n        // option 'freeDrag' doesn't have realization and using it here creates problem:\r\n        // variable 'position' stays unchanged (it equals -1 at the begging) and thus method returns -1\r\n        // Returning value is consumed by method current(), which taking -1 as argument calculates the index of new current slide\r\n        // In case of having 5 slides ans 'loop=false; calling 'current(-1)' sets props '_current' as 4. Just last slide remains visible instead of 3 last slides.\r\n        // if (!this.settings.freeDrag) {\r\n        // check closest item\r\n        for (let i = 0; i < coordinates.length; i++) {\r\n            if (direction === 'left' && coordinate > coordinates[i] - pull && coordinate < coordinates[i] + pull) {\r\n                position = i;\r\n                // on a right pull, check on previous index\r\n                // to do so, subtract width from value and set position = index + 1\r\n            }\r\n            else if (direction === 'right' && coordinate > coordinates[i] - width - pull && coordinate < coordinates[i] - width + pull) {\r\n                position = i + 1;\r\n            }\r\n            else if (this._op(coordinate, '<', coordinates[i])\r\n                && this._op(coordinate, '>', coordinates[i + 1] || coordinates[i] - width)) {\r\n                position = direction === 'left' ? i + 1 : i;\r\n            }\r\n            else if (direction === null && coordinate > coordinates[i] - pull && coordinate < coordinates[i] + pull) {\r\n                position = i;\r\n            }\r\n            if (position !== -1) {\r\n                break;\r\n            }\r\n            ;\r\n        }\r\n        // }\r\n        if (!this.settings.loop) {\r\n            // non loop boundries\r\n            if (this._op(coordinate, '>', coordinates[this.minimum()])) {\r\n                position = coordinate = this.minimum();\r\n            }\r\n            else if (this._op(coordinate, '<', coordinates[this.maximum()])) {\r\n                position = coordinate = this.maximum();\r\n            }\r\n        }\r\n        return position;\r\n    }\r\n    /**\r\n       * Animates the stage.\r\n       * @todo #270\r\n       * @param coordinate The coordinate in pixels.\r\n       */\r\n    animate(coordinate) {\r\n        const animate = this.speed() > 0;\r\n        if (this.is('animating')) {\r\n            this.onTransitionEnd();\r\n        }\r\n        if (animate) {\r\n            this.enter('animating');\r\n            this._trigger('translate');\r\n        }\r\n        this.stageData.transform = 'translate3d(' + coordinate + 'px,0px,0px)';\r\n        this.stageData.transition = (this.speed() / 1000) + 's' + (this.settings.slideTransition ? ' ' + this.settings.slideTransition : '');\r\n        // also there was transition by means of JQuery.animate or css-changing property left\r\n    }\r\n    /**\r\n       * Checks whether the carousel is in a specific state or not.\r\n       * @param state The state to check.\r\n       * @returns The flag which indicates if the carousel is busy.\r\n       */\r\n    is(state) {\r\n        return this._states.current[state] && this._states.current[state] > 0;\r\n    }\r\n    ;\r\n    /**\r\n       * Sets the absolute position of the current item.\r\n       * @param position The new absolute position or nothing to leave it unchanged.\r\n       * @returns The absolute position of the current item.\r\n       */\r\n    current(position) {\r\n        if (position === undefined) {\r\n            return this._current;\r\n        }\r\n        if (this._items.length === 0) {\r\n            return undefined;\r\n        }\r\n        position = this.normalize(position);\r\n        if (this._current !== position) {\r\n            const event = this._trigger('change', { property: { name: 'position', value: position } });\r\n            // if (event.data !== undefined) {\r\n            // \tposition = this.normalize(event.data);\r\n            // }\r\n            this._current = position;\r\n            this.invalidate('position');\r\n            this._trigger('changed', { property: { name: 'position', value: this._current } });\r\n        }\r\n        return this._current;\r\n    }\r\n    /**\r\n       * Invalidates the given part of the update routine.\r\n       * @param part The part to invalidate.\r\n       * @returns The invalidated parts.\r\n       */\r\n    invalidate(part) {\r\n        if (typeof part === 'string') {\r\n            this._invalidated[part] = true;\r\n            if (this.is('valid')) {\r\n                this.leave('valid');\r\n            }\r\n        }\r\n        return Object.keys(this._invalidated);\r\n    }\r\n    ;\r\n    /**\r\n     * Resets the absolute position of the current item.\r\n     * @param position the absolute position of the new item.\r\n     */\r\n    reset(position) {\r\n        position = this.normalize(position);\r\n        if (position === undefined) {\r\n            return;\r\n        }\r\n        this._speed = 0;\r\n        this._current = position;\r\n        this._suppress(['translate', 'translated']);\r\n        this.animate(this.coordinates(position));\r\n        this._release(['translate', 'translated']);\r\n    }\r\n    /**\r\n       * Normalizes an absolute or a relative position of an item.\r\n       * @param position The absolute or relative position to normalize.\r\n       * @param relative Whether the given position is relative or not.\r\n       * @returns The normalized position.\r\n       */\r\n    normalize(position, relative) {\r\n        const n = this._items.length, m = relative ? 0 : this._clones.length;\r\n        if (!this._isNumeric(position) || n < 1) {\r\n            position = undefined;\r\n        }\r\n        else if (position < 0 || position >= n + m) {\r\n            position = ((position - m / 2) % n + n) % n + m / 2;\r\n        }\r\n        return position;\r\n    }\r\n    /**\r\n       * Converts an absolute position of an item into a relative one.\r\n       * @param position The absolute position to convert.\r\n       * @returns The converted position.\r\n       */\r\n    relative(position) {\r\n        position -= this._clones.length / 2;\r\n        return this.normalize(position, true);\r\n    }\r\n    /**\r\n       * Gets the maximum position for the current item.\r\n       * @param relative Whether to return an absolute position or a relative position.\r\n       * @returns number of maximum position\r\n       */\r\n    maximum(relative = false) {\r\n        const settings = this.settings;\r\n        let maximum = this._coordinates.length, iterator, reciprocalItemsWidth, elementWidth;\r\n        if (settings.loop) {\r\n            maximum = this._clones.length / 2 + this._items.length - 1;\r\n        }\r\n        else if (settings.autoWidth || settings.merge) {\r\n            iterator = this._items.length;\r\n            reciprocalItemsWidth = this.slidesData[--iterator].width;\r\n            elementWidth = this._width;\r\n            while (iterator--) {\r\n                // it could be use this._items instead of this.slidesData;\r\n                reciprocalItemsWidth += +this.slidesData[iterator].width + this.settings.margin;\r\n                if (reciprocalItemsWidth > elementWidth) {\r\n                    break;\r\n                }\r\n            }\r\n            maximum = iterator + 1;\r\n        }\r\n        else if (settings.center) {\r\n            maximum = this._items.length - 1;\r\n        }\r\n        else {\r\n            maximum = this._items.length - settings.items;\r\n        }\r\n        if (relative) {\r\n            maximum -= this._clones.length / 2;\r\n        }\r\n        return Math.max(maximum, 0);\r\n    }\r\n    /**\r\n       * Gets the minimum position for the current item.\r\n       * @param relative Whether to return an absolute position or a relative position.\r\n       * @returns number of minimum position\r\n       */\r\n    minimum(relative = false) {\r\n        return relative ? 0 : this._clones.length / 2;\r\n    }\r\n    /**\r\n       * Gets an item at the specified relative position.\r\n       * @param position The relative position of the item.\r\n       * @returns The item at the given position or all items if no position was given.\r\n       */\r\n    items(position) {\r\n        if (position === undefined) {\r\n            return this._items.slice();\r\n        }\r\n        position = this.normalize(position, true);\r\n        return [this._items[position]];\r\n    }\r\n    /**\r\n       * Gets an item at the specified relative position.\r\n       * @param position The relative position of the item.\r\n       * @returns The item at the given position or all items if no position was given.\r\n       */\r\n    mergers(position) {\r\n        if (position === undefined) {\r\n            return this._mergers.slice();\r\n        }\r\n        position = this.normalize(position, true);\r\n        return this._mergers[position];\r\n    }\r\n    /**\r\n       * Gets the absolute positions of clones for an item.\r\n       * @param position The relative position of the item.\r\n       * @returns The absolute positions of clones for the item or all if no position was given.\r\n       */\r\n    clones(position) {\r\n        const odd = this._clones.length / 2, even = odd + this._items.length, map = index => index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2;\r\n        if (position === undefined) {\r\n            return this._clones.map((v, i) => map(i));\r\n        }\r\n        return this._clones.map((v, i) => v === position ? map(i) : null).filter(item => item);\r\n    }\r\n    /**\r\n       * Sets the current animation speed.\r\n       * @param speed The animation speed in milliseconds or nothing to leave it unchanged.\r\n       * @returns The current animation speed in milliseconds.\r\n       */\r\n    speed(speed) {\r\n        if (speed !== undefined) {\r\n            this._speed = speed;\r\n        }\r\n        return this._speed;\r\n    }\r\n    /**\r\n       * Gets the coordinate of an item.\r\n       * @todo The name of this method is missleanding.\r\n       * @param position The absolute position of the item within `minimum()` and `maximum()`.\r\n       * @returns The coordinate of the item in pixel or all coordinates.\r\n       */\r\n    coordinates(position) {\r\n        let multiplier = 1, newPosition = position - 1, coordinate, result;\r\n        if (position === undefined) {\r\n            result = this._coordinates.map((item, index) => {\r\n                return this.coordinates(index);\r\n            });\r\n            return result;\r\n        }\r\n        if (this.settings.center) {\r\n            if (this.settings.rtl) {\r\n                multiplier = -1;\r\n                newPosition = position + 1;\r\n            }\r\n            coordinate = this._coordinates[position];\r\n            coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;\r\n        }\r\n        else {\r\n            coordinate = this._coordinates[newPosition] || 0;\r\n        }\r\n        coordinate = Math.ceil(coordinate);\r\n        return coordinate;\r\n    }\r\n    /**\r\n       * Calculates the speed for a translation.\r\n       * @param from The absolute position of the start item.\r\n       * @param to The absolute position of the target item.\r\n       * @param factor [factor=undefined] - The time factor in milliseconds.\r\n       * @returns The time in milliseconds for the translation.\r\n       */\r\n    _duration(from, to, factor) {\r\n        if (factor === 0) {\r\n            return 0;\r\n        }\r\n        return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs((+factor || this.settings.smartSpeed));\r\n    }\r\n    /**\r\n       * Slides to the specified item.\r\n       * @param position The position of the item.\r\n       * @param speed The time in milliseconds for the transition.\r\n       */\r\n    to(position, speed) {\r\n        let current = this.current(), revert = null, distance = position - this.relative(current), maximum = this.maximum(), delayForLoop = 0;\r\n        const direction = +(distance > 0) - +(distance < 0), items = this._items.length, minimum = this.minimum();\r\n        if (this.settings.loop) {\r\n            if (!this.settings.rewind && Math.abs(distance) > items / 2) {\r\n                distance += direction * -1 * items;\r\n            }\r\n            position = current + distance;\r\n            revert = ((position - minimum) % items + items) % items + minimum;\r\n            if (revert !== position && revert - distance <= maximum && revert - distance > 0) {\r\n                current = revert - distance;\r\n                position = revert;\r\n                delayForLoop = 30;\r\n                this.reset(current);\r\n                this.sendChanges();\r\n            }\r\n        }\r\n        else if (this.settings.rewind) {\r\n            maximum += 1;\r\n            position = (position % maximum + maximum) % maximum;\r\n        }\r\n        else {\r\n            position = Math.max(minimum, Math.min(maximum, position));\r\n        }\r\n        setTimeout(() => {\r\n            this.speed(this._duration(current, position, speed));\r\n            this.current(position);\r\n            this.update();\r\n        }, delayForLoop);\r\n    }\r\n    /**\r\n       * Slides to the next item.\r\n       * @param speed The time in milliseconds for the transition.\r\n       */\r\n    next(speed) {\r\n        speed = speed || false;\r\n        this.to(this.relative(this.current()) + 1, speed);\r\n    }\r\n    /**\r\n       * Slides to the previous item.\r\n       * @param speed The time in milliseconds for the transition.\r\n       */\r\n    prev(speed) {\r\n        speed = speed || false;\r\n        this.to(this.relative(this.current()) - 1, speed);\r\n    }\r\n    /**\r\n       * Handles the end of an animation.\r\n       * @param event - The event arguments.\r\n       */\r\n    onTransitionEnd(event) {\r\n        // if css2 animation then event object is undefined\r\n        if (event !== undefined) {\r\n            // event.stopPropagation();\r\n            // // Catch only owl-stage transitionEnd event\r\n            // if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)\t) {\r\n            // \treturn false;\r\n            // }\r\n            return false;\r\n        }\r\n        this.leave('animating');\r\n        this._trigger('translated');\r\n    }\r\n    /**\r\n       * Gets viewport width.\r\n       * @returns - The width in pixel.\r\n       */\r\n    _viewport() {\r\n        let width;\r\n        if (this._width) {\r\n            width = this._width;\r\n        }\r\n        else {\r\n            this.logger.log('Can not detect viewport width.');\r\n        }\r\n        return width;\r\n    }\r\n    /**\r\n       * Sets _items\r\n       * @param content The list of slides put into CarouselSlideDirectives.\r\n       */\r\n    setItems(content) {\r\n        this._items = content;\r\n    }\r\n    /**\r\n     * Sets slidesData using this._items\r\n     */\r\n    _defineSlidesData() {\r\n        // Maybe creating and using loadMap would be better in LazyLoadService.\r\n        // Hovewer in that case when 'resize' event fires, prop 'load' of all slides will get 'false' and such state of prop will be seen by View during its updating. Accordingly the code will remove slides's content from DOM even if it was loaded before.\r\n        // Thus it would be needed to add that content into DOM again.\r\n        // In order to avoid additional removing/adding loaded slides's content we use loadMap here and set restore state of prop 'load' before the View will get it.\r\n        let loadMap;\r\n        if (this.slidesData && this.slidesData.length) {\r\n            loadMap = new Map();\r\n            this.slidesData.forEach(item => {\r\n                if (item.load) {\r\n                    loadMap.set(item.id, item.load);\r\n                }\r\n            });\r\n        }\r\n        this.slidesData = this._items.map(slide => {\r\n            return {\r\n                id: `${slide.id}`,\r\n                isActive: false,\r\n                tplRef: slide.tplRef,\r\n                dataMerge: slide.dataMerge,\r\n                width: 0,\r\n                isCloned: false,\r\n                load: loadMap ? loadMap.get(slide.id) : false,\r\n                hashFragment: slide.dataHash\r\n            };\r\n        });\r\n    }\r\n    /**\r\n     * Sets current classes for slide\r\n     * @param slide Slide of carousel\r\n     * @returns object with names of css-classes which are keys and true/false values\r\n     */\r\n    setCurSlideClasses(slide) {\r\n        // CSS classes: added/removed per current state of component properties\r\n        const currentClasses = {\r\n            'active': slide.isActive,\r\n            'center': slide.isCentered,\r\n            'cloned': slide.isCloned,\r\n            'animated': slide.isAnimated,\r\n            'owl-animated-in': slide.isDefAnimatedIn,\r\n            'owl-animated-out': slide.isDefAnimatedOut\r\n        };\r\n        if (this.settings.animateIn) {\r\n            currentClasses[this.settings.animateIn] = slide.isCustomAnimatedIn;\r\n        }\r\n        if (this.settings.animateOut) {\r\n            currentClasses[this.settings.animateOut] = slide.isCustomAnimatedOut;\r\n        }\r\n        return currentClasses;\r\n    }\r\n    /**\r\n       * Operators to calculate right-to-left and left-to-right.\r\n       * @param a - The left side operand.\r\n       * @param o - The operator.\r\n       * @param b - The right side operand.\r\n       * @returns true/false meaning right-to-left or left-to-right\r\n       */\r\n    _op(a, o, b) {\r\n        const rtl = this.settings.rtl;\r\n        switch (o) {\r\n            case '<':\r\n                return rtl ? a > b : a < b;\r\n            case '>':\r\n                return rtl ? a < b : a > b;\r\n            case '>=':\r\n                return rtl ? a <= b : a >= b;\r\n            case '<=':\r\n                return rtl ? a >= b : a <= b;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n       * Triggers a public event.\r\n       * @todo Remove `status`, `relatedTarget` should be used instead.\r\n       * @param name The event name.\r\n       * @param data The event data.\r\n       * @param namespace The event namespace.\r\n       * @param state The state which is associated with the event.\r\n       * @param enter Indicates if the call enters the specified state or not.\r\n       */\r\n    _trigger(name, data, namespace, state, enter) {\r\n        switch (name) {\r\n            case 'initialized':\r\n                this._initializedCarousel$.next(name);\r\n                break;\r\n            case 'change':\r\n                this._changeSettingsCarousel$.next(data);\r\n                break;\r\n            case 'changed':\r\n                this._changedSettingsCarousel$.next(data);\r\n                break;\r\n            case 'drag':\r\n                this._dragCarousel$.next(name);\r\n                break;\r\n            case 'dragged':\r\n                this._draggedCarousel$.next(name);\r\n                break;\r\n            case 'resize':\r\n                this._resizeCarousel$.next(name);\r\n                break;\r\n            case 'resized':\r\n                this._resizedCarousel$.next(name);\r\n                break;\r\n            case 'refresh':\r\n                this._refreshCarousel$.next(name);\r\n                break;\r\n            case 'refreshed':\r\n                this._refreshedCarousel$.next(name);\r\n                break;\r\n            case 'translate':\r\n                this._translateCarousel$.next(name);\r\n                break;\r\n            case 'translated':\r\n                this._translatedCarousel$.next(name);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Enters a state.\r\n     * @param name - The state name.\r\n     */\r\n    enter(name) {\r\n        [name].concat(this._states.tags[name] || []).forEach((stateName) => {\r\n            if (this._states.current[stateName] === undefined) {\r\n                this._states.current[stateName] = 0;\r\n            }\r\n            this._states.current[stateName]++;\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n       * Leaves a state.\r\n       * @param name - The state name.\r\n       */\r\n    leave(name) {\r\n        [name].concat(this._states.tags[name] || []).forEach((stateName) => {\r\n            if (this._states.current[stateName] === 0 || !!this._states.current[stateName]) {\r\n                this._states.current[stateName]--;\r\n            }\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n       * Registers an event or state.\r\n       * @param object - The event or state to register.\r\n       */\r\n    register(object) {\r\n        if (object.type === Type.State) {\r\n            if (!this._states.tags[object.name]) {\r\n                this._states.tags[object.name] = object.tags;\r\n            }\r\n            else {\r\n                this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);\r\n            }\r\n            this._states.tags[object.name] = this._states.tags[object.name].filter((tag, i) => {\r\n                return this._states.tags[object.name].indexOf(tag) === i;\r\n            });\r\n        }\r\n    }\r\n    /**\r\n       * Suppresses events.\r\n       * @param events The events to suppress.\r\n       */\r\n    _suppress(events) {\r\n        events.forEach(event => {\r\n            this._supress[event] = true;\r\n        });\r\n    }\r\n    /**\r\n       * Releases suppressed events.\r\n       * @param events The events to release.\r\n       */\r\n    _release(events) {\r\n        events.forEach(event => {\r\n            delete this._supress[event];\r\n        });\r\n    }\r\n    /**\r\n       * Gets unified pointer coordinates from event.\r\n       * @todo #261\r\n       * @param event The `mousedown` or `touchstart` event.\r\n       * @returns Object Coords which contains `x` and `y` coordinates of current pointer position.\r\n       */\r\n    pointer(event) {\r\n        const result = { x: null, y: null };\r\n        event = event.originalEvent || event || window.event;\r\n        event = event.touches && event.touches.length ?\r\n            event.touches[0] : event.changedTouches && event.changedTouches.length ?\r\n            event.changedTouches[0] : event;\r\n        if (event.pageX) {\r\n            result.x = event.pageX;\r\n            result.y = event.pageY;\r\n        }\r\n        else {\r\n            result.x = event.clientX;\r\n            result.y = event.clientY;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n       * Determines if the input is a Number or something that can be coerced to a Number\r\n       * @param number The input to be tested\r\n       * @returns An indication if the input is a Number or can be coerced to a Number\r\n       */\r\n    _isNumeric(number) {\r\n        return !isNaN(parseFloat(number));\r\n    }\r\n    /**\r\n     * Determines whether value is number or boolean type\r\n     * @param value The input to be tested\r\n     * @returns An indication if the input is a Number or can be coerced to a Number, or Boolean\r\n     */\r\n    _isNumberOrBoolean(value) {\r\n        return this._isNumeric(value) || typeof value === 'boolean';\r\n    }\r\n    /**\r\n     * Determines whether value is number or string type\r\n     * @param value The input to be tested\r\n     * @returns An indication if the input is a Number or can be coerced to a Number, or String\r\n     */\r\n    _isNumberOrString(value) {\r\n        return this._isNumeric(value) || typeof value === 'string';\r\n    }\r\n    /**\r\n     * Determines whether value is number or string type\r\n     * @param value The input to be tested\r\n     * @returns An indication if the input is a Number or can be coerced to a Number, or String\r\n     */\r\n    _isStringOrBoolean(value) {\r\n        return typeof value === 'string' || typeof value === 'boolean';\r\n    }\r\n    /**\r\n       * Gets the difference of two vectors.\r\n       * @todo #261\r\n       * @param first The first vector.\r\n       * @param second- The second vector.\r\n       * @returns The difference.\r\n       */\r\n    difference(first, second) {\r\n        return {\r\n            x: first.x - second.x,\r\n            y: first.y - second.y\r\n        };\r\n    }\r\n};\r\nCarouselService.ctorParameters = () => [\r\n    { type: OwlLogger }\r\n];\r\nCarouselService = __decorate([\r\n    Injectable()\r\n], CarouselService);\r\n\r\nlet NavigationService = class NavigationService {\r\n    constructor(carouselService) {\r\n        this.carouselService = carouselService;\r\n        /**\r\n         * Indicates whether the plugin is initialized or not.\r\n         */\r\n        this._initialized = false;\r\n        /**\r\n         * The current paging indexes.\r\n         */\r\n        this._pages = [];\r\n        /**\r\n         * Data for navigation elements of the user interface.\r\n         */\r\n        this._navData = {\r\n            disabled: false,\r\n            prev: {\r\n                disabled: false,\r\n                htmlText: ''\r\n            },\r\n            next: {\r\n                disabled: false,\r\n                htmlText: ''\r\n            },\r\n        };\r\n        /**\r\n         * Data for dot elements of the user interface.\r\n         */\r\n        this._dotsData = {\r\n            disabled: false,\r\n            dots: []\r\n        };\r\n        this.spyDataStreams();\r\n    }\r\n    ngOnDestroy() {\r\n        this.navSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Defines Observables which service must observe\r\n     */\r\n    spyDataStreams() {\r\n        const initializedCarousel$ = this.carouselService.getInitializedState().pipe(tap(state => {\r\n            this.initialize();\r\n            this._updateNavPages();\r\n            this.draw();\r\n            this.update();\r\n            this.carouselService.sendChanges();\r\n        }));\r\n        // mostly changes in carouselService and carousel at all causes carouselService.to(). It moves stage right-left by its code and calling needed functions\r\n        // Thus this method by calling carouselService.current(position) notifies about changes\r\n        const changedSettings$ = this.carouselService.getChangedState().pipe(filter(data => data.property.name === 'position'), tap(data => {\r\n            this.update();\r\n            // should be the call of the function written at the end of comment\r\n            // but the method carouselServive.to() has setTimeout(f, 0) which contains carouselServive.update() which calls sendChanges() method.\r\n            // carouselService.navData and carouselService.dotsData update earlier than carouselServive.update() gets called\r\n            // updates of carouselService.navData and carouselService.dotsData are being happening withing carouselService.current(position) method which calls next() of _changedSettingsCarousel$\r\n            // carouselService.current(position) is being calling earlier than carouselServive.update();\r\n            // this.carouselService.sendChanges();\r\n        }));\r\n        const refreshedCarousel$ = this.carouselService.getRefreshedState().pipe(tap(() => {\r\n            this._updateNavPages();\r\n            this.draw();\r\n            this.update();\r\n            this.carouselService.sendChanges();\r\n        }));\r\n        const navMerge$ = merge(initializedCarousel$, changedSettings$, refreshedCarousel$);\r\n        this.navSubscription = navMerge$.subscribe(() => { });\r\n    }\r\n    /**\r\n       * Initializes the layout of the plugin and extends the carousel.\r\n       */\r\n    initialize() {\r\n        this._navData.disabled = true;\r\n        this._navData.prev.htmlText = this.carouselService.settings.navText[0];\r\n        this._navData.next.htmlText = this.carouselService.settings.navText[1];\r\n        this._dotsData.disabled = true;\r\n        this.carouselService.navData = this._navData;\r\n        this.carouselService.dotsData = this._dotsData;\r\n    }\r\n    /**\r\n     * Calculates internal states and updates prop _pages\r\n     */\r\n    _updateNavPages() {\r\n        let i, j, k;\r\n        const lower = this.carouselService.clones().length / 2, upper = lower + this.carouselService.items().length, maximum = this.carouselService.maximum(true), pages = [], settings = this.carouselService.settings;\r\n        let size = settings.center || settings.autoWidth || settings.dotsData\r\n            ? 1 : settings.dotsEach || settings.items;\r\n        size = +size;\r\n        if (settings.slideBy !== 'page') {\r\n            settings.slideBy = Math.min(+settings.slideBy, settings.items);\r\n        }\r\n        if (settings.dots || settings.slideBy === 'page') {\r\n            for (i = lower, j = 0, k = 0; i < upper; i++) {\r\n                if (j >= size || j === 0) {\r\n                    pages.push({\r\n                        start: Math.min(maximum, i - lower),\r\n                        end: i - lower + size - 1\r\n                    });\r\n                    if (Math.min(maximum, i - lower) === maximum) {\r\n                        break;\r\n                    }\r\n                    j = 0, ++k;\r\n                }\r\n                j += this.carouselService.mergers(this.carouselService.relative(i));\r\n            }\r\n        }\r\n        this._pages = pages;\r\n    }\r\n    /**\r\n       * Draws the user interface.\r\n       * @todo The option `dotsData` wont work.\r\n       */\r\n    draw() {\r\n        let difference;\r\n        const settings = this.carouselService.settings, items = this.carouselService.items(), disabled = items.length <= settings.items;\r\n        this._navData.disabled = !settings.nav || disabled;\r\n        this._dotsData.disabled = !settings.dots || disabled;\r\n        if (settings.dots) {\r\n            difference = this._pages.length - this._dotsData.dots.length;\r\n            if (settings.dotsData && difference !== 0) {\r\n                this._dotsData.dots = [];\r\n                items.forEach(item => {\r\n                    this._dotsData.dots.push({\r\n                        active: false,\r\n                        id: `dot-${item.id}`,\r\n                        innerContent: item.dotContent,\r\n                        showInnerContent: true\r\n                    });\r\n                });\r\n            }\r\n            else if (difference > 0) {\r\n                const startI = this._dotsData.dots.length > 0 ? this._dotsData.dots.length : 0;\r\n                for (let i = 0; i < difference; i++) {\r\n                    this._dotsData.dots.push({\r\n                        active: false,\r\n                        id: `dot-${i + startI}`,\r\n                        innerContent: '',\r\n                        showInnerContent: false\r\n                    });\r\n                }\r\n            }\r\n            else if (difference < 0) {\r\n                this._dotsData.dots.splice(difference, Math.abs(difference));\r\n            }\r\n        }\r\n        this.carouselService.navData = this._navData;\r\n        this.carouselService.dotsData = this._dotsData;\r\n    }\r\n    ;\r\n    /**\r\n     * Updates navigation buttons's and dots's states\r\n     */\r\n    update() {\r\n        this._updateNavButtons();\r\n        this._updateDots();\r\n    }\r\n    /**\r\n     * Changes state of nav buttons (disabled, enabled)\r\n     */\r\n    _updateNavButtons() {\r\n        const settings = this.carouselService.settings, loop = settings.loop || settings.rewind, index = this.carouselService.relative(this.carouselService.current());\r\n        if (settings.nav) {\r\n            this._navData.prev.disabled = !loop && index <= this.carouselService.minimum(true);\r\n            this._navData.next.disabled = !loop && index >= this.carouselService.maximum(true);\r\n        }\r\n        this.carouselService.navData = this._navData;\r\n    }\r\n    /**\r\n     * Changes active dot if page becomes changed\r\n     */\r\n    _updateDots() {\r\n        let curActiveDotI;\r\n        if (!this.carouselService.settings.dots) {\r\n            return;\r\n        }\r\n        this._dotsData.dots.forEach(item => {\r\n            if (item.active === true) {\r\n                item.active = false;\r\n            }\r\n        });\r\n        curActiveDotI = this._current();\r\n        if (this._dotsData.dots.length) {\r\n            this._dotsData.dots[curActiveDotI].active = true;\r\n        }\r\n        this.carouselService.dotsData = this._dotsData;\r\n    }\r\n    /**\r\n       * Gets the current page position of the carousel.\r\n       * @returns the current page position of the carousel\r\n       */\r\n    _current() {\r\n        const current = this.carouselService.relative(this.carouselService.current());\r\n        let finalCurrent;\r\n        const pages = this._pages.filter((page, index) => {\r\n            return page.start <= current && page.end >= current;\r\n        }).pop();\r\n        finalCurrent = this._pages.findIndex(page => {\r\n            return page.start === pages.start && page.end === pages.end;\r\n        });\r\n        return finalCurrent;\r\n    }\r\n    ;\r\n    /**\r\n       * Gets the current succesor/predecessor position.\r\n     * @param sussessor position of slide\r\n       * @returns the current succesor/predecessor position\r\n       */\r\n    _getPosition(successor) {\r\n        let position, length;\r\n        const settings = this.carouselService.settings;\r\n        if (settings.slideBy === 'page') {\r\n            position = this._current();\r\n            length = this._pages.length;\r\n            successor ? ++position : --position;\r\n            position = this._pages[((position % length) + length) % length].start;\r\n        }\r\n        else {\r\n            position = this.carouselService.relative(this.carouselService.current());\r\n            length = this.carouselService.items().length;\r\n            successor ? position += +settings.slideBy : position -= +settings.slideBy;\r\n        }\r\n        return position;\r\n    }\r\n    ;\r\n    /**\r\n       * Slides to the next item or page.\r\n       * @param speed The time in milliseconds for the transition.\r\n       */\r\n    next(speed) {\r\n        this.carouselService.to(this._getPosition(true), speed);\r\n    }\r\n    ;\r\n    /**\r\n     * Slides to the previous item or page.\r\n     * @param speed The time in milliseconds for the transition.\r\n     */\r\n    prev(speed) {\r\n        this.carouselService.to(this._getPosition(false), speed);\r\n    }\r\n    ;\r\n    /**\r\n     * Slides to the specified item or page.\r\n     * @param position - The position of the item or page.\r\n     * @param speed - The time in milliseconds for the transition.\r\n     * @param standard - Whether to use the standard behaviour or not. Default meaning false\r\n     */\r\n    to(position, speed, standard) {\r\n        let length;\r\n        if (!standard && this._pages.length) {\r\n            length = this._pages.length;\r\n            this.carouselService.to(this._pages[((position % length) + length) % length].start, speed);\r\n        }\r\n        else {\r\n            this.carouselService.to(position, speed);\r\n        }\r\n    }\r\n    ;\r\n    /**\r\n     * Moves carousel after user's clicking on any dots\r\n     */\r\n    moveByDot(dotId) {\r\n        const index = this._dotsData.dots.findIndex(dot => dotId === dot.id);\r\n        this.to(index, this.carouselService.settings.dotsSpeed);\r\n    }\r\n    /**\r\n     * rewinds carousel to slide with needed id\r\n     * @param id id of slide\r\n     */\r\n    toSlideById(id) {\r\n        const position = this.carouselService.slidesData.findIndex(slide => slide.id === id && slide.isCloned === false);\r\n        if (position === -1 || position === this.carouselService.current()) {\r\n            return;\r\n        }\r\n        this.carouselService.to(this.carouselService.relative(position), false);\r\n    }\r\n};\r\nNavigationService.ctorParameters = () => [\r\n    { type: CarouselService }\r\n];\r\nNavigationService = __decorate([\r\n    Injectable()\r\n], NavigationService);\r\n\r\n// import { Injectable } from '@angular/core';\r\n/**\r\n * Create a new injection token for injecting the window into a component.\r\n */\r\nconst WINDOW = new InjectionToken('WindowToken');\r\n/**\r\n * Define abstract class for obtaining reference to the global window object.\r\n */\r\nclass WindowRef {\r\n    get nativeWindow() {\r\n        throw new Error('Not implemented.');\r\n    }\r\n}\r\n/**\r\n * Define class that implements the abstract class and returns the native window object.\r\n */\r\nlet BrowserWindowRef = class BrowserWindowRef extends WindowRef {\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * @returns window object\r\n     */\r\n    get nativeWindow() {\r\n        return window;\r\n    }\r\n};\r\nBrowserWindowRef = __decorate([\r\n    Injectable()\r\n], BrowserWindowRef);\r\n/**\r\n * Create an factory function that returns the native window object.\r\n * @param browserWindowRef Native window object\r\n * @param platformId id of platform\r\n * @returns type of platform of empty object\r\n */\r\nfunction windowFactory(browserWindowRef, platformId) {\r\n    if (isPlatformBrowser(platformId)) {\r\n        return browserWindowRef.nativeWindow;\r\n    }\r\n    const obj = {\r\n        setTimeout: (func, time) => { },\r\n        clearTimeout: (a) => { }\r\n    };\r\n    return obj;\r\n}\r\n/**\r\n * Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class.\r\n */\r\nconst browserWindowProvider = {\r\n    provide: WindowRef,\r\n    useClass: BrowserWindowRef\r\n};\r\n/**\r\n * Create an injectable provider that uses the windowFactory function for returning the native window object.\r\n */\r\nconst windowProvider = {\r\n    provide: WINDOW,\r\n    useFactory: windowFactory,\r\n    deps: [WindowRef, PLATFORM_ID]\r\n};\r\n/**\r\n * Create an array of providers.\r\n */\r\nconst WINDOW_PROVIDERS = [browserWindowProvider, windowProvider];\r\n\r\n/**\r\n * Create a new injection token for injecting the Document into a component.\r\n */\r\nconst DOCUMENT = new InjectionToken('DocumentToken');\r\n/**\r\n * Define abstract class for obtaining reference to the global Document object.\r\n */\r\nclass DocumentRef {\r\n    get nativeDocument() {\r\n        throw new Error('Not implemented.');\r\n    }\r\n}\r\n/**\r\n * Define class that implements the abstract class and returns the native Document object.\r\n */\r\nlet BrowserDocumentRef = class BrowserDocumentRef extends DocumentRef {\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * @returns Document object\r\n     */\r\n    get nativeDocument() {\r\n        return document;\r\n    }\r\n};\r\nBrowserDocumentRef = __decorate([\r\n    Injectable()\r\n], BrowserDocumentRef);\r\n/**\r\n * Create an factory function that returns the native Document object.\r\n * @param browserDocumentRef Native Document object\r\n * @param platformId id of platform\r\n * @returns type of platform of empty object\r\n */\r\nfunction documentFactory(browserDocumentRef, platformId) {\r\n    if (isPlatformBrowser(platformId)) {\r\n        return browserDocumentRef.nativeDocument;\r\n    }\r\n    const doc = {\r\n        hidden: false,\r\n        visibilityState: 'visible'\r\n    };\r\n    return doc;\r\n}\r\n/**\r\n * Create a injectable provider for the DocumentRef token that uses the BrowserDocumentRef class.\r\n */\r\nconst browserDocumentProvider = {\r\n    provide: DocumentRef,\r\n    useClass: BrowserDocumentRef\r\n};\r\n/**\r\n * Create an injectable provider that uses the DocumentFactory function for returning the native Document object.\r\n */\r\nconst documentProvider = {\r\n    provide: DOCUMENT,\r\n    useFactory: documentFactory,\r\n    deps: [DocumentRef, PLATFORM_ID]\r\n};\r\n/**\r\n * Create an array of providers.\r\n */\r\nconst DOCUMENT_PROVIDERS = [browserDocumentProvider, documentProvider];\r\n\r\nlet AutoplayService = class AutoplayService {\r\n    constructor(carouselService, winRef, docRef) {\r\n        this.carouselService = carouselService;\r\n        /**\r\n         * The autoplay timeout.\r\n         */\r\n        this._timeout = null;\r\n        /**\r\n         * Indicates whenever the autoplay is paused.\r\n         */\r\n        this._paused = false;\r\n        this.winRef = winRef;\r\n        this.docRef = docRef;\r\n        this.spyDataStreams();\r\n    }\r\n    ngOnDestroy() {\r\n        this.autoplaySubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Defines Observables which service must observe\r\n     */\r\n    spyDataStreams() {\r\n        const initializedCarousel$ = this.carouselService.getInitializedState().pipe(tap(() => {\r\n            if (this.carouselService.settings.autoplay) {\r\n                this.play();\r\n            }\r\n        }));\r\n        const changedSettings$ = this.carouselService.getChangedState().pipe(tap(data => {\r\n            this._handleChangeObservable(data);\r\n        }));\r\n        const resized$ = this.carouselService.getResizedState().pipe(tap(() => {\r\n            if (this.carouselService.settings.autoplay) {\r\n                this.play();\r\n            }\r\n            else {\r\n                this.stop();\r\n            }\r\n        }));\r\n        // original Autoplay Plugin has listeners on play.owl.core and stop.owl.core events.\r\n        // They are triggered by Video Plugin\r\n        const autoplayMerge$ = merge(initializedCarousel$, changedSettings$, resized$);\r\n        this.autoplaySubscription = autoplayMerge$.subscribe(() => { });\r\n    }\r\n    /**\r\n       * Starts the autoplay.\r\n       * @param timeout The interval before the next animation starts.\r\n       * @param speed The animation speed for the animations.\r\n       */\r\n    play(timeout, speed) {\r\n        if (this._paused) {\r\n            this._paused = false;\r\n            this._setAutoPlayInterval(1);\r\n        }\r\n        if (this.carouselService.is('rotating')) {\r\n            return;\r\n        }\r\n        this.carouselService.enter('rotating');\r\n        this._setAutoPlayInterval();\r\n    }\r\n    ;\r\n    /**\r\n       * Gets a new timeout\r\n       * @param timeout - The interval before the next animation starts.\r\n       * @param speed - The animation speed for the animations.\r\n       * @return\r\n       */\r\n    _getNextTimeout(timeout, speed) {\r\n        if (this._timeout) {\r\n            this.winRef.clearTimeout(this._timeout);\r\n        }\r\n        this._isArtificialAutoplayTimeout = timeout ? true : false;\r\n        return this.winRef.setTimeout(() => {\r\n            if (this._paused || this.carouselService.is('busy') || this.carouselService.is('interacting') || this.docRef.hidden) {\r\n                return;\r\n            }\r\n            this.carouselService.next(speed || this.carouselService.settings.autoplaySpeed);\r\n        }, timeout || this.carouselService.settings.autoplayTimeout);\r\n    }\r\n    ;\r\n    /**\r\n       * Sets autoplay in motion.\r\n       */\r\n    _setAutoPlayInterval(timeout) {\r\n        this._timeout = this._getNextTimeout(timeout);\r\n    }\r\n    ;\r\n    /**\r\n     * Stops the autoplay.\r\n     */\r\n    stop() {\r\n        if (!this.carouselService.is('rotating')) {\r\n            return;\r\n        }\r\n        this._paused = true;\r\n        this.winRef.clearTimeout(this._timeout);\r\n        this.carouselService.leave('rotating');\r\n    }\r\n    ;\r\n    /**\r\n       * Stops the autoplay.\r\n       */\r\n    pause() {\r\n        if (!this.carouselService.is('rotating')) {\r\n            return;\r\n        }\r\n        this._paused = true;\r\n    }\r\n    ;\r\n    /**\r\n     * Manages by autoplaying according to data passed by _changedSettingsCarousel$ Obsarvable\r\n     * @param data object with current position of carousel and type of change\r\n     */\r\n    _handleChangeObservable(data) {\r\n        if (data.property.name === 'settings') {\r\n            if (this.carouselService.settings.autoplay) {\r\n                this.play();\r\n            }\r\n            else {\r\n                this.stop();\r\n            }\r\n        }\r\n        else if (data.property.name === 'position') {\r\n            //console.log('play?', e);\r\n            if (this.carouselService.settings.autoplay) {\r\n                this._setAutoPlayInterval();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Starts autoplaying of the carousel in the case when user leaves the carousel before it starts translateing (moving)\r\n     */\r\n    _playAfterTranslated() {\r\n        of('translated').pipe(switchMap(data => this.carouselService.getTranslatedState()), first(), filter(() => this._isArtificialAutoplayTimeout), tap(() => this._setAutoPlayInterval())).subscribe(() => { });\r\n    }\r\n    /**\r\n     * Starts pausing\r\n     */\r\n    startPausing() {\r\n        if (this.carouselService.settings.autoplayHoverPause && this.carouselService.is('rotating')) {\r\n            this.pause();\r\n        }\r\n    }\r\n    /**\r\n     * Starts playing after mouse leaves carousel\r\n     */\r\n    startPlayingMouseLeave() {\r\n        if (this.carouselService.settings.autoplayHoverPause && this.carouselService.is('rotating')) {\r\n            this.play();\r\n            this._playAfterTranslated();\r\n        }\r\n    }\r\n    /**\r\n     * Starts playing after touch ends\r\n     */\r\n    startPlayingTouchEnd() {\r\n        if (this.carouselService.settings.autoplayHoverPause && this.carouselService.is('rotating')) {\r\n            this.play();\r\n            this._playAfterTranslated();\r\n        }\r\n    }\r\n};\r\nAutoplayService.ctorParameters = () => [\r\n    { type: CarouselService },\r\n    { type: undefined, decorators: [{ type: Inject, args: [WINDOW,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\nAutoplayService = __decorate([\r\n    Injectable(),\r\n    __param(1, Inject(WINDOW)),\r\n    __param(2, Inject(DOCUMENT))\r\n], AutoplayService);\r\n\r\nlet LazyLoadService = class LazyLoadService {\r\n    constructor(carouselService) {\r\n        this.carouselService = carouselService;\r\n        this.spyDataStreams();\r\n    }\r\n    ngOnDestroy() {\r\n        this.lazyLoadSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Defines Observables which service must observe\r\n     */\r\n    spyDataStreams() {\r\n        const initializedCarousel$ = this.carouselService.getInitializedState().pipe(tap(() => {\r\n            const isLazyLoad = this.carouselService.settings && !this.carouselService.settings.lazyLoad;\r\n            this.carouselService.slidesData.forEach(item => item.load = isLazyLoad ? true : false);\r\n        }));\r\n        const changeSettings$ = this.carouselService.getChangeState();\r\n        const resizedCarousel$ = this.carouselService.getResizedState();\r\n        const lazyLoadMerge$ = merge(initializedCarousel$, changeSettings$, resizedCarousel$).pipe(tap(data => this._defineLazyLoadSlides(data)));\r\n        this.lazyLoadSubscription = lazyLoadMerge$.subscribe(() => { });\r\n    }\r\n    _defineLazyLoadSlides(data) {\r\n        if (!this.carouselService.settings || !this.carouselService.settings.lazyLoad) {\r\n            return;\r\n        }\r\n        if ((data.property && data.property.name === 'position') || data === 'initialized' || data === \"resized\") {\r\n            const settings = this.carouselService.settings, clones = this.carouselService.clones().length;\r\n            let n = (settings.center && Math.ceil(settings.items / 2) || settings.items), i = ((settings.center && n * -1) || 0), position = (data.property && data.property.value !== undefined ? data.property.value : this.carouselService.current()) + i;\r\n            // load = $.proxy(function(i, v) { this.load(v) }, this);\r\n            //TODO: Need documentation for this new option\r\n            if (settings.lazyLoadEager > 0) {\r\n                n += settings.lazyLoadEager;\r\n                // If the carousel is looping also preload images that are to the \"left\"\r\n                if (settings.loop) {\r\n                    position -= settings.lazyLoadEager;\r\n                    n++;\r\n                }\r\n            }\r\n            while (i++ < n) {\r\n                this._load(clones / 2 + this.carouselService.relative(position));\r\n                if (clones) {\r\n                    this.carouselService.clones(this.carouselService.relative(position)).forEach(value => this._load(value));\r\n                }\r\n                position++;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n       * Loads all resources of an item at the specified position.\r\n       * @param position - The absolute position of the item.\r\n       */\r\n    _load(position) {\r\n        if (this.carouselService.slidesData[position].load) {\r\n            return;\r\n        }\r\n        this.carouselService.slidesData[position].load = true;\r\n    }\r\n};\r\nLazyLoadService.ctorParameters = () => [\r\n    { type: CarouselService }\r\n];\r\nLazyLoadService = __decorate([\r\n    Injectable()\r\n], LazyLoadService);\r\n\r\nlet AnimateService = class AnimateService {\r\n    constructor(carouselService) {\r\n        this.carouselService = carouselService;\r\n        /**\r\n         * s\r\n         */\r\n        this.swapping = true;\r\n        /**\r\n         * active slide before translating\r\n         */\r\n        this.previous = undefined;\r\n        /**\r\n         * new active slide after translating\r\n         */\r\n        this.next = undefined;\r\n        this.spyDataStreams();\r\n    }\r\n    ngOnDestroy() {\r\n        this.animateSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Defines Observables which service must observe\r\n     */\r\n    spyDataStreams() {\r\n        const changeSettings$ = this.carouselService.getChangeState().pipe(tap(data => {\r\n            if (data.property.name === 'position') {\r\n                this.previous = this.carouselService.current();\r\n                this.next = data.property.value;\r\n            }\r\n        }));\r\n        const dragCarousel$ = this.carouselService.getDragState();\r\n        const draggedCarousel$ = this.carouselService.getDraggedState();\r\n        const translatedCarousel$ = this.carouselService.getTranslatedState();\r\n        const dragTranslatedMerge$ = merge(dragCarousel$, draggedCarousel$, translatedCarousel$).pipe(tap(data => this.swapping = data === 'translated'));\r\n        const translateCarousel$ = this.carouselService.getTranslateState().pipe(tap(data => {\r\n            if (this.swapping && (this.carouselService._options.animateOut || this.carouselService._options.animateIn)) {\r\n                this._swap();\r\n            }\r\n        }));\r\n        const animateMerge$ = merge(changeSettings$, translateCarousel$, dragTranslatedMerge$).pipe();\r\n        this.animateSubscription = animateMerge$.subscribe(() => { });\r\n    }\r\n    /**\r\n       * Toggles the animation classes whenever an translations starts.\r\n       * @returns\r\n       */\r\n    _swap() {\r\n        if (this.carouselService.settings.items !== 1) {\r\n            return;\r\n        }\r\n        // if (!$.support.animation || !$.support.transition) {\r\n        // \treturn;\r\n        // }\r\n        this.carouselService.speed(0);\r\n        let left;\r\n        const previous = this.carouselService.slidesData[this.previous], next = this.carouselService.slidesData[this.next], incoming = this.carouselService.settings.animateIn, outgoing = this.carouselService.settings.animateOut;\r\n        if (this.carouselService.current() === this.previous) {\r\n            return;\r\n        }\r\n        if (outgoing) {\r\n            left = +this.carouselService.coordinates(this.previous) - +this.carouselService.coordinates(this.next);\r\n            this.carouselService.slidesData.forEach(slide => {\r\n                if (slide.id === previous.id) {\r\n                    slide.left = `${left}px`;\r\n                    slide.isAnimated = true;\r\n                    slide.isDefAnimatedOut = true;\r\n                    slide.isCustomAnimatedOut = true;\r\n                }\r\n            });\r\n        }\r\n        if (incoming) {\r\n            this.carouselService.slidesData.forEach(slide => {\r\n                if (slide.id === next.id) {\r\n                    slide.isAnimated = true;\r\n                    slide.isDefAnimatedIn = true;\r\n                    slide.isCustomAnimatedIn = true;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    ;\r\n    /**\r\n     * Handles the end of 'animationend' event\r\n     * @param id Id of slides\r\n     */\r\n    clear(id) {\r\n        this.carouselService.slidesData.forEach(slide => {\r\n            if (slide.id === id) {\r\n                slide.left = '';\r\n                slide.isAnimated = false;\r\n                slide.isDefAnimatedOut = false;\r\n                slide.isCustomAnimatedOut = false;\r\n                slide.isDefAnimatedIn = false;\r\n                slide.isCustomAnimatedIn = false;\r\n                slide.classes = this.carouselService.setCurSlideClasses(slide);\r\n            }\r\n        });\r\n        this.carouselService.onTransitionEnd();\r\n    }\r\n    ;\r\n};\r\nAnimateService.ctorParameters = () => [\r\n    { type: CarouselService }\r\n];\r\nAnimateService = __decorate([\r\n    Injectable()\r\n], AnimateService);\r\n\r\nlet AutoHeightService = class AutoHeightService {\r\n    constructor(carouselService) {\r\n        this.carouselService = carouselService;\r\n        this.spyDataStreams();\r\n    }\r\n    ngOnDestroy() {\r\n        this.autoHeightSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Defines Observables which service must observe\r\n     */\r\n    spyDataStreams() {\r\n        const initializedCarousel$ = this.carouselService.getInitializedState().pipe(tap(data => {\r\n            if (this.carouselService.settings.autoHeight) {\r\n                this.update();\r\n            }\r\n            else {\r\n                this.carouselService.slidesData.forEach(slide => slide.heightState = 'full');\r\n            }\r\n        }));\r\n        const changedSettings$ = this.carouselService.getChangedState().pipe(tap(data => {\r\n            if (this.carouselService.settings.autoHeight && data.property.name === 'position') {\r\n                this.update();\r\n            }\r\n        }));\r\n        const refreshedCarousel$ = this.carouselService.getRefreshedState().pipe(tap(data => {\r\n            if (this.carouselService.settings.autoHeight) {\r\n                this.update();\r\n            }\r\n        }));\r\n        const autoHeight$ = merge(initializedCarousel$, changedSettings$, refreshedCarousel$);\r\n        this.autoHeightSubscription = autoHeight$.subscribe(() => { });\r\n    }\r\n    /**\r\n     * Updates the prop 'heightState' of slides\r\n     */\r\n    update() {\r\n        const items = this.carouselService.settings.items;\r\n        let start = this.carouselService.current(), end = start + items;\r\n        if (this.carouselService.settings.center) {\r\n            start = items % 2 === 1 ? start - (items - 1) / 2 : start - items / 2;\r\n            end = items % 2 === 1 ? start + items : start + items + 1;\r\n        }\r\n        this.carouselService.slidesData.forEach((slide, i) => {\r\n            slide.heightState = (i >= start && i < end) ? 'full' : 'nulled';\r\n        });\r\n    }\r\n};\r\nAutoHeightService.ctorParameters = () => [\r\n    { type: CarouselService }\r\n];\r\nAutoHeightService = __decorate([\r\n    Injectable()\r\n], AutoHeightService);\r\n\r\nlet HashService = class HashService {\r\n    constructor(carouselService, route, router) {\r\n        this.carouselService = carouselService;\r\n        this.route = route;\r\n        this.router = router;\r\n        this.spyDataStreams();\r\n        if (!this.route) {\r\n            this.route = {\r\n                fragment: of('no route').pipe(take(1))\r\n            };\r\n        }\r\n        ;\r\n        if (!this.router) {\r\n            this.router = {\r\n                navigate: (commands, extras) => { return; }\r\n            };\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.hashSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Defines Observables which service must observe\r\n     */\r\n    spyDataStreams() {\r\n        const initializedCarousel$ = this.carouselService.getInitializedState().pipe(tap(() => this.listenToRoute()));\r\n        const changedSettings$ = this.carouselService.getChangedState().pipe(tap(data => {\r\n            if (this.carouselService.settings.URLhashListener && data.property.name === 'position') {\r\n                const newCurSlide = this.carouselService.current();\r\n                const newCurFragment = this.carouselService.slidesData[newCurSlide].hashFragment;\r\n                if (!newCurFragment || newCurFragment === this.currentHashFragment) {\r\n                    return;\r\n                }\r\n                this.router.navigate(['./'], { fragment: newCurFragment, relativeTo: this.route });\r\n            }\r\n        }));\r\n        const hashFragment$ = merge(initializedCarousel$, changedSettings$);\r\n        this.hashSubscription = hashFragment$.subscribe(() => { });\r\n    }\r\n    /**\r\n     * rewinds carousel to slide which has the same hashFragment as fragment of current url\r\n     * @param fragment fragment of url\r\n     */\r\n    rewind(fragment) {\r\n        const position = this.carouselService.slidesData.findIndex(slide => slide.hashFragment === fragment && slide.isCloned === false);\r\n        if (position === -1 || position === this.carouselService.current()) {\r\n            return;\r\n        }\r\n        this.carouselService.to(this.carouselService.relative(position), false);\r\n    }\r\n    /**\r\n     * Initiate listening to ActivatedRoute.fragment\r\n     */\r\n    listenToRoute() {\r\n        const count = this.carouselService.settings.startPosition === 'URLHash' ? 0 : 2;\r\n        this.route.fragment.pipe(skip(count))\r\n            .subscribe(fragment => {\r\n            this.currentHashFragment = fragment;\r\n            this.rewind(fragment);\r\n        });\r\n    }\r\n};\r\nHashService.ctorParameters = () => [\r\n    { type: CarouselService },\r\n    { type: ActivatedRoute, decorators: [{ type: Optional }] },\r\n    { type: Router, decorators: [{ type: Optional }] }\r\n];\r\nHashService = __decorate([\r\n    Injectable(),\r\n    __param(1, Optional()),\r\n    __param(2, Optional())\r\n], HashService);\r\n\r\nlet nextId = 0;\r\nlet CarouselSlideDirective = class CarouselSlideDirective {\r\n    constructor(tplRef) {\r\n        this.tplRef = tplRef;\r\n        /**\r\n         * Unique slide identifier. Must be unique for the entire document for proper accessibility support.\r\n         * Will be auto-generated if not provided.\r\n         */\r\n        this.id = `owl-slide-${nextId++}`;\r\n        /**\r\n         * Defines how much widths of common slide will current slide have\r\n         * e.g. if _mergeData=2, the slide will twice wider then slides with _mergeData=1\r\n         */\r\n        this._dataMerge = 1;\r\n        /**\r\n         * Width of slide\r\n         */\r\n        this.width = 0;\r\n        /**\r\n         * Inner content of dot for certain slide; can be html-markup\r\n         */\r\n        this.dotContent = '';\r\n        /**\r\n         * Hash (fragment) of url which corresponds to certain slide\r\n         */\r\n        this.dataHash = '';\r\n    }\r\n    set dataMerge(data) {\r\n        this._dataMerge = this.isNumeric(data) ? data : 1;\r\n    }\r\n    ;\r\n    get dataMerge() { return this._dataMerge; }\r\n    /**\r\n       * Determines if the input is a Number or something that can be coerced to a Number\r\n       * @param - The input to be tested\r\n       * @returns - An indication if the input is a Number or can be coerced to a Number\r\n       */\r\n    isNumeric(number) {\r\n        return !isNaN(parseFloat(number));\r\n    }\r\n};\r\nCarouselSlideDirective.ctorParameters = () => [\r\n    { type: TemplateRef }\r\n];\r\n__decorate([\r\n    Input()\r\n], CarouselSlideDirective.prototype, \"id\", void 0);\r\n__decorate([\r\n    Input()\r\n], CarouselSlideDirective.prototype, \"dataMerge\", null);\r\n__decorate([\r\n    Input()\r\n], CarouselSlideDirective.prototype, \"width\", void 0);\r\n__decorate([\r\n    Input()\r\n], CarouselSlideDirective.prototype, \"dotContent\", void 0);\r\n__decorate([\r\n    Input()\r\n], CarouselSlideDirective.prototype, \"dataHash\", void 0);\r\nCarouselSlideDirective = __decorate([\r\n    Directive({ selector: 'ng-template[carouselSlide]' })\r\n], CarouselSlideDirective);\r\n/**\r\n * Data which will be passed out after ending of transition of carousel\r\n */\r\nclass SlidesOutputData {\r\n}\r\n;\r\nlet CarouselComponent = class CarouselComponent {\r\n    constructor(el, resizeService, carouselService, navigationService, autoplayService, lazyLoadService, animateService, autoHeightService, hashService, logger, changeDetectorRef, docRef) {\r\n        this.el = el;\r\n        this.resizeService = resizeService;\r\n        this.carouselService = carouselService;\r\n        this.navigationService = navigationService;\r\n        this.autoplayService = autoplayService;\r\n        this.lazyLoadService = lazyLoadService;\r\n        this.animateService = animateService;\r\n        this.autoHeightService = autoHeightService;\r\n        this.hashService = hashService;\r\n        this.logger = logger;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this.translated = new EventEmitter();\r\n        this.dragging = new EventEmitter();\r\n        this.change = new EventEmitter();\r\n        this.changed = new EventEmitter();\r\n        this.initialized = new EventEmitter();\r\n        /**\r\n           *  Data of every slide\r\n           */\r\n        this.slidesData = [];\r\n        /**\r\n         * Shows whether carousel is loaded of not.\r\n         */\r\n        this.carouselLoaded = false;\r\n        this.docRef = docRef;\r\n    }\r\n    onVisibilityChange(ev) {\r\n        if (!this.carouselService.settings.autoplay)\r\n            return;\r\n        switch (this.docRef.visibilityState) {\r\n            case 'visible':\r\n                this.autoplayService.play();\r\n                break;\r\n            case 'hidden':\r\n                this.autoplayService.stop();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    ;\r\n    ngOnInit() {\r\n        this.spyDataStreams();\r\n        this.carouselWindowWidth = this.el.nativeElement.querySelector('.owl-carousel').clientWidth;\r\n    }\r\n    ngAfterContentChecked() {\r\n    }\r\n    // ngAfterContentChecked() END\r\n    ngAfterContentInit() {\r\n        if (this.slides.toArray().length) {\r\n            this.carouselService.setup(this.carouselWindowWidth, this.slides.toArray(), this.options);\r\n            this.carouselService.initialize(this.slides.toArray());\r\n            this._winResizeWatcher();\r\n        }\r\n        else {\r\n            this.logger.log(`There are no slides to show. So the carousel won't be rendered`);\r\n        }\r\n        this._slidesChangesSubscription = this.slides.changes.pipe(tap((slides) => {\r\n            if (slides.toArray().length) {\r\n                // this.carouselService.setItems(slides.toArray());\r\n                this.carouselService.setup(this.carouselWindowWidth, slides.toArray(), this.options);\r\n                this.carouselService.initialize(slides.toArray());\r\n            }\r\n            else {\r\n                this.carouselLoaded = false;\r\n                this.logger.log(`There are no slides to show. So the carousel won't be re-rendered`);\r\n            }\r\n        })).subscribe(() => { });\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.resizeSubscription) {\r\n            this.resizeSubscription.unsubscribe();\r\n        }\r\n        if (this._slidesChangesSubscription) {\r\n            this._slidesChangesSubscription.unsubscribe();\r\n        }\r\n        if (this._allObservSubscription) {\r\n            this._allObservSubscription.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * Joins the observable login in one place: sets values to some observables, merges this observables and\r\n     * subcribes to merge func\r\n     */\r\n    spyDataStreams() {\r\n        this._viewCurSettings$ = this.carouselService.getViewCurSettings().pipe(tap(data => {\r\n            this.owlDOMData = data.owlDOMData;\r\n            this.stageData = data.stageData;\r\n            this.slidesData = data.slidesData;\r\n            if (!this.carouselLoaded) {\r\n                this.carouselLoaded = true;\r\n            }\r\n            this.navData = data.navData;\r\n            this.dotsData = data.dotsData;\r\n            this.changeDetectorRef.markForCheck();\r\n        }));\r\n        this._initializedCarousel$ = this.carouselService.getInitializedState().pipe(tap(() => {\r\n            this.gatherTranslatedData();\r\n            this.initialized.emit(this.slidesOutputData);\r\n            // this.slidesOutputData = {};\r\n        }));\r\n        this._translatedCarousel$ = this.carouselService.getTranslatedState().pipe(tap(() => {\r\n            this.gatherTranslatedData();\r\n            this.translated.emit(this.slidesOutputData);\r\n            // this.slidesOutputData = {};\r\n        }));\r\n        this._changeCarousel$ = this.carouselService.getChangeState().pipe(tap(() => {\r\n            this.gatherTranslatedData();\r\n            this.change.emit(this.slidesOutputData);\r\n            // this.slidesOutputData = {};\r\n        }));\r\n        this._changedCarousel$ = this.carouselService.getChangeState().pipe(switchMap(value => {\r\n            const changedPosition = of(value).pipe(filter(() => value.property.name === 'position'), switchMap(() => from(this.slidesData)), skip(value.property.value), take(this.carouselService.settings.items), map(slide => {\r\n                const clonedIdPrefix = this.carouselService.clonedIdPrefix;\r\n                const id = slide.id.indexOf(clonedIdPrefix) >= 0 ? slide.id.slice(clonedIdPrefix.length) : slide.id;\r\n                return Object.assign(Object.assign({}, slide), { id: id, isActive: true });\r\n            }), toArray(), map(slides => {\r\n                return {\r\n                    slides: slides,\r\n                    startPosition: this.carouselService.relative(value.property.value)\r\n                };\r\n            }));\r\n            // const changedSetting: Observable<SlidesOutputData> = of(value).pipe(\r\n            //   filter(() => value.property.name === 'settings'),\r\n            //   map(() => {\r\n            //     return {\r\n            //       slides: [],\r\n            //       startPosition: this.carouselService.relative(value.property.value)\r\n            //     }\r\n            //   })\r\n            // )\r\n            return merge(changedPosition);\r\n        }), tap(slidesData => {\r\n            this.gatherTranslatedData();\r\n            this.changed.emit(slidesData.slides.length ? slidesData : this.slidesOutputData);\r\n            // console.log(this.slidesOutputData);\r\n            // this.slidesOutputData = {};\r\n        }));\r\n        this._draggingCarousel$ = this.carouselService.getDragState().pipe(tap(() => {\r\n            this.gatherTranslatedData();\r\n            this.dragging.emit({ dragging: true, data: this.slidesOutputData });\r\n        }), switchMap(() => this.carouselService.getDraggedState().pipe(map(() => !!this.carouselService.is('animating')))), switchMap(anim => {\r\n            if (anim) {\r\n                return this.carouselService.getTranslatedState().pipe(first());\r\n            }\r\n            else {\r\n                return of('not animating');\r\n            }\r\n        }), tap(() => {\r\n            this.dragging.emit({ dragging: false, data: this.slidesOutputData });\r\n        }));\r\n        this._carouselMerge$ = merge(this._viewCurSettings$, this._translatedCarousel$, this._draggingCarousel$, this._changeCarousel$, this._changedCarousel$, this._initializedCarousel$);\r\n        this._allObservSubscription = this._carouselMerge$.subscribe(() => { });\r\n    }\r\n    /**\r\n     * Init subscription to resize event and attaches handler for this event\r\n     */\r\n    _winResizeWatcher() {\r\n        if (Object.keys(this.carouselService._options.responsive).length) {\r\n            this.resizeSubscription = this.resizeService.onResize$\r\n                .pipe(filter(() => this.carouselWindowWidth !== this.el.nativeElement.querySelector('.owl-carousel').clientWidth), delay(this.carouselService.settings.responsiveRefreshRate))\r\n                .subscribe(() => {\r\n                this.carouselService.onResize(this.el.nativeElement.querySelector('.owl-carousel').clientWidth);\r\n                this.carouselWindowWidth = this.el.nativeElement.querySelector('.owl-carousel').clientWidth;\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Handler for transitioend event\r\n     */\r\n    onTransitionEnd() {\r\n        this.carouselService.onTransitionEnd();\r\n    }\r\n    /**\r\n     * Handler for click event, attached to next button\r\n     */\r\n    next() {\r\n        if (!this.carouselLoaded)\r\n            return;\r\n        this.navigationService.next(this.carouselService.settings.navSpeed);\r\n    }\r\n    /**\r\n     * Handler for click event, attached to prev button\r\n     */\r\n    prev() {\r\n        if (!this.carouselLoaded)\r\n            return;\r\n        this.navigationService.prev(this.carouselService.settings.navSpeed);\r\n    }\r\n    /**\r\n     * Handler for click event, attached to dots\r\n     */\r\n    moveByDot(dotId) {\r\n        if (!this.carouselLoaded)\r\n            return;\r\n        this.navigationService.moveByDot(dotId);\r\n    }\r\n    /**\r\n     * rewinds carousel to slide with needed id\r\n     * @param id fragment of url\r\n     */\r\n    to(id) {\r\n        // if (!this.carouselLoaded || ((this.navData && this.navData.disabled) && (this.dotsData && this.dotsData.disabled))) return;\r\n        if (!this.carouselLoaded)\r\n            return;\r\n        this.navigationService.toSlideById(id);\r\n    }\r\n    /**\r\n     * Gathers and prepares data intended for passing to the user by means of firing event translatedCarousel\r\n     */\r\n    gatherTranslatedData() {\r\n        let startPosition;\r\n        const clonedIdPrefix = this.carouselService.clonedIdPrefix;\r\n        const activeSlides = this.slidesData\r\n            .filter(slide => slide.isActive === true)\r\n            .map(slide => {\r\n            const id = slide.id.indexOf(clonedIdPrefix) >= 0 ? slide.id.slice(clonedIdPrefix.length) : slide.id;\r\n            return {\r\n                id: id,\r\n                width: slide.width,\r\n                marginL: slide.marginL,\r\n                marginR: slide.marginR,\r\n                center: slide.isCentered\r\n            };\r\n        });\r\n        startPosition = this.carouselService.relative(this.carouselService.current());\r\n        this.slidesOutputData = {\r\n            startPosition: startPosition,\r\n            slides: activeSlides\r\n        };\r\n    }\r\n    /**\r\n     * Starts pausing\r\n     */\r\n    startPausing() {\r\n        this.autoplayService.startPausing();\r\n    }\r\n    /**\r\n     * Starts playing after mouse leaves carousel\r\n     */\r\n    startPlayML() {\r\n        this.autoplayService.startPlayingMouseLeave();\r\n    }\r\n    /**\r\n     * Starts playing after touch ends\r\n     */\r\n    startPlayTE() {\r\n        this.autoplayService.startPlayingTouchEnd();\r\n    }\r\n};\r\nCarouselComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: ResizeService },\r\n    { type: CarouselService },\r\n    { type: NavigationService },\r\n    { type: AutoplayService },\r\n    { type: LazyLoadService },\r\n    { type: AnimateService },\r\n    { type: AutoHeightService },\r\n    { type: HashService },\r\n    { type: OwlLogger },\r\n    { type: ChangeDetectorRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\n__decorate([\r\n    ContentChildren(CarouselSlideDirective)\r\n], CarouselComponent.prototype, \"slides\", void 0);\r\n__decorate([\r\n    Output()\r\n], CarouselComponent.prototype, \"translated\", void 0);\r\n__decorate([\r\n    Output()\r\n], CarouselComponent.prototype, \"dragging\", void 0);\r\n__decorate([\r\n    Output()\r\n], CarouselComponent.prototype, \"change\", void 0);\r\n__decorate([\r\n    Output()\r\n], CarouselComponent.prototype, \"changed\", void 0);\r\n__decorate([\r\n    Output()\r\n], CarouselComponent.prototype, \"initialized\", void 0);\r\n__decorate([\r\n    Input()\r\n], CarouselComponent.prototype, \"options\", void 0);\r\n__decorate([\r\n    HostListener('document:visibilitychange', ['$event'])\r\n], CarouselComponent.prototype, \"onVisibilityChange\", null);\r\nCarouselComponent = __decorate([\r\n    Component({\r\n        selector: 'owl-carousel-o',\r\n        template: `\r\n    <div class=\"owl-carousel owl-theme\" #owlCarousel\r\n      [ngClass]=\"{'owl-rtl': owlDOMData?.rtl,\r\n                  'owl-loaded': owlDOMData?.isLoaded,\r\n                  'owl-responsive': owlDOMData?.isResponsive,\r\n                  'owl-drag': owlDOMData?.isMouseDragable,\r\n                  'owl-grab': owlDOMData?.isGrab}\"\r\n      (mouseover)=\"startPausing()\"\r\n      (mouseleave)=\"startPlayML()\"\r\n      (touchstart)=\"startPausing()\"\r\n      (touchend)=\"startPlayTE()\">\r\n\r\n      <div *ngIf=\"carouselLoaded\" class=\"owl-stage-outer\">\r\n        <owl-stage [owlDraggable]=\"{'isMouseDragable': owlDOMData?.isMouseDragable, 'isTouchDragable': owlDOMData?.isTouchDragable}\"\r\n                    [stageData]=\"stageData\"\r\n                    [slidesData]=\"slidesData\"></owl-stage>\r\n      </div> <!-- /.owl-stage-outer -->\r\n      <ng-container *ngIf=\"slides.toArray().length\">\r\n        <div class=\"owl-nav\" [ngClass]=\"{'disabled': navData?.disabled}\">\r\n          <div class=\"owl-prev\" [ngClass]=\"{'disabled': navData?.prev?.disabled}\" (click)=\"prev()\" [innerHTML]=\"navData?.prev?.htmlText\"></div>\r\n          <div class=\"owl-next\" [ngClass]=\"{'disabled': navData?.next?.disabled}\" (click)=\"next()\" [innerHTML]=\"navData?.next?.htmlText\"></div>\r\n        </div> <!-- /.owl-nav -->\r\n        <div class=\"owl-dots\" [ngClass]=\"{'disabled': dotsData?.disabled}\">\r\n          <div *ngFor=\"let dot of dotsData?.dots\" class=\"owl-dot\" [ngClass]=\"{'active': dot.active, 'owl-dot-text': dot.showInnerContent}\" (click)=\"moveByDot(dot.id)\">\r\n            <span [innerHTML]=\"dot.innerContent\"></span>\r\n          </div>\r\n        </div> <!-- /.owl-dots -->\r\n      </ng-container>\r\n    </div> <!-- /.owl-carousel owl-loaded -->\r\n  `,\r\n        providers: [\r\n            NavigationService,\r\n            AutoplayService,\r\n            CarouselService,\r\n            LazyLoadService,\r\n            AnimateService,\r\n            AutoHeightService,\r\n            HashService\r\n        ],\r\n        styles: [`.owl-theme { display: block; }`]\r\n    }),\r\n    __param(11, Inject(DOCUMENT))\r\n], CarouselComponent);\r\n\r\nlet StageComponent = class StageComponent {\r\n    constructor(zone, el, renderer, carouselService, animateService) {\r\n        this.zone = zone;\r\n        this.el = el;\r\n        this.renderer = renderer;\r\n        this.carouselService = carouselService;\r\n        this.animateService = animateService;\r\n        /**\r\n         * Object with data needed for dragging\r\n         */\r\n        this._drag = {\r\n            time: null,\r\n            target: null,\r\n            pointer: null,\r\n            stage: {\r\n                start: null,\r\n                current: null\r\n            },\r\n            direction: null,\r\n            active: false,\r\n            moving: false\r\n        };\r\n        /**\r\n         * Subject for notification when the carousel's rebuilding caused by resize event starts\r\n         */\r\n        this._oneDragMove$ = new Subject();\r\n        /**\r\n         * Passes this to _oneMouseTouchMove();\r\n         */\r\n        this.bindOneMouseTouchMove = (ev) => {\r\n            this._oneMouseTouchMove(ev);\r\n        };\r\n        /**\r\n         * Passes this to _onDragMove();\r\n         */\r\n        this.bindOnDragMove = (ev) => {\r\n            this._onDragMove(ev);\r\n        };\r\n        /**\r\n         * Passes this to _onDragMove();\r\n         */\r\n        this.bindOnDragEnd = (ev) => {\r\n            // this.zone.run(() => {\r\n            this._onDragEnd(ev);\r\n            // });\r\n        };\r\n        /**\r\n         * Attaches handler for 'click' event on any element in .owl-stage in order to prevent dragging when moving of cursor is less than 3px\r\n         */\r\n        this._oneClickHandler = () => {\r\n            this.listenerOneClick = this.renderer.listen(this._drag.target, 'click', () => false);\r\n            this.listenerOneClick();\r\n        };\r\n    }\r\n    onMouseDown(event) {\r\n        if (this.owlDraggable.isMouseDragable) {\r\n            this._onDragStart(event);\r\n        }\r\n    }\r\n    onTouchStart(event) {\r\n        if (this.owlDraggable.isTouchDragable) {\r\n            this._onDragStart(event);\r\n        }\r\n    }\r\n    onTouchCancel(event) {\r\n        this._onDragEnd(event);\r\n    }\r\n    onDragStart() {\r\n        if (this.owlDraggable.isMouseDragable) {\r\n            return false;\r\n        }\r\n    }\r\n    onSelectStart() {\r\n        if (this.owlDraggable.isMouseDragable) {\r\n            return false;\r\n        }\r\n    }\r\n    ngOnInit() {\r\n        this._oneMoveSubsription = this._oneDragMove$\r\n            .pipe(first())\r\n            .subscribe(() => {\r\n            this._sendChanges();\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this._oneMoveSubsription.unsubscribe();\r\n    }\r\n    /**\r\n       * Handles `touchstart` and `mousedown` events.\r\n       * @todo Horizontal swipe threshold as option\r\n       * @todo #261\r\n       * @param event - The event arguments.\r\n       */\r\n    _onDragStart(event) {\r\n        let stage = null;\r\n        if (event.which === 3) {\r\n            return;\r\n        }\r\n        stage = this._prepareDragging(event);\r\n        this._drag.time = new Date().getTime();\r\n        this._drag.target = event.target;\r\n        this._drag.stage.start = stage;\r\n        this._drag.stage.current = stage;\r\n        this._drag.pointer = this._pointer(event);\r\n        this.listenerMouseUp = this.renderer.listen(document, 'mouseup', this.bindOnDragEnd);\r\n        this.listenerTouchEnd = this.renderer.listen(document, 'touchend', this.bindOnDragEnd);\r\n        this.zone.runOutsideAngular(() => {\r\n            this.listenerOneMouseMove = this.renderer.listen(document, 'mousemove', this.bindOneMouseTouchMove);\r\n            this.listenerOneTouchMove = this.renderer.listen(document, 'touchmove', this.bindOneMouseTouchMove);\r\n        });\r\n    }\r\n    /**\r\n     * Attaches listeners to `touchmove` and `mousemove` events; initiates updating carousel after starting dragging\r\n     * @param event event objech of mouse or touch event\r\n     */\r\n    _oneMouseTouchMove(event) {\r\n        const delta = this._difference(this._drag.pointer, this._pointer(event));\r\n        if (this.listenerATag) {\r\n            this.listenerATag();\r\n        }\r\n        if (Math.abs(delta.x) < 3 && Math.abs(delta.y) < 3 && this._is('valid')) {\r\n            return;\r\n        }\r\n        if ((Math.abs(delta.x) < 3 && Math.abs(delta.x) < Math.abs(delta.y)) && this._is('valid')) {\r\n            return;\r\n        }\r\n        this.listenerOneMouseMove();\r\n        this.listenerOneTouchMove();\r\n        this._drag.moving = true;\r\n        this.blockClickAnchorInDragging(event);\r\n        this.listenerMouseMove = this.renderer.listen(document, 'mousemove', this.bindOnDragMove);\r\n        this.listenerTouchMove = this.renderer.listen(document, 'touchmove', this.bindOnDragMove);\r\n        event.preventDefault();\r\n        this._enterDragging();\r\n        this._oneDragMove$.next(event);\r\n        // this._sendChanges();\r\n    }\r\n    /**\r\n     * Attaches handler to HTMLAnchorElement for preventing click while carousel is being dragged\r\n     * @param event event object\r\n     */\r\n    blockClickAnchorInDragging(event) {\r\n        let target = event.target;\r\n        while (target && !(target instanceof HTMLAnchorElement)) {\r\n            target = target.parentElement;\r\n        }\r\n        if (target instanceof HTMLAnchorElement) {\r\n            this.listenerATag = this.renderer.listen(target, 'click', () => false);\r\n        }\r\n    }\r\n    /**\r\n     * Handles the `touchmove` and `mousemove` events.\r\n     * @todo #261\r\n     * @param event - The event arguments.\r\n     */\r\n    _onDragMove(event) {\r\n        let stage;\r\n        const stageOrExit = this.carouselService.defineNewCoordsDrag(event, this._drag);\r\n        if (stageOrExit === false) {\r\n            return;\r\n        }\r\n        stage = stageOrExit;\r\n        event.preventDefault();\r\n        this._drag.stage.current = stage;\r\n        this._animate(stage.x - this._drag.stage.start.x);\r\n    }\r\n    ;\r\n    /**\r\n     * Moves .owl-stage left-right\r\n     * @param coordinate coordinate to be set to .owl-stage\r\n     */\r\n    _animate(coordinate) {\r\n        this.renderer.setStyle(this.el.nativeElement.children[0], 'transform', `translate3d(${coordinate}px,0px,0px`);\r\n        this.renderer.setStyle(this.el.nativeElement.children[0], 'transition', '0s');\r\n    }\r\n    /**\r\n       * Handles the `touchend` and `mouseup` events.\r\n       * @todo #261\r\n       * @todo Threshold for click event\r\n       * @param event - The event arguments.\r\n       */\r\n    _onDragEnd(event) {\r\n        this.carouselService.owlDOMData.isGrab = false;\r\n        this.listenerOneMouseMove();\r\n        this.listenerOneTouchMove();\r\n        if (this._drag.moving) {\r\n            this.renderer.setStyle(this.el.nativeElement.children[0], 'transform', ``);\r\n            this.renderer.setStyle(this.el.nativeElement.children[0], 'transition', this.carouselService.speed(+this.carouselService.settings.dragEndSpeed || this.carouselService.settings.smartSpeed) / 1000 + 's');\r\n            this._finishDragging(event);\r\n            this.listenerMouseMove();\r\n            this.listenerTouchMove();\r\n        }\r\n        this._drag = {\r\n            time: null,\r\n            target: null,\r\n            pointer: null,\r\n            stage: {\r\n                start: null,\r\n                current: null\r\n            },\r\n            direction: null,\r\n            active: false,\r\n            moving: false\r\n        };\r\n        // this.carouselService.trigger('dragged');\r\n        this.listenerMouseUp();\r\n        this.listenerTouchEnd();\r\n    }\r\n    ;\r\n    /**\r\n       * Prepares data for dragging carousel. It starts after firing `touchstart` and `mousedown` events.\r\n       * @param event - The event arguments.\r\n       * @returns stage - object with 'x' and 'y' coordinates of .owl-stage\r\n       */\r\n    _prepareDragging(event) {\r\n        return this.carouselService.prepareDragging(event);\r\n    }\r\n    /**\r\n     * Finishes dragging\r\n     * @param event object event of 'mouseUp' of 'touchend' events\r\n     */\r\n    _finishDragging(event) {\r\n        this.carouselService.finishDragging(event, this._drag, this._oneClickHandler);\r\n    }\r\n    /**\r\n       * Gets unified pointer coordinates from event.\r\n       * @param event The `mousedown` or `touchstart` event.\r\n       * @returns Contains `x` and `y` coordinates of current pointer position.\r\n       */\r\n    _pointer(event) {\r\n        return this.carouselService.pointer(event);\r\n    }\r\n    /**\r\n       * Gets the difference of two vectors.\r\n       * @param first The first vector.\r\n       * @param second- The second vector.\r\n       * @returns The difference.\r\n       */\r\n    _difference(firstC, second) {\r\n        return this.carouselService.difference(firstC, second);\r\n    }\r\n    /**\r\n       * Checks whether the carousel is in a specific state or not.\r\n       * @param specificState The state to check.\r\n       * @returns The flag which indicates if the carousel is busy.\r\n       */\r\n    _is(specificState) {\r\n        return this.carouselService.is(specificState);\r\n    }\r\n    /**\r\n    * Enters a state.\r\n    * @param name The state name.\r\n    */\r\n    _enter(name) {\r\n        this.carouselService.enter(name);\r\n    }\r\n    /**\r\n       * Sends all data needed for View.\r\n       */\r\n    _sendChanges() {\r\n        this.carouselService.sendChanges();\r\n    }\r\n    /**\r\n     * Handler for transitioend event\r\n     */\r\n    onTransitionEnd() {\r\n        this.carouselService.onTransitionEnd();\r\n    }\r\n    /**\r\n       * Enters into a 'dragging' state\r\n       */\r\n    _enterDragging() {\r\n        this.carouselService.enterDragging();\r\n    }\r\n    /**\r\n     * Handles the end of 'animationend' event\r\n     * @param id Id of slides\r\n     */\r\n    clear(id) {\r\n        this.animateService.clear(id);\r\n    }\r\n};\r\nStageComponent.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: ElementRef },\r\n    { type: Renderer2 },\r\n    { type: CarouselService },\r\n    { type: AnimateService }\r\n];\r\n__decorate([\r\n    Input()\r\n], StageComponent.prototype, \"owlDraggable\", void 0);\r\n__decorate([\r\n    Input()\r\n], StageComponent.prototype, \"stageData\", void 0);\r\n__decorate([\r\n    Input()\r\n], StageComponent.prototype, \"slidesData\", void 0);\r\n__decorate([\r\n    HostListener('mousedown', ['$event'])\r\n], StageComponent.prototype, \"onMouseDown\", null);\r\n__decorate([\r\n    HostListener('touchstart', ['$event'])\r\n], StageComponent.prototype, \"onTouchStart\", null);\r\n__decorate([\r\n    HostListener('touchcancel', ['$event'])\r\n], StageComponent.prototype, \"onTouchCancel\", null);\r\n__decorate([\r\n    HostListener('dragstart')\r\n], StageComponent.prototype, \"onDragStart\", null);\r\n__decorate([\r\n    HostListener('selectstart')\r\n], StageComponent.prototype, \"onSelectStart\", null);\r\nStageComponent = __decorate([\r\n    Component({\r\n        selector: 'owl-stage',\r\n        template: `\r\n    <div>\r\n      <div class=\"owl-stage\" [ngStyle]=\"{'width': stageData.width + 'px',\r\n                                        'transform': stageData.transform,\r\n                                        'transition': stageData.transition,\r\n                                        'padding-left': stageData.paddingL ? stageData.paddingL + 'px' : '',\r\n                                        'padding-right': stageData.paddingR ? stageData.paddingR + 'px' : '' }\"\r\n          (transitionend)=\"onTransitionEnd()\">\r\n        <ng-container *ngFor=\"let slide of slidesData; let i = index\">\r\n          <div class=\"owl-item\" [ngClass]=\"slide.classes\"\r\n                                [ngStyle]=\"{'width': slide.width + 'px',\r\n                                            'margin-left': slide.marginL ? slide.marginL + 'px' : '',\r\n                                            'margin-right': slide.marginR ? slide.marginR + 'px' : '',\r\n                                            'left': slide.left}\"\r\n                                (animationend)=\"clear(slide.id)\"\r\n                                [@autoHeight]=\"slide.heightState\">\r\n            <ng-template *ngIf=\"slide.load\" [ngTemplateOutlet]=\"slide.tplRef\"></ng-template>\r\n          </div><!-- /.owl-item -->\r\n        </ng-container>\r\n      </div><!-- /.owl-stage -->\r\n    </div>\r\n  `,\r\n        animations: [\r\n            trigger('autoHeight', [\r\n                state('nulled', style({ height: 0 })),\r\n                state('full', style({ height: '*' })),\r\n                transition('full => nulled', [\r\n                    // style({height: '*'}),\r\n                    animate('700ms 350ms')\r\n                ]),\r\n                transition('nulled => full', [\r\n                    // style({height: 0}),\r\n                    animate(350)\r\n                ]),\r\n            ])\r\n        ]\r\n    })\r\n], StageComponent);\r\n\r\nlet OwlRouterLinkDirective = class OwlRouterLinkDirective {\r\n    constructor(router, route, tabIndex, renderer, el) {\r\n        this.router = router;\r\n        this.route = route;\r\n        this.stopLink = false;\r\n        this.commands = [];\r\n        if (tabIndex == null) {\r\n            renderer.setAttribute(el.nativeElement, 'tabindex', '0');\r\n        }\r\n    }\r\n    set owlRouterLink(commands) {\r\n        if (commands != null) {\r\n            this.commands = Array.isArray(commands) ? commands : [commands];\r\n        }\r\n        else {\r\n            this.commands = [];\r\n        }\r\n    }\r\n    /**\r\n     * @deprecated 4.0.0 use `queryParamsHandling` instead.\r\n     */\r\n    set preserveQueryParams(value) {\r\n        if (isDevMode() && console && console.warn) {\r\n            console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');\r\n        }\r\n        this.preserve = value;\r\n    }\r\n    onClick() {\r\n        const extras = {\r\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\r\n            replaceUrl: attrBoolValue(this.replaceUrl),\r\n        };\r\n        if (this.stopLink) {\r\n            return false;\r\n        }\r\n        this.router.navigateByUrl(this.urlTree, extras);\r\n        return true;\r\n    }\r\n    get urlTree() {\r\n        return this.router.createUrlTree(this.commands, {\r\n            relativeTo: this.route,\r\n            queryParams: this.queryParams,\r\n            fragment: this.fragment,\r\n            preserveQueryParams: attrBoolValue(this.preserve),\r\n            queryParamsHandling: this.queryParamsHandling,\r\n            preserveFragment: attrBoolValue(this.preserveFragment),\r\n        });\r\n    }\r\n};\r\nOwlRouterLinkDirective.ctorParameters = () => [\r\n    { type: Router },\r\n    { type: ActivatedRoute },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n    { type: Renderer2 },\r\n    { type: ElementRef }\r\n];\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkDirective.prototype, \"queryParams\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkDirective.prototype, \"fragment\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkDirective.prototype, \"queryParamsHandling\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkDirective.prototype, \"preserveFragment\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkDirective.prototype, \"skipLocationChange\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkDirective.prototype, \"replaceUrl\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkDirective.prototype, \"stopLink\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkDirective.prototype, \"owlRouterLink\", null);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkDirective.prototype, \"preserveQueryParams\", null);\r\n__decorate([\r\n    HostListener('click')\r\n], OwlRouterLinkDirective.prototype, \"onClick\", null);\r\nOwlRouterLinkDirective = __decorate([\r\n    Directive({ selector: ':not(a)[owlRouterLink]' }),\r\n    __param(2, Attribute('tabindex'))\r\n], OwlRouterLinkDirective);\r\n/**\r\n * @description\r\n *\r\n * Lets you link to specific routes in your app.\r\n *\r\n * See `RouterLink` for more information.\r\n *\r\n * @ngModule RouterModule\r\n *\r\n * @publicApi\r\n */\r\nlet OwlRouterLinkWithHrefDirective = class OwlRouterLinkWithHrefDirective {\r\n    constructor(router, route, locationStrategy) {\r\n        this.router = router;\r\n        this.route = route;\r\n        this.locationStrategy = locationStrategy;\r\n        this.stopLink = false;\r\n        this.commands = [];\r\n        this.subscription = router.events.subscribe((s) => {\r\n            if (s instanceof NavigationEnd) {\r\n                this.updateTargetUrlAndHref();\r\n            }\r\n        });\r\n    }\r\n    set owlRouterLink(commands) {\r\n        if (commands != null) {\r\n            this.commands = Array.isArray(commands) ? commands : [commands];\r\n        }\r\n        else {\r\n            this.commands = [];\r\n        }\r\n    }\r\n    set preserveQueryParams(value) {\r\n        if (isDevMode() && console && console.warn) {\r\n            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');\r\n        }\r\n        this.preserve = value;\r\n    }\r\n    ngOnChanges(changes) { this.updateTargetUrlAndHref(); }\r\n    ngOnDestroy() { this.subscription.unsubscribe(); }\r\n    onClick(button, ctrlKey, metaKey, shiftKey) {\r\n        if (button !== 0 || ctrlKey || metaKey || shiftKey) {\r\n            return true;\r\n        }\r\n        if (typeof this.target === 'string' && this.target !== '_self') {\r\n            return true;\r\n        }\r\n        if (this.stopLink) {\r\n            return false;\r\n        }\r\n        const extras = {\r\n            skipLocationChange: attrBoolValue(this.skipLocationChange),\r\n            replaceUrl: attrBoolValue(this.replaceUrl),\r\n        };\r\n        this.router.navigateByUrl(this.urlTree, extras);\r\n        return false;\r\n    }\r\n    updateTargetUrlAndHref() {\r\n        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));\r\n    }\r\n    get urlTree() {\r\n        return this.router.createUrlTree(this.commands, {\r\n            relativeTo: this.route,\r\n            queryParams: this.queryParams,\r\n            fragment: this.fragment,\r\n            preserveQueryParams: attrBoolValue(this.preserve),\r\n            queryParamsHandling: this.queryParamsHandling,\r\n            preserveFragment: attrBoolValue(this.preserveFragment),\r\n        });\r\n    }\r\n};\r\nOwlRouterLinkWithHrefDirective.ctorParameters = () => [\r\n    { type: Router },\r\n    { type: ActivatedRoute },\r\n    { type: LocationStrategy }\r\n];\r\n__decorate([\r\n    HostBinding('attr.target'), Input()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"target\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"queryParams\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"fragment\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"queryParamsHandling\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"preserveFragment\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"skipLocationChange\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"replaceUrl\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"stopLink\", void 0);\r\n__decorate([\r\n    HostBinding()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"href\", void 0);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"owlRouterLink\", null);\r\n__decorate([\r\n    Input()\r\n], OwlRouterLinkWithHrefDirective.prototype, \"preserveQueryParams\", null);\r\n__decorate([\r\n    HostListener('click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'])\r\n], OwlRouterLinkWithHrefDirective.prototype, \"onClick\", null);\r\nOwlRouterLinkWithHrefDirective = __decorate([\r\n    Directive({ selector: 'a[owlRouterLink]' })\r\n], OwlRouterLinkWithHrefDirective);\r\nfunction attrBoolValue(s) {\r\n    return s === '' || !!s;\r\n}\r\n\r\nconst routes = [];\r\nlet CarouselModule = class CarouselModule {\r\n};\r\nCarouselModule = __decorate([\r\n    NgModule({\r\n        imports: [\r\n            CommonModule,\r\n        ],\r\n        declarations: [CarouselComponent, CarouselSlideDirective, StageComponent, OwlRouterLinkDirective, OwlRouterLinkWithHrefDirective],\r\n        exports: [CarouselComponent, CarouselSlideDirective, OwlRouterLinkDirective, OwlRouterLinkWithHrefDirective],\r\n        providers: [WINDOW_PROVIDERS, ResizeService, DOCUMENT_PROVIDERS, OwlLogger]\r\n    })\r\n], CarouselModule);\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CarouselComponent, CarouselModule, CarouselSlideDirective, OwlRouterLinkDirective, OwlRouterLinkWithHrefDirective, SlidesOutputData, NavigationService as Éµa, CarouselService as Éµb, OwlLogger as Éµc, AutoplayService as Éµd, WINDOW as Éµe, WindowRef as Éµf, BrowserWindowRef as Éµg, windowFactory as Éµh, browserWindowProvider as Éµi, windowProvider as Éµj, WINDOW_PROVIDERS as Éµk, DOCUMENT as Éµl, DocumentRef as Éµm, BrowserDocumentRef as Éµn, documentFactory as Éµo, browserDocumentProvider as Éµp, documentProvider as Éµq, DOCUMENT_PROVIDERS as Éµr, LazyLoadService as Éµs, AnimateService as Éµt, AutoHeightService as Éµu, HashService as Éµv, ResizeService as Éµw, StageComponent as Éµx };\r\n//# sourceMappingURL=ngx-owl-carousel-o.js.map\r\n","\n    <div class=\"owl-carousel owl-theme\" #owlCarousel\n      [ngClass]=\"{'owl-rtl': owlDOMData?.rtl,\n                  'owl-loaded': owlDOMData?.isLoaded,\n                  'owl-responsive': owlDOMData?.isResponsive,\n                  'owl-drag': owlDOMData?.isMouseDragable,\n                  'owl-grab': owlDOMData?.isGrab}\"\n      (mouseover)=\"startPausing()\"\n      (mouseleave)=\"startPlayML()\"\n      (touchstart)=\"startPausing()\"\n      (touchend)=\"startPlayTE()\">\n\n      <div *ngIf=\"carouselLoaded\" class=\"owl-stage-outer\">\n        <owl-stage [owlDraggable]=\"{'isMouseDragable': owlDOMData?.isMouseDragable, 'isTouchDragable': owlDOMData?.isTouchDragable}\"\n                    [stageData]=\"stageData\"\n                    [slidesData]=\"slidesData\"></owl-stage>\n      </div> <!-- /.owl-stage-outer -->\n      <ng-container *ngIf=\"slides.toArray().length\">\n        <div class=\"owl-nav\" [ngClass]=\"{'disabled': navData?.disabled}\">\n          <div class=\"owl-prev\" [ngClass]=\"{'disabled': navData?.prev?.disabled}\" (click)=\"prev()\" [innerHTML]=\"navData?.prev?.htmlText\"></div>\n          <div class=\"owl-next\" [ngClass]=\"{'disabled': navData?.next?.disabled}\" (click)=\"next()\" [innerHTML]=\"navData?.next?.htmlText\"></div>\n        </div> <!-- /.owl-nav -->\n        <div class=\"owl-dots\" [ngClass]=\"{'disabled': dotsData?.disabled}\">\n          <div *ngFor=\"let dot of dotsData?.dots\" class=\"owl-dot\" [ngClass]=\"{'active': dot.active, 'owl-dot-text': dot.showInnerContent}\" (click)=\"moveByDot(dot.id)\">\n            <span [innerHTML]=\"dot.innerContent\"></span>\n          </div>\n        </div> <!-- /.owl-dots -->\n      </ng-container>\n    </div> <!-- /.owl-carousel owl-loaded -->\n  ","\n    <div>\n      <div class=\"owl-stage\" [ngStyle]=\"{'width': stageData.width + 'px',\n                                        'transform': stageData.transform,\n                                        'transition': stageData.transition,\n                                        'padding-left': stageData.paddingL ? stageData.paddingL + 'px' : '',\n                                        'padding-right': stageData.paddingR ? stageData.paddingR + 'px' : '' }\"\n          (transitionend)=\"onTransitionEnd()\">\n        <ng-container *ngFor=\"let slide of slidesData; let i = index\">\n          <div class=\"owl-item\" [ngClass]=\"slide.classes\"\n                                [ngStyle]=\"{'width': slide.width + 'px',\n                                            'margin-left': slide.marginL ? slide.marginL + 'px' : '',\n                                            'margin-right': slide.marginR ? slide.marginR + 'px' : '',\n                                            'left': slide.left}\"\n                                (animationend)=\"clear(slide.id)\"\n                                [@autoHeight]=\"slide.heightState\">\n            <ng-template *ngIf=\"slide.load\" [ngTemplateOutlet]=\"slide.tplRef\"></ng-template>\n          </div><!-- /.owl-item -->\n        </ng-container>\n      </div><!-- /.owl-stage -->\n    </div>\n  ","<div class=\"container-modal\">\r\n  <p class=\"title clr-gray\"><b>NUEVO MENÃ</b></p>\r\n  <mat-icon\r\n    aria-hidden=\"false\"\r\n    aria-label=\"Cerrar modal\"\r\n    class=\"clr-yellow close\"\r\n    (click)=\"closeModal()\"\r\n    >close</mat-icon\r\n  >\r\n  <form (ngSubmit)=\"createMenu()\" [formGroup]=\"createMenuForm\">\r\n    <mat-form-field>\r\n      <mat-label>Nombre de menÃº</mat-label>\r\n      <input matInput formControlName=\"name\" />\r\n      <mat-error *ngIf=\"createMenuForm.get('name').hasError('required')\">\r\n        Esta informaciÃ³n es necesaria\r\n      </mat-error>\r\n      <mat-error\r\n        *ngIf=\"\r\n          createMenuForm.get('name').touched &&\r\n          createMenuForm.get('name').hasError('minlength')\r\n        \"\r\n      >\r\n        El mÃ­nimo de caracteres es de 3 caracteres\r\n      </mat-error>\r\n      <mat-error\r\n        *ngIf=\"\r\n          createMenuForm.get('name').touched &&\r\n          createMenuForm.get('name').hasError('maxlength')\r\n        \"\r\n      >\r\n        El mÃ¡ximo de caracteres es de 30 caracteres\r\n      </mat-error>\r\n    </mat-form-field>\r\n    <p class=\"clr-gray\"><b>Horario</b></p>\r\n    <div class=\"inl time\">\r\n      <mat-form-field>\r\n        <mat-label>De</mat-label>\r\n        <input\r\n          matInput\r\n          formControlName=\"from\"\r\n          mask=\"00:00\"\r\n          [dropSpecialCharacters]=\"false\"\r\n        />\r\n        <mat-error *ngIf=\"createMenuForm.get('from').hasError('required')\">\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"createMenuForm.get('from').hasError('pattern')\">\r\n          Formato incorrecto\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <mat-label>Hasta</mat-label>\r\n        <input\r\n          matInput\r\n          formControlName=\"to\"\r\n          mask=\"00:00\"\r\n          [dropSpecialCharacters]=\"false\"\r\n        />\r\n        <mat-error *ngIf=\"createMenuForm.get('to').hasError('required')\">\r\n          Esta informaciÃ³n es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"createMenuForm.get('to').hasError('pattern')\">\r\n          Formato incorrecto\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <p class=\"clr-gray\"><b>Selecciona un icono para tu menÃº</b></p>\r\n    <owl-carousel-o [options]=\"customOptions\" class=\"icons-menu\">\r\n      <ng-template carouselSlide *ngFor=\"let icon of icons; let i = index\">\r\n        <div\r\n          (click)=\"selectIconMenu(icon.id)\"\r\n          class=\"icon-menu\"\r\n          [class.selected]=\"createMenuForm.get('icon').value === icon.id\"\r\n        >\r\n          <img src=\"{{ icon.black_url }}\" alt=\"Icono\" />\r\n          <img src=\"{{ icon.white_url }}\" alt=\"Icono seleccionado\" />\r\n        </div>\r\n      </ng-template>\r\n    </owl-carousel-o>\r\n    <small *ngIf=\"isIconSelectionInvalid\" class=\"error-text\"\r\n      >Debes elegir un icono</small\r\n    >\r\n    <div class=\"inl buttons\">\r\n      <div class=\"btns-transparent\" (click)=\"closeModal()\">\r\n        <span>Cancelar</span>\r\n      </div>\r\n      <button type=\"submit\" class=\"btns\">\r\n        <span>Continuar</span>\r\n      </button>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { FranchiseAndRestaurantValidityGuard, ClaimsGuard } from '@guards';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    pathMatch: 'full',\r\n    redirectTo: 'dashboard',\r\n  },\r\n  {\r\n    path: '',\r\n    component: LayoutComponent,\r\n    canActivate: [ClaimsGuard, FranchiseAndRestaurantValidityGuard],\r\n    children: [\r\n      {\r\n        path: 'dashboard',\r\n        loadChildren: () =>\r\n          import('@pages/layout/dashboard/dashboard.module').then(\r\n            (m) => m.DashboardModule\r\n          ),\r\n      },\r\n      {\r\n        path: 'menu',\r\n        loadChildren: () =>\r\n          import('@pages/layout/menu/menu.module').then((m) => m.MenuModule),\r\n      },\r\n      {\r\n        path: 'branches',\r\n        loadChildren: () =>\r\n          import('@pages/layout/branches/branches.module').then(\r\n            (m) => m.BranchesModule\r\n          ),\r\n      },\r\n      {\r\n        path: 'preferences',\r\n        loadChildren: () =>\r\n          import('@pages/layout/preferences/preferences.module').then(\r\n            (m) => m.PreferencesModule\r\n          ),\r\n      },\r\n      {\r\n        path: 'reports',\r\n        loadChildren: () =>\r\n          import('@pages/layout/reports/reports.module').then(\r\n            (m) => m.ReportsModule\r\n          ),\r\n      },\r\n      {\r\n        path: 'users',\r\n        loadChildren: () =>\r\n          import('@pages/layout/users/users.module').then((m) => m.UsersModule),\r\n      },\r\n      {\r\n        path: 'income-and-payments',\r\n        loadChildren: () =>\r\n          import(\r\n            '@pages/layout/income-and-payments/income-and-payments.module'\r\n          ).then((m) => m.IncomeAndPaymentsModule),\r\n      },\r\n      {\r\n        path: 'profile',\r\n        loadChildren: () =>\r\n          import('@pages/layout/profile/profile.module').then(\r\n            (m) => m.ProfileModule\r\n          ),\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LayoutRoutingModule {}\r\n","import { Component, Inject, OnInit, OnDestroy } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Validators, FormBuilder } from '@angular/forms';\r\nimport { MenuService, RestaurantService } from '@services';\r\nimport { Restaurant, ResponseModifiers, Modifiers } from '@models';\r\nimport { Subscription } from 'rxjs';\r\n@Component({\r\n  selector: 'app-add-modifier',\r\n  templateUrl: './add-modifier.component.html',\r\n  styleUrls: [\r\n    '../new-menu/new-menu.component.scss',\r\n    './add-modifier.component.scss'\r\n  ]\r\n})\r\nexport class AddModifierComponent implements OnInit, OnDestroy {\r\n  public modifiersGroups: Array<Modifiers> = [];\r\n  public modifierForm = this.fb.group({\r\n    modifierGroup: [null, Validators.required]\r\n  });\r\n  private restaurantSubscription = Subscription.EMPTY;\r\n  private modifierSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AddModifierComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private menuService: MenuService,\r\n    private restaurantService: RestaurantService,\r\n    private fb: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initRestaurantListener();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.restaurantSubscription.unsubscribe();\r\n    this.modifierSubscription.unsubscribe();\r\n  }\r\n\r\n  initRestaurantListener(): void {\r\n    this.restaurantSubscription = this.restaurantService.currentRestaurant.subscribe(\r\n      (restaurant: Restaurant) => {\r\n        this.modifierSubscription = this.menuService\r\n          .getModifier(restaurant.id)\r\n          .subscribe((response: ResponseModifiers) => {\r\n            this.modifiersGroups = response.modifiers.filter(\r\n              (group: Modifiers) => {\r\n                for (const modifier of this.data.modifiers) {\r\n                  if (modifier.id === group.id) {\r\n                    return false;\r\n                  }\r\n                }\r\n                return true;\r\n              }\r\n            );\r\n          });\r\n      }\r\n    );\r\n  }\r\n\r\n  public closeModal(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  public addModifier(): void {\r\n    if (this.modifierForm.valid) {\r\n      this.dialogRef.close(this.modifierForm.get('modifierGroup').value);\r\n    }\r\n  }\r\n}\r\n","import { SelectionModel, isDataSource } from '@angular/cdk/collections';\nimport { Observable, Subject, BehaviorSubject, of } from 'rxjs';\nimport { take, filter, takeUntil } from 'rxjs/operators';\nimport { InjectionToken, Directive, ViewContainerRef, Inject, Optional, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, IterableDiffers, ChangeDetectorRef, Input, ViewChild, ContentChildren, ElementRef, Renderer2, HostListener, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/base-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\nclass BaseTreeControl {\n    constructor() {\n        /**\n         * A selection model with multi-selection to track expansion status.\n         */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /**\n     * Toggles one single data node's expanded/collapsed state.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggle(dataNode) {\n        this.expansionModel.toggle(dataNode);\n    }\n    /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expand(dataNode) {\n        this.expansionModel.select(dataNode);\n    }\n    /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapse(dataNode) {\n        this.expansionModel.deselect(dataNode);\n    }\n    /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    isExpanded(dataNode) {\n        return this.expansionModel.isSelected(dataNode);\n    }\n    /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    toggleDescendants(dataNode) {\n        this.expansionModel.isSelected(dataNode)\n            ? this.collapseDescendants(dataNode)\n            : this.expandDescendants(dataNode);\n    }\n    /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n    collapseAll() {\n        this.expansionModel.clear();\n    }\n    /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    expandDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.select(...toBeProcessed);\n    }\n    /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    collapseDescendants(dataNode) {\n        /** @type {?} */\n        let toBeProcessed = [dataNode];\n        toBeProcessed.push(...this.getDescendants(dataNode));\n        this.expansionModel.deselect(...toBeProcessed);\n    }\n}\nif (false) {\n    /**\n     * Saved data node for `expandAll` action.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.dataNodes;\n    /**\n     * A selection model with multi-selection to track expansion status.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.expansionModel;\n    /**\n     * Get depth of a given data node, return the level number. This is for flat tree node.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.getLevel;\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.isExpandable;\n    /**\n     * Gets a stream that emits whenever the given data node's children change.\n     * @type {?}\n     */\n    BaseTreeControl.prototype.getChildren;\n    /**\n     * Gets a list of descendent data nodes of a subtree rooted at given data node recursively.\n     * @abstract\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.getDescendants = function (dataNode) { };\n    /**\n     * Expands all data nodes in the tree.\n     * @abstract\n     * @return {?}\n     */\n    BaseTreeControl.prototype.expandAll = function () { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/flat-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\nclass FlatTreeControl extends BaseTreeControl {\n    /**\n     * Construct with flat tree data node functions getLevel and isExpandable.\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     */\n    constructor(getLevel, isExpandable) {\n        super();\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const startIndex = this.dataNodes.indexOf(dataNode);\n        /** @type {?} */\n        const results = [];\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n        // The level of descendants of a tree node must be greater than the level of the given\n        // tree node.\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\n        // sibling of an ancestor.\n        for (let i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n            results.push(this.dataNodes[i]);\n        }\n        return results;\n    }\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.select(...this.dataNodes);\n    }\n}\nif (false) {\n    /** @type {?} */\n    FlatTreeControl.prototype.getLevel;\n    /** @type {?} */\n    FlatTreeControl.prototype.isExpandable;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/nested-tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\nclass NestedTreeControl extends BaseTreeControl {\n    /**\n     * Construct with nested tree function getChildren.\n     * @param {?} getChildren\n     */\n    constructor(getChildren) {\n        super();\n        this.getChildren = getChildren;\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     * @return {?}\n     */\n    expandAll() {\n        this.expansionModel.clear();\n        /** @type {?} */\n        const allNodes = this.dataNodes.reduce((/**\n         * @param {?} accumulator\n         * @param {?} dataNode\n         * @return {?}\n         */\n        (accumulator, dataNode) => [...accumulator, ...this.getDescendants(dataNode), dataNode]), []);\n        this.expansionModel.select(...allNodes);\n    }\n    /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    getDescendants(dataNode) {\n        /** @type {?} */\n        const descendants = [];\n        this._getDescendants(descendants, dataNode);\n        // Remove the node itself\n        return descendants.splice(1);\n    }\n    /**\n     * A helper function to get descendants recursively.\n     * @protected\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    _getDescendants(descendants, dataNode) {\n        descendants.push(dataNode);\n        /** @type {?} */\n        const childrenNodes = this.getChildren(dataNode);\n        if (Array.isArray(childrenNodes)) {\n            childrenNodes.forEach((/**\n             * @param {?} child\n             * @return {?}\n             */\n            (child) => this._getDescendants(descendants, child)));\n        }\n        else if (childrenNodes instanceof Observable) {\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\n            childrenNodes.pipe(take(1), filter((/** @type {?} */ (Boolean))))\n                .subscribe((/**\n             * @param {?} children\n             * @return {?}\n             */\n            children => {\n                for (const child of children) {\n                    this._getDescendants(descendants, child);\n                }\n            }));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    NestedTreeControl.prototype.getChildren;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/control/tree-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree control interface. User can implement TreeControl to expand/collapse dataNodes in the tree.\n * The CDKTree will use this TreeControl to expand/collapse a node.\n * User can also use it outside the `<cdk-tree>` to control the expansion status of the tree.\n * @record\n * @template T\n */\nfunction TreeControl() { }\nif (false) {\n    /**\n     * The saved tree nodes data for `expandAll` action.\n     * @type {?}\n     */\n    TreeControl.prototype.dataNodes;\n    /**\n     * The expansion model\n     * @type {?}\n     */\n    TreeControl.prototype.expansionModel;\n    /**\n     * Get depth of a given data node, return the level number. This is for flat tree node.\n     * @type {?}\n     */\n    TreeControl.prototype.getLevel;\n    /**\n     * Whether the data node is expandable. Returns true if expandable.\n     * This is for flat tree node.\n     * @type {?}\n     */\n    TreeControl.prototype.isExpandable;\n    /**\n     * Gets a stream that emits whenever the given data node's children change.\n     * @type {?}\n     */\n    TreeControl.prototype.getChildren;\n    /**\n     * Whether the data node is expanded or collapsed. Return true if it's expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.isExpanded = function (dataNode) { };\n    /**\n     * Get all descendants of a data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.getDescendants = function (dataNode) { };\n    /**\n     * Expand or collapse data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.toggle = function (dataNode) { };\n    /**\n     * Expand one data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.expand = function (dataNode) { };\n    /**\n     * Collapse one data node\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.collapse = function (dataNode) { };\n    /**\n     * Expand all the dataNodes in the tree\n     * @return {?}\n     */\n    TreeControl.prototype.expandAll = function () { };\n    /**\n     * Collapse all the dataNodes in the tree\n     * @return {?}\n     */\n    TreeControl.prototype.collapseAll = function () { };\n    /**\n     * Toggle a data node by expand/collapse it and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.toggleDescendants = function (dataNode) { };\n    /**\n     * Expand a data node and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.expandDescendants = function (dataNode) { };\n    /**\n     * Collapse a data node and all its descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    TreeControl.prototype.collapseDescendants = function (dataNode) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/outlet.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a `CdkTreeNode` to its outlet.\n * Used primarily to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass CdkTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nCdkTreeNodeOutlet.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkTreeNodeOutlet]'\n            },] }\n];\n/** @nocollapse */\nCdkTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\nif (false) {\n    /** @type {?} */\n    CdkTreeNodeOutlet.prototype.viewContainer;\n    /** @type {?} */\n    CdkTreeNodeOutlet.prototype._node;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Context provided to the tree node component.\n * @template T\n */\nclass CdkTreeNodeOutletContext {\n    /**\n     * @param {?} data\n     */\n    constructor(data) {\n        this.$implicit = data;\n    }\n}\nif (false) {\n    /**\n     * Data for the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.$implicit;\n    /**\n     * Depth of the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.level;\n    /**\n     * Index location of the node.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.index;\n    /**\n     * Length of the number of total dataNodes.\n     * @type {?}\n     */\n    CdkTreeNodeOutletContext.prototype.count;\n}\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\nclass CdkTreeNodeDef {\n    /**\n     * \\@docs-private\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nCdkTreeNodeDef.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkTreeNodeDef]',\n                inputs: [\n                    'when: cdkTreeNodeDefWhen'\n                ],\n            },] }\n];\n/** @nocollapse */\nCdkTreeNodeDef.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /**\n     * Function that should return true if this node template should be used for the provided node\n     * data and index. If left undefined, this node will be considered the default node template to\n     * use when no other when functions return true for the data.\n     * For every node, there must be at least one when function that passes or an undefined to\n     * default.\n     * @type {?}\n     */\n    CdkTreeNodeDef.prototype.when;\n    /** @type {?} */\n    CdkTreeNodeDef.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(`A valid data source must be provided.`);\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(`Could not find a matching node definition for the provided node data.`);\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlMissingError() {\n    return Error(`Could not find a tree control for the tree.`);\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(`Could not find functions for nested/flat tree in tree control.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\nclass CdkTree {\n    /**\n     * @param {?} _differs\n     * @param {?} _changeDetectorRef\n     */\n    constructor(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Level of nodes\n         */\n        this._levels = new Map();\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\n        //     Remove the MAX_VALUE in viewChange\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the tree's\n     * stream of view window (what dataNodes are currently on screen).\n     * Data source can be an observable of data array, or a data array to render.\n     * @return {?}\n     */\n    get dataSource() { return this._dataSource; }\n    /**\n     * @param {?} dataSource\n     * @return {?}\n     */\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\n        if (!this.treeControl) {\n            throw getTreeControlMissingError();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._nodeOutlet.viewContainer.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (this._dataSource && typeof ((/** @type {?} */ (this._dataSource))).disconnect === 'function') {\n            ((/** @type {?} */ (this.dataSource))).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        /** @type {?} */\n        const defaultNodeDefs = this._nodeDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => !def.when));\n        if (defaultNodeDefs.length > 1) {\n            throw getTreeMultipleDefaultNodeDefsError();\n        }\n        this._defaultNodeDef = defaultNodeDefs[0];\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n            this._observeRenderChanges();\n        }\n    }\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\n    //     and nested trees.\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    _switchDataSource(dataSource) {\n        if (this._dataSource && typeof ((/** @type {?} */ (this._dataSource))).disconnect === 'function') {\n            ((/** @type {?} */ (this.dataSource))).disconnect(this);\n        }\n        if (this._dataSubscription) {\n            this._dataSubscription.unsubscribe();\n            this._dataSubscription = null;\n        }\n        // Remove the all dataNodes if there is now no data source\n        if (!dataSource) {\n            this._nodeOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n        if (this._nodeDefs) {\n            this._observeRenderChanges();\n        }\n    }\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    _observeRenderChanges() {\n        /** @type {?} */\n        let dataStream;\n        if (isDataSource(this._dataSource)) {\n            dataStream = this._dataSource.connect(this);\n        }\n        else if (this._dataSource instanceof Observable) {\n            dataStream = this._dataSource;\n        }\n        else if (Array.isArray(this._dataSource)) {\n            dataStream = of(this._dataSource);\n        }\n        if (dataStream) {\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                .subscribe((/**\n             * @param {?} data\n             * @return {?}\n             */\n            data => this.renderNodeChanges(data)));\n        }\n        else {\n            throw getTreeNoValidDataSourceError();\n        }\n    }\n    /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    renderNodeChanges(data, dataDiffer = this._dataDiffer, viewContainer = this._nodeOutlet.viewContainer, parentData) {\n        /** @type {?} */\n        const changes = dataDiffer.diff(data);\n        if (!changes) {\n            return;\n        }\n        changes.forEachOperation((/**\n         * @param {?} item\n         * @param {?} adjustedPreviousIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        (item, adjustedPreviousIndex, currentIndex) => {\n            if (item.previousIndex == null) {\n                this.insertNode(data[(/** @type {?} */ (currentIndex))], (/** @type {?} */ (currentIndex)), viewContainer, parentData);\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (adjustedPreviousIndex)));\n                this._levels.delete(item.item);\n            }\n            else {\n                /** @type {?} */\n                const view = viewContainer.get((/** @type {?} */ (adjustedPreviousIndex)));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n    _getNodeDef(data, i) {\n        if (this._nodeDefs.length === 1) {\n            return this._nodeDefs.first;\n        }\n        /** @type {?} */\n        const nodeDef = this._nodeDefs.find((/**\n         * @param {?} def\n         * @return {?}\n         */\n        def => def.when && def.when(i, data))) || this._defaultNodeDef;\n        if (!nodeDef) {\n            throw getTreeMissingMatchingNodeDefError();\n        }\n        return nodeDef;\n    }\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    insertNode(nodeData, index, viewContainer, parentData) {\n        /** @type {?} */\n        const node = this._getNodeDef(nodeData, index);\n        // Node context that will be provided to created embedded view\n        /** @type {?} */\n        const context = new CdkTreeNodeOutletContext(nodeData);\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\n        // Otherwise, use the level of parent node.\n        if (this.treeControl.getLevel) {\n            context.level = this.treeControl.getLevel(nodeData);\n        }\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n            context.level = (/** @type {?} */ (this._levels.get(parentData))) + 1;\n        }\n        else {\n            context.level = 0;\n        }\n        this._levels.set(nodeData, context.level);\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\n        /** @type {?} */\n        const container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n        container.createEmbeddedView(node.template, context, index);\n        // Set the data to just created `CdkTreeNode`.\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n        if (CdkTreeNode.mostRecentTreeNode) {\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\n        }\n    }\n}\nCdkTree.decorators = [\n    { type: Component, args: [{\n                selector: 'cdk-tree',\n                exportAs: 'cdkTree',\n                template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n                host: {\n                    'class': 'cdk-tree',\n                    'role': 'tree',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\n                // The view for `CdkTree` consists entirely of templates declared in other views. As they are\n                // declared elsewhere, they are checked when their declaration points are checked.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default\n            }] }\n];\n/** @nocollapse */\nCdkTree.ctorParameters = () => [\n    { type: IterableDiffers },\n    { type: ChangeDetectorRef }\n];\nCdkTree.propDecorators = {\n    dataSource: [{ type: Input }],\n    treeControl: [{ type: Input }],\n    trackBy: [{ type: Input }],\n    _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\n    _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\nif (false) {\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._onDestroy;\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataDiffer;\n    /**\n     * Stores the node definition that does not have a when predicate.\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._defaultNodeDef;\n    /**\n     * Data subscription\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataSubscription;\n    /**\n     * Level of nodes\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._levels;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._dataSource;\n    /**\n     * The tree controller\n     * @type {?}\n     */\n    CdkTree.prototype.treeControl;\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize node operations by identifying a node based on its data\n     * relative to the function to know if a node should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     * @type {?}\n     */\n    CdkTree.prototype.trackBy;\n    /** @type {?} */\n    CdkTree.prototype._nodeOutlet;\n    /**\n     * The tree node template for the tree\n     * @type {?}\n     */\n    CdkTree.prototype._nodeDefs;\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     * @type {?}\n     */\n    CdkTree.prototype.viewChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._differs;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTree.prototype._changeDetectorRef;\n}\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\nclass CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     */\n    constructor(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Emits when the node's data has changed.\n         */\n        this._dataChanges = new Subject();\n        /**\n         * The role of the node should be 'group' if it's an internal node,\n         * and 'treeitem' if it's a leaf node.\n         */\n        this.role = 'treeitem';\n        CdkTreeNode.mostRecentTreeNode = (/** @type {?} */ (this));\n    }\n    /**\n     * The tree node's data.\n     * @return {?}\n     */\n    get data() { return this._data; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        if (value !== this._data) {\n            this._data = value;\n            this._setRoleFromData();\n            this._dataChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get isExpanded() {\n        return this._tree.treeControl.isExpanded(this._data);\n    }\n    /**\n     * @return {?}\n     */\n    get level() {\n        return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // If this is the last tree node being destroyed,\n        // clear out the reference to avoid leaking memory.\n        if (CdkTreeNode.mostRecentTreeNode === this) {\n            CdkTreeNode.mostRecentTreeNode = null;\n        }\n        this._dataChanges.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _setRoleFromData() {\n        if (this._tree.treeControl.isExpandable) {\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n        }\n        else {\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            /** @type {?} */\n            const childrenNodes = this._tree.treeControl.getChildren(this._data);\n            if (Array.isArray(childrenNodes)) {\n                this._setRoleFromChildren((/** @type {?} */ (childrenNodes)));\n            }\n            else if (childrenNodes instanceof Observable) {\n                childrenNodes.pipe(takeUntil(this._destroyed))\n                    .subscribe((/**\n                 * @param {?} children\n                 * @return {?}\n                 */\n                children => this._setRoleFromChildren(children)));\n            }\n        }\n    }\n    /**\n     * @protected\n     * @param {?} children\n     * @return {?}\n     */\n    _setRoleFromChildren(children) {\n        this.role = children && children.length ? 'group' : 'treeitem';\n    }\n}\n/**\n * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n * in `CdkTree` and set the data to it.\n */\nCdkTreeNode.mostRecentTreeNode = null;\nCdkTreeNode.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-tree-node',\n                exportAs: 'cdkTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node',\n                },\n            },] }\n];\n/** @nocollapse */\nCdkTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree }\n];\nCdkTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\nif (false) {\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     * @type {?}\n     */\n    CdkTreeNode.mostRecentTreeNode;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._destroyed;\n    /**\n     * Emits when the node's data has changed.\n     * @type {?}\n     */\n    CdkTreeNode.prototype._dataChanges;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._data;\n    /**\n     * The role of the node should be 'group' if it's an internal node,\n     * and 'treeitem' if it's a leaf node.\n     * @type {?}\n     */\n    CdkTreeNode.prototype.role;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNode.prototype._tree;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/nested-node.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * The children of node will be automatically added to `cdkTreeNodeOutlet`.\n * @template T\n */\nclass CdkNestedTreeNode extends CdkTreeNode {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     */\n    constructor(_elementRef, _tree, _differs) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n        if (!this._tree.treeControl.getChildren) {\n            throw getTreeControlFunctionsMissingError();\n        }\n        /** @type {?} */\n        const childrenNodes = this._tree.treeControl.getChildren(this.data);\n        if (Array.isArray(childrenNodes)) {\n            this.updateChildrenNodes((/** @type {?} */ (childrenNodes)));\n        }\n        else if (childrenNodes instanceof Observable) {\n            childrenNodes.pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} result\n             * @return {?}\n             */\n            result => this.updateChildrenNodes(result)));\n        }\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this.updateChildrenNodes()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._clear();\n        super.ngOnDestroy();\n    }\n    /**\n     * Add children dataNodes to the NodeOutlet\n     * @protected\n     * @param {?=} children\n     * @return {?}\n     */\n    updateChildrenNodes(children) {\n        /** @type {?} */\n        const outlet = this._getNodeOutlet();\n        if (children) {\n            this._children = children;\n        }\n        if (outlet && this._children) {\n            /** @type {?} */\n            const viewContainer = outlet.viewContainer;\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n        }\n        else {\n            // Reset the data differ if there's no children nodes displayed\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Clear the children dataNodes.\n     * @protected\n     * @return {?}\n     */\n    _clear() {\n        /** @type {?} */\n        const outlet = this._getNodeOutlet();\n        if (outlet) {\n            outlet.viewContainer.clear();\n            this._dataDiffer.diff([]);\n        }\n    }\n    /**\n     * Gets the outlet for the current node.\n     * @private\n     * @return {?}\n     */\n    _getNodeOutlet() {\n        /** @type {?} */\n        const outlets = this.nodeOutlet;\n        // Note that since we use `descendants: true` on the query, we have to ensure\n        // that we don't pick up the outlet of a child node by accident.\n        return outlets && outlets.find((/**\n         * @param {?} outlet\n         * @return {?}\n         */\n        outlet => !outlet._node || outlet._node === this));\n    }\n}\nCdkNestedTreeNode.decorators = [\n    { type: Directive, args: [{\n                selector: 'cdk-nested-tree-node',\n                exportAs: 'cdkNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'cdk-tree-node cdk-nested-tree-node',\n                },\n                providers: [\n                    { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\n                ]\n            },] }\n];\n/** @nocollapse */\nCdkNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers }\n];\nCdkNestedTreeNode.propDecorators = {\n    nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\nif (false) {\n    /**\n     * Differ used to find the changes in the data provided by the data source.\n     * @type {?}\n     * @private\n     */\n    CdkNestedTreeNode.prototype._dataDiffer;\n    /**\n     * The children data dataNodes of current node. They will be placed in `CdkTreeNodeOutlet`.\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._children;\n    /**\n     * The children node placeholder.\n     * @type {?}\n     */\n    CdkNestedTreeNode.prototype.nodeOutlet;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkNestedTreeNode.prototype._differs;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/padding.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Regex used to split a string on its CSS units.\n * @type {?}\n */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\nclass CdkTreeNodePadding {\n    /**\n     * @param {?} _treeNode\n     * @param {?} _tree\n     * @param {?} _renderer\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_treeNode, _tree, _renderer, _element, _dir) {\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * CSS units used for the indentation value.\n         */\n        this.indentUnits = 'px';\n        this._indent = 40;\n        this._setPadding();\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => this._setPadding(true)));\n        }\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\n        // which means that we'll miss the first render. We have to subscribe to changes in the\n        // data to ensure that everything is up to date.\n        _treeNode._dataChanges.subscribe((/**\n         * @return {?}\n         */\n        () => this._setPadding()));\n    }\n    /**\n     * The level of depth of the tree node. The padding will be `level * indent` pixels.\n     * @return {?}\n     */\n    get level() { return this._level; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set level(value) {\n        // Set to null as the fallback value so that _setPadding can fall back to the node level if the\n        // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\n        // they set 0 explicitly.\n        this._level = (/** @type {?} */ (coerceNumberProperty(value, null)));\n        this._setPadding();\n    }\n    /**\n     * The indent for each level. Can be a number or a CSS string.\n     * Default number 40px from material design menu sub-menu spec.\n     * @return {?}\n     */\n    get indent() { return this._indent; }\n    /**\n     * @param {?} indent\n     * @return {?}\n     */\n    set indent(indent) {\n        /** @type {?} */\n        let value = indent;\n        /** @type {?} */\n        let units = 'px';\n        if (typeof indent === 'string') {\n            /** @type {?} */\n            const parts = indent.split(cssUnitPattern);\n            value = parts[0];\n            units = parts[1] || units;\n        }\n        this.indentUnits = units;\n        this._indent = coerceNumberProperty(value);\n        this._setPadding();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n    _paddingIndent() {\n        /** @type {?} */\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n        /** @type {?} */\n        const level = this._level == null ? nodeLevel : this._level;\n        return typeof level === 'number' ? `${level * this._indent}${this.indentUnits}` : null;\n    }\n    /**\n     * @param {?=} forceChange\n     * @return {?}\n     */\n    _setPadding(forceChange = false) {\n        /** @type {?} */\n        const padding = this._paddingIndent();\n        if (padding !== this._currentPadding || forceChange) {\n            /** @type {?} */\n            const element = this._element.nativeElement;\n            /** @type {?} */\n            const paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            /** @type {?} */\n            const resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\n            this._renderer.setStyle(element, paddingProp, padding);\n            this._renderer.setStyle(element, resetProp, null);\n            this._currentPadding = padding;\n        }\n    }\n}\nCdkTreeNodePadding.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkTreeNodePadding]',\n            },] }\n];\n/** @nocollapse */\nCdkTreeNodePadding.ctorParameters = () => [\n    { type: CdkTreeNode },\n    { type: CdkTree },\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkTreeNodePadding.ngAcceptInputType_level;\n    /**\n     * Current padding value applied to the element. Used to avoid unnecessarily hitting the DOM.\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._currentPadding;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._destroyed;\n    /**\n     * CSS units used for the indentation value.\n     * @type {?}\n     */\n    CdkTreeNodePadding.prototype.indentUnits;\n    /** @type {?} */\n    CdkTreeNodePadding.prototype._level;\n    /** @type {?} */\n    CdkTreeNodePadding.prototype._indent;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._treeNode;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._tree;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTreeNodePadding.prototype._dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\nclass CdkTreeNodeToggle {\n    /**\n     * @param {?} _tree\n     * @param {?} _treeNode\n     */\n    constructor(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    /**\n     * Whether expand/collapse the node recursively.\n     * @return {?}\n     */\n    get recursive() { return this._recursive; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set recursive(value) { this._recursive = coerceBooleanProperty(value); }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _toggle(event) {\n        this.recursive\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n            : this._tree.treeControl.toggle(this._treeNode.data);\n        event.stopPropagation();\n    }\n}\nCdkTreeNodeToggle.decorators = [\n    { type: Directive, args: [{ selector: '[cdkTreeNodeToggle]' },] }\n];\n/** @nocollapse */\nCdkTreeNodeToggle.ctorParameters = () => [\n    { type: CdkTree },\n    { type: CdkTreeNode }\n];\nCdkTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\n    _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkTreeNodeToggle.ngAcceptInputType_recursive;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._recursive;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._tree;\n    /**\n     * @type {?}\n     * @protected\n     */\n    CdkTreeNodeToggle.prototype._treeNode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/tree-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nclass CdkTreeModule {\n}\nCdkTreeModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                exports: EXPORTED_DECLARATIONS,\n                declarations: EXPORTED_DECLARATIONS,\n                providers: [FocusMonitor, CdkTreeNodeDef]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/tree/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeModule, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodeOutlet, CdkTreeNodeOutletContext, CdkTreeNodePadding, CdkTreeNodeToggle, FlatTreeControl, NestedTreeControl, getTreeControlFunctionsMissingError, getTreeControlMissingError, getTreeMissingMatchingNodeDefError, getTreeMultipleDefaultNodeDefsError, getTreeNoValidDataSourceError };\n//# sourceMappingURL=tree.js.map\n"]}