{"version":3,"sources":["webpack:///src/app/pages/layout/dashboard/dashboard.module.ts","webpack:///node_modules/@angular/material/table/index.d.ts.MatTable.html","webpack:///node_modules/@angular/material/table/index.d.ts.MatHeaderRow.html","webpack:///node_modules/@angular/material/table/index.d.ts.MatRow.html","webpack:///src/app/pages/layout/dashboard/year-month-selector/year-month-selector.component.ts","webpack:///src/app/pages/layout/dashboard/year-month-selector/year-month-selector.component.html","webpack:///src/app/pages/layout/dashboard/dashboard.component.ts","webpack:///src/app/pages/layout/dashboard/dashboard.service.ts","webpack:///src/app/pages/layout/dashboard/dashboard.component.html","webpack:///src/app/pages/layout/dashboard/comments/comments.component.ts","webpack:///src/app/pages/layout/dashboard/comments/comments.component.html","webpack:///src/app/pages/layout/dashboard/dashboard-routing.module.ts"],"names":["DashboardModule","MONTH_YEAR_FORMAT","parse","dateInput","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","fb","selectorChange","maxDate","moment","form","this","group","monthYear","normalizedYear","yearAux","normalizedMonth","datepicker","ctrlValue","get","value","month","year","setValue","close","monthTimestamp","from","startOf","valueOf","to","endOf","emit","dashboardService","restaurantService","paymentService","displayedColumns","currentRestaurantSubscription","Subscription","EMPTY","getRestaurantInfo","getStripeStatus","currentRestaurant","subscribe","restaurant","unsubscribe","restauranteSelected","getRestaurantStatus","Math","trunc","id","response","restaurantStatus","index","last_comments","isFullyVisible","numberOfStars","ratingStars","$event","stripeStatus","DashboardService","http","restaurantId","url","environment","STATUS","replace","toString","limit","offset","RESTAURANT_COMMENTS","Intl","DateTimeFormat","resolvedOptions","timeZone","pageSize","totalPages","actualPage","getComments","getRestaurantComments","comments","pagination","ceil","count","resetValues","resetPagination","page","DashboardRoutingModule"],"mappings":"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","file":"x","sourcesContent":["import { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMomentDateModule } from '@angular/material-moment-adapter';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { PaginationModule } from '@components/pagination/pagination.module';\r\nimport { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\nimport { DashboardComponent } from './dashboard.component';\r\nimport { SectionHeaderModule } from '@components/section-header/section-header.module';\r\nimport { CommentsComponent } from './comments/comments.component';\r\nimport { YearMonthSelectorComponent } from './year-month-selector/year-month-selector.component';\r\n\r\n@NgModule({\r\n  declarations: [DashboardComponent, CommentsComponent, YearMonthSelectorComponent],\r\n  imports: [\r\n    CommonModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule,\r\n    MatTableModule,\r\n    MatDatepickerModule,\r\n    MatMomentDateModule,\r\n    MatIconModule,\r\n    DashboardRoutingModule,\r\n    SectionHeaderModule,\r\n    PaginationModule,\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class DashboardModule {}\r\n","\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n","<ng-container cdkCellOutlet></ng-container>","<ng-container cdkCellOutlet></ng-container>","import { MatDatepicker } from '@angular/material/datepicker';\r\nimport { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport {\r\n  MomentDateAdapter,\r\n  MAT_MOMENT_DATE_ADAPTER_OPTIONS,\r\n} from '@angular/material-moment-adapter';\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_FORMATS,\r\n  MAT_DATE_LOCALE,\r\n} from '@angular/material/core';\r\nimport * as moment from 'moment';\r\nimport { FormBuilder } from '@angular/forms';\r\n\r\n// Formats of the month/year calendar.\r\nexport const MONTH_YEAR_FORMAT = {\r\n  parse: {\r\n    dateInput: 'MM/YYYY',\r\n  },\r\n  display: {\r\n    dateInput: 'MMMM YYYY',\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n\r\n@Component({\r\n  selector: 'app-year-month-selector',\r\n  templateUrl: './year-month-selector.component.html',\r\n  styleUrls: ['./year-month-selector.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: DateAdapter,\r\n      useClass: MomentDateAdapter,\r\n      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS],\r\n    },\r\n    { provide: MAT_DATE_FORMATS, useValue: MONTH_YEAR_FORMAT },\r\n  ],\r\n})\r\nexport class YearMonthSelectorComponent implements OnInit {\r\n  @Output() selectorChange = new EventEmitter<{ from: number, to: number }>(null);\r\n\r\n  public maxDate = moment();\r\n\r\n  public yearAux: moment.Moment;\r\n\r\n  public form = this.fb.group({\r\n    monthYear: [moment()],\r\n  });\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /**\r\n   * Function that stores the selected year at a global variable.\r\n   * @param normalizedYear Moment type date so store.\r\n   */\r\n  public chosenYearHandler(normalizedYear: moment.Moment): void {\r\n    this.yearAux = normalizedYear;\r\n  }\r\n\r\n  /**\r\n   * Function that takes the selected month and saved to emit the selected date.\r\n   * @param normalizedMonth Month to create the date to emit.\r\n   * @param datepicker Reference to the calendar to call its functions.\r\n   */\r\n  public chosenMonthHandler(\r\n    normalizedMonth: moment.Moment,\r\n    datepicker: MatDatepicker<moment.Moment>\r\n  ) {\r\n    const ctrlValue = this.form.get('monthYear').value;\r\n    ctrlValue.month(normalizedMonth.month());\r\n    ctrlValue.year(this.yearAux.year());\r\n    this.form.get('monthYear').setValue(ctrlValue);\r\n    datepicker.close();\r\n    const monthTimestamp = this.form.get('monthYear').value;\r\n    const from = monthTimestamp.startOf('month').valueOf();\r\n    const to = monthTimestamp.endOf('month').valueOf();\r\n    this.selectorChange.emit({ from, to });\r\n  }\r\n}\r\n","\r\n<form class=\"grey-select\" [formGroup]=\"form\">\r\n  <mat-form-field class=\"datepicker-month-year\" appearance=\"fill\">\r\n    <mat-label>Mostrando</mat-label>\r\n    <input\r\n      matInput\r\n      [matDatepicker]=\"dp\"\r\n      [max]=\"maxDate\"\r\n      formControlName=\"monthYear\"\r\n      readonly\r\n    />\r\n    <mat-datepicker-toggle matSuffix [for]=\"dp\">\r\n      <mat-icon matDatepickerToggleIcon>arrow_drop_down</mat-icon>\r\n    </mat-datepicker-toggle>\r\n    <mat-datepicker #picker></mat-datepicker>\r\n    <mat-datepicker\r\n      #dp\r\n      (monthSelected)=\"chosenMonthHandler($event, dp)\"\r\n      (yearSelected)=\"chosenYearHandler($event)\"\r\n      startView=\"multi-year\"\r\n      panelClass=\"example-month-picker\"\r\n    >\r\n    </mat-datepicker>\r\n  </mat-form-field>\r\n</form>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { DashboardService } from './dashboard.service';\r\nimport { Restaurant } from '@models';\r\nimport { Subscription } from 'rxjs';\r\nimport { RestaurantService } from '@services';\r\nimport * as moment from 'moment';\r\nimport { RestaurantStatus } from '@models';\r\nimport { StripeStatus } from '@interfaces';\r\nimport { PaymentService } from '@services';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss'],\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  public displayedColumns: string[] = [\r\n    'user',\r\n    'branchOffice',\r\n    'rating',\r\n    'comment',\r\n    'viewMore',\r\n  ];\r\n\r\n  /**\r\n   * Variable used to store the subscription that give us the actual restaurant data.\r\n   * We save that subscription so that later we can unsubscribe it.\r\n   */\r\n  private currentRestaurantSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable where we store the selected restaurant data.\r\n   */\r\n  public restauranteSelected: Restaurant;\r\n\r\n  /**\r\n   * Variable where we store the restaurant status that we get from the server.\r\n   */\r\n  public restaurantStatus: RestaurantStatus;\r\n\r\n  /**\r\n   * Variable to store the stripe status values.\r\n   */\r\n  public stripeStatus: StripeStatus;\r\n\r\n  constructor(\r\n    private dashboardService: DashboardService,\r\n    private restaurantService: RestaurantService,\r\n    private paymentService: PaymentService\r\n  ) {}\r\n\r\n  /**\r\n   * Function that looks for the current restaurant info and save it at the restauranteSelected global variable\r\n   */\r\n  ngOnInit() {\r\n    this.getRestaurantInfo();\r\n    this.getStripeStatus();\r\n  }\r\n\r\n  /**\r\n   * Function that looks for the actual restaurant info and save it at the restauranteSelected global variable.\r\n   * When the info is obtained the observable is unsubscribed.\r\n   */\r\n  private getRestaurantInfo(): void {\r\n    this.currentRestaurantSubscription = this.restaurantService.currentRestaurant.subscribe(\r\n      (restaurant: Restaurant) => {\r\n        if (restaurant) {\r\n          this.currentRestaurantSubscription.unsubscribe();\r\n          this.restauranteSelected = restaurant;\r\n          this.getRestaurantStatus();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Function that gets the status of the restaurant from the server of a specific month.\r\n   * @param month number that represents the month used as period of time to get the restaurant status,\r\n   * if it isn't passed the current month is used.\r\n   */\r\n  public getRestaurantStatus(\r\n    from: number = moment().startOf('month').valueOf(),\r\n    to: number = moment().endOf('month').valueOf()\r\n  ): void {\r\n    from = Math.trunc(from / 1000);\r\n    to = Math.trunc(to / 1000);\r\n\r\n    this.dashboardService\r\n      .getRestaurantStatus(this.restauranteSelected.id, from, to)\r\n      .subscribe((response: RestaurantStatus) => {\r\n        this.restaurantStatus = response;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Function that changes the status of the comment parameter that determinate if the full comment is visible.\r\n   * @param index The position of the comment to make fully visible.\r\n   */\r\n  public toggleFullComment(index: number): void {\r\n    this.restaurantStatus.last_comments[index].isFullyVisible = !this\r\n      .restaurantStatus.last_comments[index].isFullyVisible;\r\n  }\r\n\r\n  /**\r\n   * Function that returns a unicode string containing stars.\r\n   * @param numberOfStars The number of stars in the string.\r\n   * @returns A string of stars.\r\n   */\r\n  public getRatingStars(numberOfStars: number): string {\r\n    let ratingStars = '';\r\n    for (let index = 0; index < numberOfStars; index++) {\r\n      ratingStars = ratingStars + ' &#9733;';\r\n    }\r\n    return ratingStars;\r\n  }\r\n\r\n  /**\r\n   * Function that destructures the from & to values to fetch restaurant info after\r\n   */\r\n  public chosenMonthHandler($event: { from: number; to: number }): void {\r\n    const { from, to } = $event;\r\n    this.getRestaurantStatus(from, to);\r\n  }\r\n\r\n  /**\r\n   * Function that looks for the Stripe status at the server.\r\n   */\r\n  private getStripeStatus(): void {\r\n    this.paymentService\r\n      .getStripeStatus()\r\n      .subscribe((response: StripeStatus) => {\r\n        this.stripeStatus = response;\r\n      });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '@environments/environment';\r\nimport { RestaurantStatus, CommentsResponse } from '@models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DashboardService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getRestaurantStatus(\r\n    restaurantId: number,\r\n    from: number,\r\n    to: number\r\n  ): Observable<RestaurantStatus> {\r\n    const url = environment.STATUS.replace(\r\n      '{restaurantId}',\r\n      restaurantId.toString()\r\n    )\r\n      .replace('{from}', from.toString())\r\n      .replace('{to}', to.toString());\r\n    return this.http.get<RestaurantStatus>(url);\r\n  }\r\n\r\n  /**\r\n   * Method used to fetch comments from a given restaurant,\r\n   * retrieving pagination properties once the server responds\r\n   * @param Restaurant id the we will fetch the comments from\r\n   * @param Period of time in which date filtering should start\r\n   * @param Period of time in which date filtering should finish\r\n   * (Pagination use)\r\n   * @param Maximum quantity of items to be retrieved from the request (if necessary)\r\n   * @param Number as the starting point in which the server should retrieve any results (if necessary)\r\n   */\r\n\r\n  public getRestaurantComments(\r\n    restaurantId: number,\r\n    from: number,\r\n    to: number,\r\n    limit: number,\r\n    offset: number\r\n  ): Observable<CommentsResponse> {\r\n    const url =\r\n      environment.RESTAURANT_COMMENTS.replace(\r\n        '{restaurantId}',\r\n        restaurantId.toString()\r\n      )\r\n        .replace('{from}', from.toString())\r\n        .replace('{to}', to.toString()) +\r\n        '&limit=' +\r\n        limit +\r\n        '&offset=' +\r\n        offset +\r\n        '&timezone=' +\r\n        Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    return this.http.get<CommentsResponse>(url);\r\n  }\r\n}\r\n","<section class=\"dashboard-section-container\">\r\n  <app-section-header [sectionName]=\"'Dashboard'\"></app-section-header>\r\n  <div class=\"dashboard-content\">\r\n    <div id=\"dashboard\" *ngIf=\"restaurantStatus\">\r\n      <div class=\"top-container\">\r\n        <div class=\"stripe-status-container\">\r\n          <div\r\n            class=\"account-status-tag not-created\"\r\n            *ngIf=\"\r\n              stripeStatus &&\r\n              (!stripeStatus.completed_onboarding ||\r\n                !stripeStatus.express_account_created)\r\n            \"\r\n          >\r\n            <img src=\"assets/images/icons/white-cross.svg\" alt=\"\" />\r\n            Aún no tienes configurada tu cuenta de Stripe para recibir pagos\r\n          </div>\r\n          <button\r\n            class=\"btns\"\r\n            routerLink=\"/admin/preferences/payment\"\r\n            *ngIf=\"\r\n              stripeStatus &&\r\n              (!stripeStatus.completed_onboarding ||\r\n                !stripeStatus.express_account_created)\r\n            \"\r\n          >\r\n            <span>Ir</span>\r\n          </button>\r\n        </div>\r\n        <app-year-month-selector\r\n          (selectorChange)=\"chosenMonthHandler($event)\"\r\n        ></app-year-month-selector>\r\n      </div>\r\n      <div class=\"boxes inl\">\r\n        <div class=\"box middle\">\r\n          <p class=\"title\">Ventas totales</p>\r\n          <p class=\"count\">\r\n            ${{ restaurantStatus.total_income_in_cents / 100 | number: '0.2' }}\r\n            <span>MXN</span>\r\n          </p>\r\n        </div>\r\n        <div class=\"box middle\">\r\n          <p class=\"title\">Tu calificación</p>\r\n          <p class=\"count\">\r\n            {{ restaurantStatus.mean_rating || 0 | number: '0.2' }}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div class=\"boxes\">\r\n        <div class=\"box\">\r\n          <p class=\"title\">Opiniones de los clientes</p>\r\n          <table mat-table [dataSource]=\"restaurantStatus.last_comments\">\r\n            <ng-container matColumnDef=\"user\">\r\n              <th mat-header-cell *matHeaderCellDef>Usuario</th>\r\n              <td mat-cell *matCellDef=\"let comment\">\r\n                <span>\r\n                  {{ comment.customer_name }}\r\n                </span>\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"branchOffice\">\r\n              <th mat-header-cell *matHeaderCellDef>Sucursal</th>\r\n              <td mat-cell *matCellDef=\"let comment\">\r\n                <span>\r\n                  {{ comment.branch_office }}\r\n                </span>\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"rating\">\r\n              <th mat-header-cell *matHeaderCellDef>Calificación</th>\r\n              <td mat-cell *matCellDef=\"let comment\">\r\n                <span\r\n                  >{{ comment.rating\r\n                  }}<span\r\n                    class=\"star\"\r\n                    [innerHTML]=\"getRatingStars(comment.rating)\"\r\n                  ></span>\r\n                  <span\r\n                    class=\"fill-star\"\r\n                    [innerHTML]=\"getRatingStars(5 - comment.rating)\"\r\n                  ></span>\r\n                </span>\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"comment\">\r\n              <th mat-header-cell *matHeaderCellDef>Comentario</th>\r\n              <td\r\n                mat-cell\r\n                *matCellDef=\"let comment; let i = index\"\r\n                class=\"comments\"\r\n              >\r\n                <span\r\n                  class=\"truncate-text\"\r\n                  [ngClass]=\"{\r\n                    'see-all-content': comment.isFullyVisible\r\n                  }\"\r\n                  >\"{{ comment.comments }}\"</span\r\n                >\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"viewMore\">\r\n              <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n              <td mat-cell *matCellDef=\"let element; let i = index\">\r\n                <a\r\n                  *ngIf=\"restaurantStatus.last_comments[i].comments.length > 0\"\r\n                  (click)=\"toggleFullComment(i)\"\r\n                >\r\n                  <span>\r\n                    {{\r\n                      restaurantStatus.last_comments[i].isFullyVisible\r\n                        ? 'Ver menos'\r\n                        : 'Ver más'\r\n                    }}\r\n                  </span>\r\n                </a>\r\n              </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n          </table>\r\n          <a routerLink=\"/admin/dashboard/comments\" class=\"bottom-right\">\r\n            <span> Ver Todos </span>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { PaginationComponent } from '@components/pagination/pagination.component';\r\nimport { Component, OnInit, ViewChild, OnChanges } from '@angular/core';\r\nimport { DashboardService } from './../dashboard.service';\r\nimport { Restaurant, Comment } from '@models';\r\nimport { RestaurantService } from '@services';\r\nimport { Subscription } from 'rxjs';\r\nimport * as moment from 'moment';\r\n@Component({\r\n  selector: 'app-comments',\r\n  templateUrl: './comments.component.html',\r\n  styleUrls: ['./comments.component.scss'],\r\n})\r\nexport class CommentsComponent implements OnInit, OnChanges {\r\n  /**\r\n   * Collection of comments that wil be rendered in the view\r\n   */\r\n  public comments: Comment[];\r\n\r\n  /**\r\n   * Variable used to store the subscription that give us the actual restaurant data.\r\n   * We save that subscription so that later we can unsubscribe it.\r\n   */\r\n\r\n  private currentRestaurantSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable where we store the selected restaurant data.\r\n   */\r\n\r\n  public restauranteSelected: Restaurant;\r\n\r\n  /******** Variables used for the pagination. ********/\r\n\r\n  /**\r\n   * Max number of comments to show\r\n   */\r\n  private pageSize = 10;\r\n\r\n  /**\r\n   * Number of pages\r\n   */\r\n  public totalPages = 1;\r\n\r\n  /**\r\n   * Selected page\r\n   */\r\n  private actualPage = 1;\r\n\r\n  /**\r\n   * Reference to the pagination element, it is used to call the component's functions.\r\n   */\r\n  @ViewChild('pagination', { static: false })\r\n  private pagination: PaginationComponent;\r\n\r\n  constructor(\r\n    private dashboardService: DashboardService,\r\n    private restaurantService: RestaurantService\r\n  ) {}\r\n\r\n  /**\r\n   * At first we should look for the restaurant info so we can obtain its comments after.\r\n   */\r\n  ngOnInit(): void {\r\n    this.getRestaurantInfo();\r\n    this.getComments();\r\n  }\r\n\r\n  /**\r\n   * Function that looks for the current restaurant info and save it at the restauranteSelected global variable\r\n   */\r\n  private getRestaurantInfo() {\r\n    this.currentRestaurantSubscription = this.restaurantService.currentRestaurant.subscribe(\r\n      (restaurant: Restaurant) => {\r\n        if (restaurant) {\r\n          this.currentRestaurantSubscription.unsubscribe();\r\n          this.restauranteSelected = restaurant;\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Function that gets comments with any month given,\r\n   * after one month is selected this function will obtain the correct period of time (montly standards)\r\n   * so that it will fetch the comments, filtering them with pagination element's current status\r\n   */\r\n  public getComments(\r\n    from: number = moment().startOf('month').valueOf(),\r\n    to: number = moment().endOf('month').valueOf()\r\n  ): void {\r\n    from = Math.trunc(from / 1000);\r\n    to = Math.trunc(to / 1000);\r\n\r\n    this.dashboardService\r\n      .getRestaurantComments(\r\n        this.restauranteSelected.id,\r\n        from,\r\n        to,\r\n        this.pageSize,\r\n        (this.actualPage - 1) * this.pageSize\r\n      )\r\n      .subscribe(({ comments, pagination }) => {\r\n        this.comments = comments;\r\n        this.totalPages = Math.ceil(pagination.count / this.pageSize);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Function that changes the status of the comment parameter that determinate if the full comment is visible.\r\n   * @param index The position of the comment to make fully visible.\r\n   */\r\n  public toggleFullComment(index: number): void {\r\n    this.comments[index].isFullyVisible = !this.comments[index].isFullyVisible;\r\n  }\r\n\r\n  /**\r\n   * When the inputs change we reset the global variables and then get the reservations.\r\n   */\r\n  ngOnChanges(): void {\r\n    this.resetValues();\r\n    // this.getComments();\r\n  }\r\n\r\n  /**\r\n   * Function that resets the global variables.\r\n   */\r\n  private resetValues(): void {\r\n    this.comments = [];\r\n    this.totalPages = 1;\r\n    this.actualPage = 1;\r\n    if (this.pagination) {\r\n      this.pagination.resetPagination();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function that returns a unicode string containing stars.\r\n   * @param numberOfStars The number of stars in the string.\r\n   * @returns A string of stars.\r\n   */\r\n  public getRatingStars(numberOfStars: number): string {\r\n    let ratingStars = '';\r\n    for (let index = 0; index < numberOfStars; index++) {\r\n      ratingStars = ratingStars + ' &#9733;';\r\n    }\r\n    return ratingStars;\r\n  }\r\n\r\n  /**\r\n   * Function called when the selected page is updated and then looks for the reservations.\r\n   * @param page Value to set as the selected page.\r\n   */\r\n  public updatePage(page: number): void {\r\n    this.actualPage = page;\r\n    this.getComments();\r\n  }\r\n\r\n  /**\r\n   * Function that destructures the from & to values to fetch restaurant info after\r\n   */\r\n  public chosenMonthHandler($event: { from: number; to: number }): void {\r\n    const { from, to } = $event;\r\n    this.getComments(from, to);\r\n  }\r\n}\r\n","<section class=\"dashboard-section-container\">\r\n  <app-section-header [sectionName]=\"'Dashboard'\"></app-section-header>\r\n\r\n  <div class=\"dashboard-content\">\r\n    <div id=\"comments\">\r\n      <div class=\"picker-aligned\">\r\n        <app-year-month-selector\r\n          (selectorChange)=\"chosenMonthHandler($event)\"\r\n        ></app-year-month-selector>\r\n      </div>\r\n      <div class=\"box\">\r\n        <p class=\"title\">Opiniones de los clientes</p>\r\n        <div class=\"comments-list\">\r\n          <div class=\"row heads\">\r\n            <div class=\"column\"><p>Usuario</p></div>\r\n            <div class=\"column\"><p>Sucursal</p></div>\r\n            <div class=\"column\"><p>Calificación</p></div>\r\n            <div class=\"column\"><p>Comentario</p></div>\r\n          </div>\r\n          <div class=\"row\" *ngFor=\"let comment of comments; let i = index\">\r\n            <div class=\"column\">\r\n              <p>{{ comment.customer_name }}</p>\r\n            </div>\r\n            <div class=\"column\">\r\n              <p>{{ comment.branch_office }}</p>\r\n            </div>\r\n            <div class=\"column\">\r\n              <span\r\n                >{{ comment.rating\r\n                }}<span\r\n                  class=\"star\"\r\n                  [innerHTML]=\"getRatingStars(comment.rating)\"\r\n                ></span>\r\n                <span\r\n                  class=\"fill-star\"\r\n                  [innerHTML]=\"getRatingStars(5 - comment.rating)\"\r\n                ></span>\r\n              </span>\r\n            </div>\r\n            <div class=\"column\">\r\n              <p\r\n                class=\"comments\"\r\n                [ngClass]=\"{\r\n                  'see-all-content': comment.isFullyVisible\r\n                }\"\r\n              >\r\n                \"{{ comment.comments }}\"\r\n              </p>\r\n            </div>\r\n            <div class=\"column\">\r\n              <a\r\n                *ngIf=\"comment.comments.length > 0\"\r\n                (click)=\"toggleFullComment(i)\"\r\n              >\r\n                <span>\r\n                  {{ comments[i].isFullyVisible ? 'Ver menos' : 'Ver más' }}\r\n                </span>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <app-pagination\r\n          *ngIf=\"totalPages > 1\"\r\n          [totalPages]=\"totalPages\"\r\n          (currentPage)=\"updatePage($event)\"\r\n          #pagination\r\n        ></app-pagination>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { CommentsComponent } from './comments/comments.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard.component';\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DashboardComponent\r\n  },\r\n  {\r\n    path: 'comments',\r\n    component: CommentsComponent,\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule {}\r\n"]}