{"version":3,"sources":["webpack:///node_modules/@angular/material/fesm2015/card.js","webpack:///node_modules/@angular/material/card/index.d.ts.MatCard.html","webpack:///src/app/pages/layout/income-and-payments/income-and-payments.service.ts","webpack:///src/app/pages/layout/income-and-payments/income-and-payments.module.ts","webpack:///src/app/pages/layout/income-and-payments/incomes-table/incomes-table.component.ts","webpack:///src/app/pages/layout/income-and-payments/incomes-table/incomes-table.component.html","webpack:///src/app/pages/layout/income-and-payments/income-and-payments.component.ts","webpack:///src/app/pages/layout/income-and-payments/income-and-payments.component.html","webpack:///src/app/pages/layout/income-and-payments/income-and-payments-routing.module.ts"],"names":["MatCardContent","MatCard","_animationMode","this","MatCardHeader","MatCardTitleGroup","MatCardModule","IncomeAndPaymentsService","IncomeAndPaymentsModule","incomeAndPaymentsService","reservations","pageSize","totalPages","actualPage","getReservations","resetValues","pagination","resetPagination","getIncomesByDate","restaurantId","moment","dayWithIncome","date","valueOf","subscribe","response","Math","ceil","count","page","total","final_income","http","from","to","url","environment","INCOME","replace","toString","Intl","DateTimeFormat","resolvedOptions","timeZone","get","limit","offset","INCOME_BY_DAY","restaurantService","currentRestaurantSubscription","Subscription","EMPTY","daysWithIncome","getRestaurantInfo","currentRestaurant","restaurant","unsubscribe","restauranteSelected","startOf","endOf","getIncomeByDays","getDaysWithTotalIncome","id","days","length","selectedDay","index","IncomeAndPaymentsRoutingModule"],"mappings":"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","file":"x","sourcesContent":["import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardContent {\n}\nMatCardContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            },] }\n];\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            },] }\n];\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            },] }\n];\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /**\n         * Position of the actions inside the card.\n         */\n        this.align = 'start';\n    }\n}\nMatCardActions.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n                }\n            },] }\n];\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Position of the actions inside the card.\n     * @type {?}\n     */\n    MatCardActions.prototype.align;\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            },] }\n];\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            },] }\n];\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            },] }\n];\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MatCard.prototype._animationMode;\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }] }\n];\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatCardModule {\n}\nMatCardModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n//# sourceMappingURL=card.js.map\n","<ng-content></ng-content>\n<ng-content select=\"mat-card-footer\"></ng-content>\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '@environments/environment';\r\nimport { Income, IncomeByDay } from '@models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IncomeAndPaymentsService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  /**\r\n   * Funtion that gets from the server the list of days with incomes of a period of time.\r\n   * @param restaurantId The id of the restaurant of which we are getting the info.\r\n   * @param from Timestamp of the date from when to get the days.\r\n   * @param to Timestamp of the date to when to get the days.\r\n   */\r\n  public getDaysWithTotalIncome(\r\n    restaurantId: number,\r\n    from: number,\r\n    to: number\r\n  ): Observable<Income> {\r\n    const url =\r\n      environment.INCOME.replace('{restaurantId}', restaurantId.toString()) +\r\n      '?from=' +\r\n      from +\r\n      '&to=' +\r\n      to +\r\n      '&timezone=' +\r\n      Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    return this.http.get<Income>(url);\r\n  }\r\n\r\n  /**\r\n   * Function that gets from the server the detailed incomes of a specific date.\r\n   * @param restaurantId The id of the restaurant of which we are getting the info.\r\n   * @param date Timestamp of the date to get the info.\r\n   * @param limit Max number of days to get from the server.\r\n   * @param offset Number of which to to get the days.\r\n   */\r\n  public getIncomesByDate(\r\n    restaurantId: number,\r\n    date: number,\r\n    limit: number,\r\n    offset: number\r\n  ): Observable<IncomeByDay> {\r\n    const url =\r\n      environment.INCOME_BY_DAY.replace(\r\n        '{restaurantId}',\r\n        restaurantId.toString()\r\n      ) +\r\n      '?date=' +\r\n      date +\r\n      '&limit=' +\r\n      limit +\r\n      '&offset=' +\r\n      offset +\r\n      '&timezone=' +\r\n      Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    return this.http.get<IncomeByDay>(url);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IncomeAndPaymentsRoutingModule } from './income-and-payments-routing.module';\r\nimport { IncomeAndPaymentsComponent } from './income-and-payments.component';\r\nimport { SectionHeaderModule } from '@components/section-header/section-header.module';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { IncomesTableComponent } from './incomes-table/incomes-table.component';\r\nimport { PaginationModule } from '@components/pagination/pagination.module';\r\n\r\n@NgModule({\r\n  declarations: [IncomeAndPaymentsComponent, IncomesTableComponent],\r\n  imports: [\r\n    CommonModule,\r\n    IncomeAndPaymentsRoutingModule,\r\n    SectionHeaderModule,\r\n    MatCardModule,\r\n    PaginationModule,\r\n  ],\r\n})\r\nexport class IncomeAndPaymentsModule {}\r\n","import { Component, OnInit, Input, OnChanges, ViewChild } from '@angular/core';\r\nimport { IncomeAndPaymentsService } from '../income-and-payments.service';\r\nimport * as moment from 'moment';\r\nimport { ReservationWithIncome, DayWithIncome, IncomeByDay } from '@models';\r\nimport { PaginationComponent } from '@components/pagination/pagination.component';\r\n\r\n@Component({\r\n  selector: 'app-incomes-table',\r\n  templateUrl: './incomes-table.component.html',\r\n  styleUrls: ['./incomes-table.component.scss'],\r\n})\r\nexport class IncomesTableComponent implements OnInit, OnChanges {\r\n  /**\r\n   * Day to which get the details of the income.\r\n   */\r\n  @Input() dayWithIncome: DayWithIncome;\r\n\r\n  /**\r\n   * Id of the restaurant to get the info.\r\n   */\r\n  @Input() restaurantId: number;\r\n\r\n  /**\r\n   * List of reservations to show at the list.\r\n   */\r\n  public reservations: Array<ReservationWithIncome> = [];\r\n\r\n  /******** Variables used for the pagination. ********/\r\n\r\n  /**\r\n   * Max number of elements to show at the reservations list.\r\n   */\r\n  private pageSize = 10;\r\n\r\n  /**\r\n   * Number of pages.\r\n   */\r\n  public totalPages = 1;\r\n\r\n  /**\r\n   * Selected page.\r\n   */\r\n  private actualPage = 1;\r\n\r\n  /**\r\n   * Reference to the pagination element, it is used to call the component's functions.\r\n   */\r\n  @ViewChild('pagination', { static: false })\r\n  private pagination: PaginationComponent;\r\n\r\n  /******** End of the variables used for the pagination. ********/\r\n\r\n  constructor(private incomeAndPaymentsService: IncomeAndPaymentsService) {}\r\n\r\n  /**\r\n   * The first thing to do is to get the reservations.\r\n   */\r\n  ngOnInit(): void {\r\n    this.getReservations();\r\n  }\r\n\r\n  /**\r\n   * When the inputs change we reset the global variables and then get the reservations.\r\n   */\r\n  ngOnChanges(): void {\r\n    this.resetValues();\r\n    this.getReservations();\r\n  }\r\n\r\n  /**\r\n   * Function that resets the global variables.\r\n   */\r\n  private resetValues(): void {\r\n    this.reservations = [];\r\n    this.totalPages = 1;\r\n    this.actualPage = 1;\r\n    if (this.pagination) {\r\n      this.pagination.resetPagination();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function that takes the global variables and looks for the reservations at the server.\r\n   */\r\n  private getReservations(): void {\r\n    this.incomeAndPaymentsService\r\n      .getIncomesByDate(\r\n        this.restaurantId,\r\n        moment(this.dayWithIncome.date, 'YYYY/MM/DD').valueOf() / 1000,\r\n        this.pageSize,\r\n        (this.actualPage - 1) * this.pageSize\r\n      )\r\n      .subscribe((response: IncomeByDay) => {\r\n        this.totalPages = Math.ceil(response.pagination.count / this.pageSize);\r\n        this.reservations = response.reservations;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Function called when the selected page is updated and then looks for the reservations.\r\n   * @param page Value to set as the selected page.\r\n   */\r\n  public updatePage(page: number): void {\r\n    this.actualPage = page;\r\n    this.getReservations();\r\n  }\r\n\r\n  /**\r\n   * Total amount of profit\r\n   * @returns Sum of all profits subtracting the fees.\r\n   */\r\n  public get total(): number {\r\n    let total = 0;\r\n    for (const reservation of this.reservations) {\r\n      total += reservation.final_income;\r\n    }\r\n    return total;\r\n  }\r\n}\r\n","<section>\r\n  <div class=\"global-total\">\r\n    <p class=\"total\">TOTAL</p>\r\n    <p class=\"amount\">${{ total / 100 | number: '1.2' }} <span>MXN</span></p>\r\n  </div>\r\n  <div class=\"incomes-list\">\r\n    <div class=\"row heads\">\r\n      <div class=\"column\"><p>Reservación</p></div>\r\n      <div class=\"column\"><p>Fecha reservación</p></div>\r\n      <div class=\"column\"><p>Monto</p></div>\r\n      <div class=\"column\"><p>Propina</p></div>\r\n      <div class=\"column\"><p>Comisión</p></div>\r\n      <div class=\"column\"><p>Total</p></div>\r\n      <div class=\"column\"><p>Ganancia total</p></div>\r\n    </div>\r\n    <div class=\"row\" *ngFor=\"let reservation of reservations\">\r\n      <div class=\"column\">\r\n        <p>{{ reservation.code }}</p>\r\n      </div>\r\n      <div class=\"column date\">\r\n        <p>{{ reservation.reservation_at | date: 'd MMMM yyyy' }}</p>\r\n      </div>\r\n      <div class=\"column\">\r\n        <p>${{ reservation.price / 100 | number: '1.2' }}</p>\r\n      </div>\r\n      <div class=\"column\">\r\n        <p>${{ reservation.tip / 100 | number: '1.2' }}</p>\r\n      </div>\r\n      <div class=\"column\">\r\n        <p>-${{ reservation.platform_fee / 100 | number: '1.2' }}</p>\r\n      </div>\r\n      <div class=\"column\">\r\n        <p>${{ reservation.total / 100 | number: '1.2' }}</p>\r\n      </div>\r\n      <div class=\"column\">\r\n        <p>${{ reservation.final_income / 100 | number: '1.2' }}</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <app-pagination\r\n    *ngIf=\"totalPages > 1\"\r\n    [totalPages]=\"totalPages\"\r\n    (currentPage)=\"updatePage($event)\"\r\n    #pagination\r\n  ></app-pagination>\r\n</section>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport { IncomeAndPaymentsService } from './income-and-payments.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { RestaurantService } from '@services';\r\nimport { Restaurant } from '@models';\r\nimport { Income, DayWithIncome } from '@models';\r\n\r\n@Component({\r\n  selector: 'app-income-and-payments',\r\n  templateUrl: './income-and-payments.component.html',\r\n  styleUrls: ['./income-and-payments.component.scss'],\r\n})\r\nexport class IncomeAndPaymentsComponent implements OnInit {\r\n  /**\r\n   * Variable used to store the subscription that give us the actual restaurant data.\r\n   * We save that subscription so that later we can unsubscribe it.\r\n   */\r\n  private currentRestaurantSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable where we store the selected restaurant data.\r\n   */\r\n  public restauranteSelected: Restaurant;\r\n\r\n  /**\r\n   * Array of days to show on the list\r\n   */\r\n  public daysWithIncome: Array<DayWithIncome> = [];\r\n\r\n  /**\r\n   * Element of the day's list selected by the user to see the details.\r\n   */\r\n  public selectedDay: DayWithIncome;\r\n\r\n  constructor(\r\n    private incomeAndPaymentsService: IncomeAndPaymentsService,\r\n    private restaurantService: RestaurantService\r\n  ) {}\r\n\r\n  /**\r\n   * The first thing to do is get the restaurant info.\r\n   */\r\n  ngOnInit(): void {\r\n    this.getRestaurantInfo();\r\n  }\r\n\r\n  /**\r\n   * Function that looks for the actual restaurant info and save it at the restauranteSelected global variable.\r\n   * When the info is obtained the observable is unsubscribed.\r\n   * We use the information of the restaurant and the actual month to get the list of days.\r\n   */\r\n  private getRestaurantInfo(): void {\r\n    this.currentRestaurantSubscription = this.restaurantService.currentRestaurant.subscribe(\r\n      (restaurant: Restaurant) => {\r\n        if (restaurant) {\r\n          this.currentRestaurantSubscription.unsubscribe();\r\n          this.restauranteSelected = restaurant;\r\n          const from = moment().startOf('month').valueOf() / 1000;\r\n          const to = moment().endOf('month').valueOf() / 1000;\r\n          this.getIncomeByDays(from, to);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Function that gets the list of days from the server.\r\n   * @param from Timestamp of the date from when to get the days.\r\n   * @param to Timestamp of the date to when to get the days.\r\n   */\r\n  private getIncomeByDays(from: number, to: number): void {\r\n    this.incomeAndPaymentsService\r\n      .getDaysWithTotalIncome(this.restauranteSelected.id, from, to)\r\n      .subscribe((response: Income) => {\r\n        this.daysWithIncome = response.days;\r\n        if (this.daysWithIncome.length > 0) {\r\n          this.selectedDay = this.daysWithIncome[0];\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Function that sets the selected element of the list of days.\r\n   * @param index Position of the element at the list of days to set as selected.\r\n   */\r\n  public setSelectedDay(index: number): void {\r\n    this.selectedDay = this.daysWithIncome[index];\r\n  }\r\n\r\n  /**\r\n   * Function that reset the list and then updates it.\r\n   * @param date Timestamp of a date, the month of this date is used to get the list.\r\n   */\r\n  public getIncomeForTheWholeMonth(date: number): void {\r\n    this.selectedDay = undefined;\r\n    this.daysWithIncome = [];\r\n    const from = moment(date).startOf('month').valueOf() / 1000;\r\n    const to = moment(date).endOf('month').valueOf() / 1000;\r\n    this.getIncomeByDays(from, to);\r\n  }\r\n\r\n  /**\r\n   * @returns Boolean that tells if the day's list is empty.\r\n   */\r\n  public get isDaysArrayEmpty(): boolean {\r\n    return this.daysWithIncome.length === 0;\r\n  }\r\n}\r\n","<section class=\"dashboard-section-container\">\r\n  <app-section-header\r\n    [sectionName]=\"'Ingresos y pagos'\"\r\n    [hasTheMonthYearCalendarToBeVisible]=\"true\"\r\n    (monthYearChanged)=\"getIncomeForTheWholeMonth($event)\"\r\n  ></app-section-header>\r\n  <div class=\"dashboard-content\">\r\n    <ng-container *ngIf=\"isDaysArrayEmpty\">\r\n      <div class=\"empty inl\">\r\n        <div class=\"empty-content\">\r\n          <img src=\"assets/images/icons/general-empty.svg\" alt=\"Menu\" />\r\n          <p class=\"h2 txtC clr-nm\">\r\n            Aún no tienes ingresos y pagos realizados\r\n          </p>\r\n          <p class=\"txtC description\">\r\n            En cuanto comiencen las reservas en tu restaurante A Plato Puesto\r\n            empezará a depositar los pagos correspondientes\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!isDaysArrayEmpty\">\r\n      <aside>\r\n        <ul class=\"incomes-list\">\r\n          <li\r\n            class=\"income-container\"\r\n            *ngFor=\"let day of daysWithIncome; let i = index\"\r\n            [ngClass]=\"{ selected: selectedDay.date === day.date }\"\r\n            (click)=\"setSelectedDay(i)\"\r\n          >\r\n            <div class=\"income-header\">\r\n              <p class=\"date\">{{ day.date | date: 'd MMMM yyyy' }}</p>\r\n            </div>\r\n            <p class=\"quantity\">\r\n              ${{ day.total_income_in_cents / 100 | number: '0.2' }}\r\n            </p>\r\n          </li>\r\n        </ul>\r\n      </aside>\r\n      <main id=\"content\">\r\n        <mat-card class=\"no-padding\">\r\n          <mat-card-content>\r\n            <app-incomes-table\r\n              *ngIf=\"selectedDay\"\r\n              [restaurantId]=\"restauranteSelected.id\"\r\n              [dayWithIncome]=\"selectedDay\"\r\n            ></app-incomes-table>\r\n          </mat-card-content>\r\n        </mat-card>\r\n      </main>\r\n    </ng-container>\r\n  </div>\r\n</section>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { IncomeAndPaymentsComponent } from './income-and-payments.component';\r\n\r\nconst routes: Routes = [{ path: '', component: IncomeAndPaymentsComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class IncomeAndPaymentsRoutingModule {}\r\n"]}