{"version":3,"sources":["webpack:///src/app/pages/layout/preferences/branch-info/restaurant-manager/restaurant-manager.module.ts","webpack:///src/app/pages/layout/preferences/branch-info/restaurant-manager/restaurant-manager.component.ts","webpack:///src/app/pages/layout/preferences/branch-info/restaurant-manager/restaurant-manager.component.html","webpack:///src/app/pages/layout/preferences/branch-info/restaurant-manager/restaurant-manager-routing.module.ts"],"names":["RestaurantManagerModule","restaurantService","usersService","fB","snackBar","hasRetaurantAnAssignedManager","currentRestaurantSubscription","Subscription","EMPTY","form","this","group","name","required","minLength","maxLength","lastName","email","value","disabled","validators","pattern","updateOn","editManagerSubscription","getRestaurantInfo","unsubscribe","currentRestaurant","subscribe","restaurant","restauranteSelected","getRestaurantDetail","id","response","manager","patchValue","last_name","valid","managerId","managerObject","getManagerInfo","updateStaff","updateSharedRestaurantManagerInfo","open","duration","get","setRestaurant","user","FormData","append","RestaurantManagerRoutingModule"],"mappings":"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","file":"x","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RestaurantManagerRoutingModule } from './restaurant-manager-routing.module';\r\nimport { RestaurantManagerComponent } from './restaurant-manager.component';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [RestaurantManagerComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RestaurantManagerRoutingModule,\r\n    MatInputModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n})\r\nexport class RestaurantManagerModule {}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { RestaurantService, UsersService } from '@services';\r\nimport { Subscription } from 'rxjs';\r\nimport { Restaurant, ResponseDetail } from '@models';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { RegexEmail } from '@constants';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-restaurant-manager',\r\n  templateUrl: './restaurant-manager.component.html',\r\n  styleUrls: ['./restaurant-manager.component.scss']\r\n})\r\nexport class RestaurantManagerComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Boolean that tell us if the restaurant has a manager assigned.\r\n   */\r\n  public hasRetaurantAnAssignedManager = false;\r\n\r\n  /**\r\n   * Variable used to store the subscription that give us the current restaurant data.\r\n   * We save that subscription so we can unsubscribe it.\r\n   */\r\n  private currentRestaurantSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Variable where the selected restaurant data is saved.\r\n   */\r\n  public restauranteSelected: Restaurant;\r\n\r\n  /**\r\n   * The form that manage the fields behaviour.\r\n   * The email field is set up to validate on blur so the regular expression doesn't break the platform so easily.\r\n   */\r\n  public form: FormGroup = this.fB.group({\r\n    name: [\r\n      '',\r\n      [Validators.required, Validators.minLength(3), Validators.maxLength(100)]\r\n    ],\r\n    lastName: [\r\n      '',\r\n      [Validators.required, Validators.minLength(3), Validators.maxLength(100)]\r\n    ],\r\n    email: [\r\n      { value: '', disabled: true },\r\n      {\r\n        validators: [Validators.required, Validators.pattern(RegexEmail)],\r\n        updateOn: 'blur'\r\n      }\r\n    ]\r\n  });\r\n\r\n  /**\r\n   * Variable used to store the subscription that tell us that the manager has been edited.\r\n   * We save that subscription so we can unsubscribe it.\r\n   */\r\n  private editManagerSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    private restaurantService: RestaurantService,\r\n    private usersService: UsersService,\r\n    private fB: FormBuilder,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  /**\r\n   * The first thing that the component does is to get the info of the restaurant,\r\n   * this info includes the manager data so we can fill the form fields.\r\n   */\r\n  ngOnInit(): void {\r\n    this.getRestaurantInfo();\r\n  }\r\n\r\n  /**\r\n   * When the component is destroyed we unsubscribe all the observables.\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.currentRestaurantSubscription.unsubscribe();\r\n    this.editManagerSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Function that looks for the current restaurant info and save it at the restauranteSelected global variable.\r\n   * After we get the restaurant info we look for its manager info at the server.\r\n   */\r\n  private getRestaurantInfo(): void {\r\n    this.currentRestaurantSubscription = this.restaurantService.currentRestaurant.subscribe(\r\n      (restaurant: Restaurant) => {\r\n        if (restaurant) {\r\n          this.currentRestaurantSubscription.unsubscribe();\r\n          this.restauranteSelected = restaurant;\r\n          this.restaurantService\r\n            .getRestaurantDetail(this.restauranteSelected.id)\r\n            .subscribe((response: ResponseDetail) => {\r\n              const manager = response.restaurant.manager;\r\n              if (manager) {\r\n                this.hasRetaurantAnAssignedManager = true;\r\n                this.form.patchValue({\r\n                  name: manager.name,\r\n                  lastName: manager.last_name,\r\n                  email: manager.email\r\n                });\r\n              }\r\n            });\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Function that saves the manager info in case that the form has a valid status.\r\n   * After the info is saved successfully we update the global restaurant info.\r\n   */\r\n  public saveManagerInfo(): void {\r\n    if (this.form.valid) {\r\n      const managerId = this.restauranteSelected.managerObject.id;\r\n      const manager = this.getManagerInfo();\r\n      this.editManagerSubscription = this.usersService\r\n        .updateStaff(managerId, manager)\r\n        .subscribe(() => {\r\n          this.editManagerSubscription.unsubscribe();\r\n          this.updateSharedRestaurantManagerInfo();\r\n          this.snackBar.open(\r\n            'El gerente fue editado exitosamente',\r\n            'Entendido',\r\n            {\r\n              duration: 15000\r\n            }\r\n          );\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Funtion that update the global restaurant info concerning the manager.\r\n   */\r\n  private updateSharedRestaurantManagerInfo(): void {\r\n    const restaurant = this.restauranteSelected;\r\n    restaurant.managerObject.name = this.form.get('name').value;\r\n    restaurant.managerObject.last_name = this.form.get('lastName').value;\r\n    restaurant.managerObject.email = this.form.get('email').value;\r\n    this.restaurantService.setRestaurant(restaurant);\r\n  }\r\n\r\n  /**\r\n   * Funtion that validates the form and if it is valid then return a form data with the user info.\r\n   * If the user to be created is a manager the role is not specificated because it has its special endpoint.\r\n   * @returns in case that the form is valid the function returns a form data with the user info, otherwise it returns null.\r\n   */\r\n  private getManagerInfo(): FormData {\r\n    if (this.form.valid) {\r\n      const user = new FormData();\r\n      user.append('name', this.form.get('name').value);\r\n      user.append('last_name', this.form.get('lastName').value);\r\n      user.append('email', this.form.get('email').value);\r\n      return user;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","<section>\r\n  <p *ngIf=\"!hasRetaurantAnAssignedManager\">Aún no has asignado un gerente</p>\r\n  <form\r\n    [formGroup]=\"form\"\r\n    (ngSubmit)=\"saveManagerInfo()\"\r\n    *ngIf=\"hasRetaurantAnAssignedManager\"\r\n  >\r\n    <div class=\"inputs-containers\">\r\n      <mat-form-field>\r\n        <mat-label>Nombre</mat-label>\r\n        <input matInput formControlName=\"name\" />\r\n        <mat-error *ngIf=\"form.get('name').hasError('required')\">\r\n          Esta información es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"form.get('name').hasError('minlength')\">\r\n          El mínimo de caracteres es de 3 caracteres\r\n        </mat-error>\r\n        <mat-error *ngIf=\"form.get('name').hasError('maxlenght')\">\r\n          El máximo de caracteres es de 100 caracteres\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <mat-label>Apellido</mat-label>\r\n        <input matInput formControlName=\"lastName\" />\r\n        <mat-error *ngIf=\"form.get('lastName').hasError('required')\">\r\n          Esta información es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"form.get('lastName').hasError('minlength')\">\r\n          El mínimo de caracteres es de 3 caracteres\r\n        </mat-error>\r\n        <mat-error *ngIf=\"form.get('lastName').hasError('maxlenght')\">\r\n          El máximo de caracteres es de 100 caracteres\r\n        </mat-error>\r\n      </mat-form-field>\r\n      <mat-form-field>\r\n        <mat-label>Correo</mat-label>\r\n        <input matInput formControlName=\"email\" />\r\n        <mat-error *ngIf=\"form.get('email').hasError('required')\">\r\n          Esta información es necesaria\r\n        </mat-error>\r\n        <mat-error *ngIf=\"form.get('email').hasError('pattern')\">\r\n          El formato correcto deberá ser: ejemplo@ejemplo.com\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n    <button class=\"btns\" type=\"submit\">\r\n      <span>Guardar</span>\r\n    </button>\r\n  </form>\r\n</section>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RestaurantManagerComponent } from './restaurant-manager.component';\r\n\r\nconst routes: Routes = [{ path: '', component: RestaurantManagerComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RestaurantManagerRoutingModule {}\r\n"]}