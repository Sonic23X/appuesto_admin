{"version":3,"sources":["webpack:///src/app/pages/layout/profile/profile.module.ts","webpack:///src/app/pages/layout/profile/profile.component.ts","webpack:///src/app/pages/layout/profile/profile.component.html","webpack:///src/app/pages/layout/profile/profile-routing.module.ts","webpack:///node_modules/@angular/material/fesm2015/card.js","webpack:///node_modules/@angular/material/card/index.d.ts.MatCard.html"],"names":["ProfileModule","fB","usersService","snackBar","form","this","group","name","required","minLength","maxLength","lastName","email","validators","pattern","updateOn","picture","get","disable","getUserInformation","getUserDetails","subscribe","response","patchValue","last_name","imgPreviewSrc","userRole","role","valid","userData","FormData","append","value","updateUserProfile","open","duration","file","size","fileType","type","reader","FileReader","onload","eImage","img","Image","setValue","src","target","result","readAsDataURL","ProfileRoutingModule","MatCardContent","MatCard","_animationMode","MatCardHeader","MatCardTitleGroup","MatCardModule"],"mappings":"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","file":"x","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProfileRoutingModule } from './profile-routing.module';\r\nimport { ProfileComponent } from './profile.component';\r\nimport { SectionHeaderModule } from '@components/section-header/section-header.module';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { UserRoleModule } from '@pipes/user-role/user-role.module';\r\n\r\n@NgModule({\r\n  declarations: [ProfileComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ProfileRoutingModule,\r\n    SectionHeaderModule,\r\n    MatCardModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    UserRoleModule,\r\n  ],\r\n})\r\nexport class ProfileModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { RegexEmail } from '@constants';\r\nimport { UsersService } from '@services';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { IUser } from '@interfaces';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.scss'],\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  /**\r\n   * The form that manage the fields behaviour.\r\n   * The email field is set up to validate on blur so the regular expression doesn't break the platform so easily.\r\n   */\r\n  public form: FormGroup = this.fB.group({\r\n    name: [\r\n      '',\r\n      [Validators.required, Validators.minLength(3), Validators.maxLength(100)],\r\n    ],\r\n    lastName: [\r\n      '',\r\n      [Validators.required, Validators.minLength(3), Validators.maxLength(100)],\r\n    ],\r\n    email: [\r\n      '',\r\n      {\r\n        validators: [Validators.required, Validators.pattern(RegexEmail)],\r\n        updateOn: 'blur',\r\n      },\r\n    ],\r\n    picture: null,\r\n  });\r\n\r\n  /**\r\n   * We save the user's role so we can display it.\r\n   */\r\n  public userRole: string;\r\n\r\n  /**\r\n   * We save the user's picture url to display it.\r\n   */\r\n  public imgPreviewSrc: string;\r\n\r\n  constructor(\r\n    private fB: FormBuilder,\r\n    private usersService: UsersService,\r\n    private snackBar: MatSnackBar\r\n  ) {\r\n    this.form.get('email').disable(); // The email input is always disabled, it cannot change.\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getUserInformation();\r\n  }\r\n\r\n  /**\r\n   * We get the user's profile and show the information where it belongs,\r\n   * we also save the picture url and the role globally.\r\n   */\r\n  private getUserInformation(): void {\r\n    this.usersService.getUserDetails().subscribe((response: IUser) => {\r\n      this.form.patchValue({\r\n        name: response.name,\r\n        lastName: response.last_name,\r\n        email: response.email,\r\n      });\r\n      this.imgPreviewSrc = response.picture || '';\r\n      this.userRole = response.role;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Function that tries to save the user's profile new information.\r\n   */\r\n  public saveUserInformation(): void {\r\n    if (this.form.valid) {\r\n      const userData = new FormData();\r\n      userData.append('name', this.form.get('name').value);\r\n      userData.append('last_name', this.form.get('lastName').value);\r\n      if (this.form.get('picture').value) {\r\n        userData.append('picture', this.form.get('picture').value);\r\n      }\r\n      this.usersService.updateUserProfile(userData).subscribe(() => {\r\n        this.snackBar.open(\r\n          'La información se actualizó exitosamente',\r\n          'Entendido',\r\n          {\r\n            duration: 15000,\r\n          }\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function that handle the input file change event to manage the image data.\r\n   * @param file the file loaded\r\n   */\r\n  public setProfileImage(file: File): void {\r\n    const fileSize = file.size / 1024000;\r\n    if (fileSize > 1) {\r\n      this.snackBar.open('La imagen excede 1MB', 'Entendido', {\r\n        duration: 15000,\r\n      });\r\n      return;\r\n    }\r\n    const fileType = file.type;\r\n    if (\r\n      fileType !== 'image/png' &&\r\n      fileType !== 'image/jpeg' &&\r\n      fileType !== 'image/jpg'\r\n    ) {\r\n      this.snackBar.open('La imagen es de un tipo incorrecto', 'Entendido', {\r\n        duration: 15000,\r\n      });\r\n      return;\r\n    }\r\n    const reader = new FileReader();\r\n    reader.onload = (eImage: any) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        this.form.get('picture').setValue(file);\r\n        this.imgPreviewSrc = img.src;\r\n      };\r\n      img.src = eImage.target.result;\r\n    };\r\n    reader.readAsDataURL(file);\r\n  }\r\n}\r\n","<section>\r\n  <app-section-header [sectionName]=\"'Perfil'\"></app-section-header>\r\n  <form\r\n    class=\"main-content\"\r\n    [formGroup]=\"form\"\r\n    (ngSubmit)=\"saveUserInformation()\"\r\n  >\r\n    <mat-card>\r\n      <mat-card-content>\r\n        <div class=\"picture-field-container\">\r\n          <div class=\"new-image-containt\">\r\n            <div class=\"preview\">\r\n              <div\r\n                class=\"backImg full cnt\"\r\n                *ngIf=\"imgPreviewSrc\"\r\n                [ngStyle]=\"{ backgroundImage: 'url(' + imgPreviewSrc + ')' }\"\r\n              ></div>\r\n            </div>\r\n            <div class=\"file-button\">\r\n              <input\r\n                type=\"file\"\r\n                accept=\".png, .jpeg\"\r\n                (change)=\"setProfileImage($event.target.files[0])\"\r\n              />\r\n              <p>Subir foto</p>\r\n            </div>\r\n            <small class=\"clr-nm\"\r\n              >JPG, PNG <br />\r\n              Dimensiones 600 x 400px <br />\r\n              Peso máximo 1 MB</small\r\n            >\r\n          </div>\r\n        </div>\r\n        <div class=\"general-fields-container\">\r\n          <p class=\"type\">Tipo de perfil</p>\r\n          <p class=\"type-value\" *ngIf=\"userRole\">{{ userRole | userRole }}</p>\r\n          <div class=\"inputs-containers\">\r\n            <mat-form-field>\r\n              <mat-label>Nombre</mat-label>\r\n              <input matInput formControlName=\"name\" maxlength=\"100\" />\r\n              <mat-error *ngIf=\"form.get('name').hasError('required')\">\r\n                Esta información es necesaria\r\n              </mat-error>\r\n              <mat-error *ngIf=\"form.get('name').hasError('minlength')\">\r\n                El mínimo de caracteres es de 3 caracteres\r\n              </mat-error>\r\n              <mat-error *ngIf=\"form.get('name').hasError('maxlength')\">\r\n                El máximo de caracteres es de 100 caracteres\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n              <mat-label>Apellido</mat-label>\r\n              <input matInput formControlName=\"lastName\" />\r\n              <mat-error *ngIf=\"form.get('lastName').hasError('required')\">\r\n                Esta información es necesaria\r\n              </mat-error>\r\n              <mat-error *ngIf=\"form.get('lastName').hasError('minlength')\">\r\n                El mínimo de caracteres es de 3 caracteres\r\n              </mat-error>\r\n              <mat-error *ngIf=\"form.get('lastName').hasError('maxlength')\">\r\n                El máximo de caracteres es de 100 caracteres\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n              <mat-label>Correo</mat-label>\r\n              <input matInput formControlName=\"email\" />\r\n              <mat-error *ngIf=\"form.get('email').hasError('required')\">\r\n                Esta información es necesaria\r\n              </mat-error>\r\n              <mat-error *ngIf=\"form.get('email').hasError('pattern')\">\r\n                El formato correcto deberá ser: ejemplo@ejemplo.com\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n          <div class=\"controls\">\r\n            <button class=\"btns\" type=\"submit\">\r\n              <span>Guardar</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </form>\r\n</section>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ProfileComponent } from './profile.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProfileComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ProfileRoutingModule {}\r\n","import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardContent {\n}\nMatCardContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            },] }\n];\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            },] }\n];\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            },] }\n];\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /**\n         * Position of the actions inside the card.\n         */\n        this.align = 'start';\n    }\n}\nMatCardActions.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n                }\n            },] }\n];\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Position of the actions inside the card.\n     * @type {?}\n     */\n    MatCardActions.prototype.align;\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            },] }\n];\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            },] }\n];\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            },] }\n];\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MatCard.prototype._animationMode;\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }] }\n];\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatCardModule {\n}\nMatCardModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n//# sourceMappingURL=card.js.map\n","<ng-content></ng-content>\n<ng-content select=\"mat-card-footer\"></ng-content>\n"]}